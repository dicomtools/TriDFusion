function [nestedLoad, nestedProceed, nestedDelete, nestedCancel] = machineLearningSegmentationDialog(sSegmentatorScript, sSegmentatorCombineMasks)
%function [nestedLoad, nestedProceed, nestedDelete, nestedCancel] = machineLearningSegmentationDialog(sSegmentatorScript, sSegmentatorCombineMasks)
%Run machine learning segmentation.
%See TriDFuison.doc (or pdf) for more information about options.
%
%Author: Daniel Lafontaine, lafontad@mskcc.org
%
%Last specifications modified:
%
% Copyright 2023, Daniel Lafontaine, on behalf of the TriDFusion development team.
%
% This file is part of The Triple Dimention Fusion (TriDFusion).
%
% TriDFusion development has been led by:  Daniel Lafontaine
%
% TriDFusion is distributed under the terms of the Lesser GNU Public License.
%
%     This version of TriDFusion is free software: you can redistribute it and/or modify
%     it under the terms of the GNU General Public License as published by
%     the Free Software Foundation, either version 3 of the License, or
%     (at your option) any later version.
%
% TriDFusion is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
% without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
% See the GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with TriDFusion.  If not, see <http://www.gnu.org/licenses/>.
    
    dSerieOffset = get(uiSeriesPtr('get'), 'Value');

    if isempty(dSerieOffset)
        return;
    end

    tInput = inputTemplate('get');
    if isempty(tInput)
        return;
    end

    if strcmpi(tInput(dSerieOffset).atDicomInfo{1}.Modality, 'ct')

        CLASSES_CT = true;

        DLG_COLUMN_SIZE = 280;
    
        DLG_MACHINE_SEGMENTATION_X = 40+5*DLG_COLUMN_SIZE;
        DLG_MACHINE_SEGMENTATION_Y = 760;
    else
        CLASSES_CT = false;
        
        DLG_COLUMN_SIZE = 466;
    
        DLG_MACHINE_SEGMENTATION_X = 40+3*DLG_COLUMN_SIZE;
        DLG_MACHINE_SEGMENTATION_Y = 760;        
    end

    if getMainWindowSize('xsize') < DLG_MACHINE_SEGMENTATION_X
        DLG_MACHINE_SEGMENTATION_X = getMainWindowSize('xsize');
    end

    if getMainWindowSize('ysize') < DLG_MACHINE_SEGMENTATION_Y
        DLG_MACHINE_SEGMENTATION_Y = getMainWindowSize('ysize');
    end

    if CLASSES_CT == true

        asSkeletonName = ...
            {'Skull'...
             'Clavicula Left', ...
             'Clavicula Right', ...
             'Humerus Left', ...
             'Humerus Right', ...
             'Scapula Left', ...
             'Scapula Right', ...
             'Ribs', ...
             'Rib Left [1-12]', ...
             'Rib Right [1-12]', ...
             'Vertebrae', ...
             'Vertebrae C[1-7]', ...
             'Vertebrae T[1-12]', ...
             'Vertebrae L[1-5]', ...
             'Vertebrae Ribs', ...
             'Sternum', ...
             'Costal Cartilages', ...
             'Hip Left', ...
             'Hip Right', ...
             'Sacrum Left', ...
             'Sacrum Right', ...
             'Femur Left', ...
             'Femur Right' ...
             };
    else
        asSkeletonName = ...
            {'Vertebrae', ...        
             'Humerus Left', ...
             'Humerus Right', ...
             'Autochthon Left', ...
             'Autochthon Right', ...
             'Intervertebral Discs', ...
             'Iliopsoas Left', ...
             'Iliopsoas Right', ...
             'Sacrum', ...
             'Hip Left', ...
             'Hip Right', ...
             'Gluteus Minimus Left', ...
             'Gluteus Minimus Right', ...
             'Gluteus Medius Left', ...
             'Gluteus Medius Right', ...
             'Gluteus Maximus Left', ...
             'Gluteus Maximus Right', ...
             'Thigh Medial Compartment Left', ...
             'Thigh Medial Compartment Right', ...
             'Sartorius Left', ...
             'Sartorius Right', ...
             'Quadriceps Femoris Left', ...
             'Quadriceps Femoris Right', ...
             'Thigh Posterior Compartment Left', ...
             'Thigh Posterior Compartment Right', ...
             'Femur Left', ...
             'Femur Right', ...
             'Fibula', ...
             'Tibia' ...
             };
    end

    if CLASSES_CT == true

        asCardiovascularName = ...
            {'Common Carotid Artery Left',...
             'Common Carotid Artery Right', ...
             'Subclavian Artery Left', ...
             'Subclavian Artery Right', ...
             'Brachiocephalic Trunk', ...
             'Brachiocephalic Vein Left', ...
             'Brachiocephalic Vein Right', ...
             'Pulmonary Vein', ...
             'Superior Vena Cava', ...
             'Heart', ...
             'Atrial Appendage Left', ...
             'Aorta', ...
             'Pulmonary Artery', ...
             'Ventricle Left', ...
             'Ventricle Right', ...
             'Atrium Left', ...
             'Atrium Right', ...
             'Myocardium', ...
             'Portal & Splenic Vein', ...
             'Inferior Vena Cava', ...
             'Iliac Artery Left', ...
             'Iliac Artery Right', ...
             'Iliac Vena Left', ...
             'Iliac Vena Right' ...
             };
    else
        asCardiovascularName = ...
            {'Esophagus',...
             'Aorta', ...
             'Heart', ...
             'Stomach', ...
             'Portal Vein and Splenic Vein', ...
             'Inferior Vena Cava', ...
             'Duodenum', ...
             'Colon', ...
             'Small Bowel', ...
             'Iliac Artery Left', ...
             'Iliac Artery Right', ...
             'Iliac Vena Left', ...
             'Iliac Vena Right', ...
             'Urinary Bladder' ...
             };
    end

    if CLASSES_CT == true

        asOtherOrgansName = ...
            {'Brain', ...
             'Spinal Cord', ...
             'Thyroid Gland', ...
             'Trachea', ...
             'Lungs', ...
             'Lung Left', ...
             'Lung Right', ...
             'Lung Upper Lobe Left', ...
             'Lung Upper Lobe Right', ...
             'Lung Middle Lobe Right', ...
             'Lung Lower Lobe Left', ...
             'Lung Lower Lobe Right', ...
             'Adrenal Gland Left', ...
             'Adrenal Gland Right', ...
             'Spleen', ...
             'Liver', ...
             'Gallbladder', ...
             'Pancreas', ...
             'Kidney Left', ...
             'Kidney Right', ...
             'Kidney Cyst Left', ...
             'Kidney Cyst Right', ...
             'Prostate' ...
             };
    else
         asOtherOrgansName = ...
            {'Brain', ...
             'Spinal Cord', ...
             'Lung Left', ...
             'Lung Right', ...
             'Spleen', ...
             'Liver', ...
             'Adrenal Gland Left', ...
             'Adrenal Gland Right', ...
             'Gallbladder', ...
             'Kidney Left', ...
             'Kidney Right', ...
             'Pancreas', ...
             'Prostate' ...
             };
    end

    if CLASSES_CT == true
   
        asGastrointestinalTractName = ...
            {'Esophagus', ...
             'Stomach', ...
             'Duodenum', ...
             'Small Bowel', ...
             'Colon', ...
             'Urinary Bladder' ...
             };
    else
        asGastrointestinalTractName = [];
    end

    if CLASSES_CT == true

        asMusclesName = ...
            {'Autochthon Left', ...
             'Autochthon Right', ...
             'Iliopsoas Left', ...
             'Iliopsoas Right', ...
             'Gluteus Minimus Left', ...
             'Gluteus Minimus Right', ...
             'Gluteus Medius Left', ...
             'Gluteus Medius Right', ...
             'Gluteus Maximus Left', ...
             'Gluteus Maximus Right' ...
             };
     else
        asMusclesName = [];   
    end

     if CLASSES_CT == true

        asHeadGlandsCavitiesName = ...
            {'Eye Left', ...
             'Eye Right', ... 
             'Eye Lens Left', ...
             'Eye Lens Right', ...
             'Optic Nerve Left', ...
             'Optic Nerve Right', ...
             'Parotid Gland Left', ...
             'Parotid Gland Right', ...
             'Submandibular Gland Right', ...
             'Submandibular Gland Left', ...
             'Nasopharynx', ...
             'Oropharynx', ...
             'Hypopharynx', ...
             'Nasal Cavity Right', ...
             'Nasal Cavity Left', ...
             'Auditory Canal Right', ...
             'Auditory Canal Left', ...
             'Soft Palate', ...
             'Hard Palate' ...
             };
     else
        asHeadGlandsCavitiesName = [];   
     end

     if CLASSES_CT == true

        asHeadMusclesName = ...
            {'Masseter Right', ...
             'Masseter Left', ...
             'Temporalis Right', ...
             'Temporalis Left', ...
             'Lateral Pterygoid Right', ...
             'Lateral Pterygoid Left', ...
             'Medial Pterygoid Right', ...
             'Medial Pterygoid Left', ...
             'Tongue', ...
             'Digastric Right', ...
             'Digastric Left', ...
             };
     else
        asHeadMusclesName = [];   
     end

     if CLASSES_CT == true

        asHeadneckBonesVesselsName = ...
            {'Larynx Air', ...
             'Thyroid Cartilage', ...
             'Hyoid', ...
             'Cricoid Cartilage', ...
             'Zygomatic Arch Right', ...
             'Zygomatic Arch Left', ...
             'Styloid Process Right', ...
             'Styloid Process Left', ...
             'Internal Carotid Artery Right', ...
             'Internal Carotid Artery Left', ...
             'Internal Jugular Vein Right', ...
             'Internal Jugular Vein Left' ...
             };
     else
        asHeadneckBonesVesselsName = [];   
     end

     if CLASSES_CT == true

        asHeadneckMusclesName = ...
            {'Sternocleidomastoid Right', ...
             'Sternocleidomastoid Left', ...
             'Superior Pharyngeal Constrictor', ...
             'Middle Pharyngeal Constrictor', ...
             'Inferior Pharyngeal Constrictor', ...
             'Trapezius Right', ...
             'Trapezius Left', ...
             'Platysma Right', ...
             'Platysma Left', ...
             'Levator Scapulae Right', ...
             'Levator Scapulae Left', ...
             'Anterior Scalene Right', ...
             'Anterior Scalene Left', ...
             'Middle Scalene Right', ...
             'Middle Scalene Left', ...
             'Posterior Scalene Right', ...
             'Posterior Scalene Left', ...
             'Sterno Thyroid Right', ...
             'Sterno Thyroid Left', ...
             'Thyrohyoid Right', ...
             'Thyrohyoid Left', ...
             'Prevertebral Right', ...
             'Prevertebral Left' ...
             };
     else
        asHeadneckMusclesName = [];   
     end

     if CLASSES_CT == true

        asAnonymizationName = ...
            {'Face' ...
             };
     else
        asAnonymizationName = [];   
     end

     asTissueTypesName = ...
        {'Subcutaneous Fat'...
         'Torso Fat', ...
         'Skeletal Muscle' ...
         };

     if CLASSES_CT == true

        asLiverVesselsName = ...
            {'Liver Vessels', ...
             'Liver Tumor' ...
             };
     else
        asLiverVesselsName = [];   
     end

    asLiverSegmentsName = ...
        {'Liver Segment 1', ...
         'Liver Segment 2', ...
         'Liver Segment 3', ...
         'Liver Segment 4', ...
         'Liver Segment 5', ...
         'Liver Segment 6', ...
         'Liver Segment 7', ...
         'Liver Segment 8', ...
         };

     if CLASSES_CT == true

         asBrainStructuresName = ...
            {'Brainstem'			
            'Caudate Nucleus'
            'Central Sulcus'
            'Cerebellum'
            'Frontal Lobe'
            'Insular Cortex'
            'Internal Capsule'
            'Lentiform Nucleus'
            'Occipital Lobe'
            'Parietal Lobe'
            'Septum Pellucidum'
            'Subarachnoid Space'
            'Temporal Lobe'
            'Thalamus'
            'Venous Sinuses'
            'Ventricle'
             };       
     else
        asBrainStructuresName = [];   
     end

     if CLASSES_CT == true

        asBodyName = ...
            {'Body', ...
             'Body Extremities', ...
             'Body Trunc', ...
             'Skin' ...
             };
     else
        asBodyName = [];   
     end

     if CLASSES_CT == true

        asLungVesselsName = ...
            {'Lung Trachea Bronchia', ...
             'lung Vessels' ...
             };
     else
        asLungVesselsName = [];   
     end

     if CLASSES_CT == true

        asCerebralBleedName = ...
            {'Intracerebral Hemorrhage' ...
             };
     else
        asCerebralBleedName = [];   
     end

     if CLASSES_CT == true

        asHipImplantName = ...
            {'Hip Implant' ...
             };
     else
        asHipImplantName = [];   
     end

     if CLASSES_CT == true

        asCoronaryArteriesName = ...
            {'Coronary Arteries' ...
             };
     else
        asCoronaryArteriesName = [];   
     end

     if CLASSES_CT == true

        asPleuralPericardEffusionName = ...
            {'Pleural Effusion', ...
             'Pericardial Effusion' ...
             };
     else
        asPleuralPericardEffusionName = [];   
     end


     if CLASSES_CT == true

        asHeartchambersHighresName = ...
            {'Myocardium', ...
             'Atrium Left', ...
             'Ventricle Left', ...
             'Atrium Right', ...
             'Ventricle Right', ...
             'Aorta', ...
             'Pulmonary Artery' ...
             };
     else
        asHeartchambersHighresName = [];   
     end

     if CLASSES_CT == true

        asAppendicularBonesName = ...
            {'Patella', ...
             'Tibia', ...
             'Fibula', ...
             'Tarsal', ...
             'Metatarsal', ...
             'Phalanges Feet', ...
             'Ulna', ...
             'Radius', ...
             'Carpal', ...
             'Metacarpal', ...
             'Phalanges Hand' ...
             };
     else
        asAppendicularBonesName = [];   
     end

     if viewerUIFigure('get') == true

        dlgMachineSegmentation = ...
            uifigure('Position', [(getMainWindowPosition('xpos')+(getMainWindowSize('xsize')/2)-DLG_MACHINE_SEGMENTATION_X/2) ...
                                  (getMainWindowPosition('ypos')+(getMainWindowSize('ysize')/2)-DLG_MACHINE_SEGMENTATION_Y/2) ...
                                 DLG_MACHINE_SEGMENTATION_X ...
                                 DLG_MACHINE_SEGMENTATION_Y ...
                                 ],...
                   'Resize', 'off', ...
                   'Color', viewerBackgroundColor('get'),...
                   'WindowStyle', 'modal', ...
                   'Name' , 'Machine Learning Segmentation'...
                   );
    else
        dlgMachineSegmentation = ...
            dialog('Position', [(getMainWindowPosition('xpos')+(getMainWindowSize('xsize')/2)-DLG_MACHINE_SEGMENTATION_X/2) ...
                                (getMainWindowPosition('ypos')+(getMainWindowSize('ysize')/2)-DLG_MACHINE_SEGMENTATION_Y/2) ...
                                DLG_MACHINE_SEGMENTATION_X ...
                                DLG_MACHINE_SEGMENTATION_Y ...
                               ],...
                   'MenuBar'    , 'none',...
                   'Resize'     , 'on', ...
                   'NumberTitle', 'off',...
                   'MenuBar'    , 'none',...
                   'Color'      , viewerBackgroundColor('get'), ...
                   'Name'       , 'Machine Learning Segmentation',...
                   'Toolbar'    , 'none'...
                   );
    end

    setObjectIcon(dlgMachineSegmentation);

    axeMachineSegmentation = ...
        axes(dlgMachineSegmentation, ...
             'Units'   , 'normalized', ...
             'Position', [0 0 1 1], ...
             'Color'   , viewerBackgroundColor('get'),...
             'XColor'  , viewerForegroundColor('get'),...
             'YColor'  , viewerForegroundColor('get'),...
             'ZColor'  , viewerForegroundColor('get'),...
             'Visible' , 'off'...
             );
    axeMachineSegmentation.Interactions = [];
    % axeMachineSegmentation.Toolbar.Visible = 'off';
    deleteAxesToolbar(axeMachineSegmentation);
    disableDefaultInteractivity(axeMachineSegmentation);

    uiMachineSegmentation = ...
        uipanel(dlgMachineSegmentation,...
               'Units'   , 'normalized',...
               'Position', [0 0 1 1], ...
               'Visible' , 'on', ...
               'BackgroundColor', viewerBackgroundColor('get'), ...
               'ForegroundColor', viewerForegroundColor('get') ...
               );

    uiMachineSegmentationNext = ...
        uipanel(dlgMachineSegmentation,...
               'Units'   , 'normalized',...
               'Position', [0 0 1 1], ...
               'Visible' , 'off', ...
               'BackgroundColor', viewerBackgroundColor('get'), ...
               'ForegroundColor', viewerForegroundColor('get') ...
               );

    uiMachineSegmentationSecondNext = ...
        uipanel(dlgMachineSegmentation,...
               'Units'   , 'normalized',...
               'Position', [0 0 1 1], ...
               'Visible' , 'off', ...
               'BackgroundColor', viewerBackgroundColor('get'), ...
               'ForegroundColor', viewerForegroundColor('get') ...
               );

    if viewerUIFigure('get') == false

        uiMachineSegmentationSlider = ...
            uicontrol('Style'   , 'Slider', ...
                      'Parent'  , dlgMachineSegmentation,...
                      'Units'   , 'normalized',...
                      'position', [0.99 ...
                                   0 ...
                                   0.01 ...
                                   1 ...
                                   ],...
                      'Value', 1, ...
                      'Callback',@uiMachineSegmentationSliderCallback, ...
                      'BackgroundColor', 'white', ...
                      'ForegroundColor', 'black' ...
                      );
%     addlistener(uiMachineSegmentationSlider, 'Value', 'PreSet', @uiMachineSegmentationSliderCallback);

        addlistener(uiMachineSegmentationSlider, 'ContinuousValueChange', @uiMachineSegmentationSliderCallback);
    end

    % Skeleton

    if CLASSES_CT == true

        chkMachineSegmentationSkeletonAll = ...
            uicontrol(uiMachineSegmentation,...
                      'style'   , 'checkbox',...
                      'Units'   , 'normalized',...
                      'enable'  , 'on',...
                      'value'   , 0,...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.01 ...
                                   0.95 ...
                                   0.02 ...
                                   0.02], ...
                      'Callback', @chkMachineSegmentationSkeletonAllCallback...
                      );
        
         uicontrol(uiMachineSegmentation,...
                  'style'     , 'text',...
                  'Units'     , 'normalized',...
                  'enable'    , 'Inactive',...
                  'FontWeight', 'bold',...
                  'FontSize'  , 12,...
                  'FontName'  , 'MS Sans Serif', ...
                  'string'    , 'Skeleton',...
                  'horizontalalignment', 'left',...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'position', [0.01+0.013 ...
                               0.925 ...
                               0.2 ...
                               0.05], ...
                  'ButtonDownFcn', @chkMachineSegmentationSkeletonAllCallback...
                  );

        chkMachineSegmentationSkeleton = cell(1, numel(asSkeletonName));
        edtMachineSegmentationSkeleton = cell(1, numel(asSkeletonName));

        for sk=1:numel(asSkeletonName)
    
            chkMachineSegmentationSkeleton{sk} = ...
                uicontrol(uiMachineSegmentation,...
                          'style'   , 'checkbox',...
                          'Units'   , 'normalized',...
                          'enable'  , 'on',...
                          'value'   , 0,...
                          'BackgroundColor', viewerBackgroundColor('get'), ...
                          'ForegroundColor', viewerForegroundColor('get'), ...
                          'position', [0.01+0.013 ...
                                       0.95-(sk*0.032)...
                                       0.02 ...
                                       0.02], ...
                          'UserData', sk, ...
                          'Callback', @chkMachineSegmentationSkeletonCallback...
                          );
    
                uicontrol(uiMachineSegmentation,...
                      'style'     , 'text',...
                      'Units'     , 'normalized',...
                      'enable'    , 'inactive',...
                      'FontSize'  , 10,...
                      'FontName'  , 'MS Sans Serif', ...
                      'string'    , asSkeletonName{sk},...
                      'horizontalalignment', 'left',...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                          'position', [0.01+0.013+0.013 ...
                                       0.943-(sk*0.032)...
                                       0.1 ...
                                       0.03], ...
                      'UserData', sk, ...
                      'ButtonDownFcn', @chkMachineSegmentationSkeletonCallback...
                      );
    
            sEdtString = extractBetween(asSkeletonName{sk},'[',']');
    
            if ~isempty(sEdtString)
    
                if get(chkMachineSegmentationSkeleton{sk}, 'Value') == true
                    sEdtSkeletonEnable = 'on';
                else
                    sEdtSkeletonEnable = 'off';
                end
    
                edtMachineSegmentationSkeleton{sk} = ...
                   uicontrol(uiMachineSegmentation,...
                             'style'     , 'edit',...
                             'Units'     , 'normalized',...
                             'enable'    , sEdtSkeletonEnable,...
                             'Background', 'white',...
                             'string'    , sEdtString,...
                             'BackgroundColor', viewerBackgroundColor('get'), ...
                             'ForegroundColor', viewerForegroundColor('get'), ...
                             'position', [0.01+0.013+0.115 ...
                                          0.945-(sk*0.032)...
                                          0.04 ...
                                          0.03], ...
                             'UserData', sk, ...
                             'Callback', @edtMachineSegmentationSkeletonCallback...
                             );
            end
        end
    else
        chkMachineSegmentationSkeletonAll = ...
            uicontrol(uiMachineSegmentation,...
                      'style'   , 'checkbox',...
                      'Units'   , 'normalized',...
                      'enable'  , 'on',...
                      'value'   , 0,...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.01 ...
                                   0.95 ...
                                   0.02 ...
                                   0.02], ...
                      'Callback', @chkMachineSegmentationSkeletonAllCallback...
                      );
      
         uicontrol(uiMachineSegmentation,...
                  'style'     , 'text',...
                  'Units'     , 'normalized',...
                  'enable'    , 'Inactive',...
                  'FontWeight', 'bold',...
                  'FontSize'  , 12,...
                  'FontName'  , 'MS Sans Serif', ...
                  'string'    , 'Skeleton + Muscles',...
                  'horizontalalignment', 'left',...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'position', [0.01+0.013 ...
                               0.925 ...
                               0.3+0.02 ...
                               0.05], ...
                  'ButtonDownFcn', @chkMachineSegmentationSkeletonAllCallback...
                  );

        chkMachineSegmentationSkeleton = cell(1, numel(asSkeletonName));
        edtMachineSegmentationSkeleton = cell(1, numel(asSkeletonName));

        for sk=1:numel(asSkeletonName)
    
            chkMachineSegmentationSkeleton{sk} = ...
                uicontrol(uiMachineSegmentation,...
                          'style'   , 'checkbox',...
                          'Units'   , 'normalized',...
                          'enable'  , 'on',...
                          'value'   , 0,...
                          'BackgroundColor', viewerBackgroundColor('get'), ...
                          'ForegroundColor', viewerForegroundColor('get'), ...
                          'position', [0.01+0.013 ...
                                       0.95-(sk*0.03)...
                                       0.02 ...
                                       0.02], ...
                          'UserData', sk, ...
                          'Callback', @chkMachineSegmentationSkeletonCallback...
                          );
    
                uicontrol(uiMachineSegmentation,...
                      'style'     , 'text',...
                      'Units'     , 'normalized',...
                      'enable'    , 'inactive',...
                      'FontSize'  , 10,...
                      'FontName'  , 'MS Sans Serif', ...
                      'string'    , asSkeletonName{sk},...
                      'horizontalalignment', 'left',...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                          'position', [0.01+0.013+0.013 ...
                                       0.943-(sk*0.03)...
                                       0.2+0.02 ...
                                       0.03], ...
                      'UserData', sk, ...
                      'ButtonDownFcn', @chkMachineSegmentationSkeletonCallback...
                      );
        end

    end

    % Cardiovascular System

    if CLASSES_CT == true

        chkMachineSegmentationCardiovascularAll = ...
            uicontrol(uiMachineSegmentation,...
                      'style'   , 'checkbox',...
                      'Units'   , 'normalized',...
                      'enable'  , 'on',...
                      'value'   , 0,...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.21 ...
                                   0.95 ...
                                   0.02 ...
                                   0.02], ...
                      'Callback', @chkMachineSegmentationCardiovascularAllCallback...
                      );

         uicontrol(uiMachineSegmentation,...
                  'style'     , 'text',...
                  'Units'     , 'normalized',...
                  'enable'    , 'Inactive',...
                  'FontWeight', 'bold',...
                  'FontSize'  , 12,...
                  'FontName'  , 'MS Sans Serif', ...
                  'string'    , 'Cardiovascular',...
                  'horizontalalignment', 'left',...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'position', [0.21+0.013 ...
                               0.925 ...
                               0.2 ...
                               0.05], ...
                  'ButtonDownFcn', @chkMachineSegmentationCardiovascularAllCallback...
                  );
    
        chkMachineSegmentationCardiovascular = cell(1, numel(asCardiovascularName));
    
        for cd=1:numel(asCardiovascularName)
    
            chkMachineSegmentationCardiovascular{cd} = ...
                uicontrol(uiMachineSegmentation,...
                          'style'   , 'checkbox',...
                          'Units'   , 'normalized',...
                          'enable'  , 'on',...
                          'value'   , 0,...
                          'BackgroundColor', viewerBackgroundColor('get'), ...
                          'ForegroundColor', viewerForegroundColor('get'), ...
                          'position', [0.21+0.013 ...
                                       0.95-(cd*0.032)...
                                       0.02 ...
                                       0.02], ...
                          'UserData', cd, ...
                          'Callback', @chkMachineSegmentationCardiovascularCallback...
                          );
    
                uicontrol(uiMachineSegmentation,...
                      'style'     , 'text',...
                      'Units'     , 'normalized',...
                      'enable'    , 'inactive',...
                      'FontSize'  , 10,...
                      'FontName'  , 'MS Sans Serif', ...
                      'string'    , asCardiovascularName{cd},...
                      'horizontalalignment', 'left',...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.21+0.013+0.013 ...
                                   0.943-(cd*0.032)...
                                   0.15 ...
                                   0.03], ...
                      'UserData', cd, ...
                      'ButtonDownFcn', @chkMachineSegmentationCardiovascularCallback...
                      );
        end
    else
        chkMachineSegmentationCardiovascularAll = ...
            uicontrol(uiMachineSegmentation,...
                      'style'   , 'checkbox',...
                      'Units'   , 'normalized',...
                      'enable'  , 'on',...
                      'value'   , 0,...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.21+0.02 ...
                                   0.95 ...
                                   0.02 ...
                                   0.02], ...
                      'Callback', @chkMachineSegmentationCardiovascularAllCallback...
                      );
    
         uicontrol(uiMachineSegmentation,...
                  'style'     , 'text',...
                  'Units'     , 'normalized',...
                  'enable'    , 'Inactive',...
                  'FontWeight', 'bold',...
                  'FontSize'  , 12,...
                  'FontName'  , 'MS Sans Serif', ...
                  'string'    , 'Cardiovascular + Gastrointestinal',...
                  'horizontalalignment', 'left',...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'position', [0.21+0.013+0.02 ...
                               0.925 ...
                               0.2+0.02 ...
                               0.05], ...
                  'ButtonDownFcn', @chkMachineSegmentationCardiovascularAllCallback...
                  );
    
        chkMachineSegmentationCardiovascular = cell(1, numel(asCardiovascularName));
    
        for cd=1:numel(asCardiovascularName)
    
            chkMachineSegmentationCardiovascular{cd} = ...
                uicontrol(uiMachineSegmentation,...
                          'style'   , 'checkbox',...
                          'Units'   , 'normalized',...
                          'enable'  , 'on',...
                          'value'   , 0,...
                          'BackgroundColor', viewerBackgroundColor('get'), ...
                          'ForegroundColor', viewerForegroundColor('get'), ...
                          'position', [0.21+0.013+0.02 ...
                                       0.95-(cd*0.03)...
                                       0.02 ...
                                       0.02], ...
                          'UserData', cd, ...
                          'Callback', @chkMachineSegmentationCardiovascularCallback...
                          );
    
                uicontrol(uiMachineSegmentation,...
                      'style'     , 'text',...
                      'Units'     , 'normalized',...
                      'enable'    , 'inactive',...
                      'FontSize'  , 10,...
                      'FontName'  , 'MS Sans Serif', ...
                      'string'    , asCardiovascularName{cd},...
                      'horizontalalignment', 'left',...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.21+0.013+0.013+0.02 ...
                                   0.943-(cd*0.03)...
                                   0.15+0.02 ...
                                   0.03], ...
                      'UserData', cd, ...
                      'ButtonDownFcn', @chkMachineSegmentationCardiovascularCallback...
                      );
        end
    end

    % Other Organs

    if CLASSES_CT == true
    
        chkMachineSegmentationOtherOrgansAll = ...
            uicontrol(uiMachineSegmentation,...
                      'style'   , 'checkbox',...
                      'Units'   , 'normalized',...
                      'enable'  , 'on',...
                      'value'   , 0,...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.405 ...
                                   0.95 ...
                                   0.02 ...
                                   0.02], ...
                      'Callback', @chkMachineSegmentationOtherOrgansAllCallback...
                      );
    
         uicontrol(uiMachineSegmentation,...
                  'style'     , 'text',...
                  'Units'     , 'normalized',...
                  'enable'    , 'Inactive',...
                  'FontWeight', 'bold',...
                  'FontSize'  , 12,...
                  'FontName'  , 'MS Sans Serif', ...
                  'string'    , 'Other Organs',...
                  'horizontalalignment', 'left',...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'position', [0.405+0.013 ...
                               0.925 ...
                               0.2 ...
                               0.05], ...
                  'ButtonDownFcn', @chkMachineSegmentationOtherOrgansAllCallback...
                  );

        chkMachineSegmentationOtherOrgans = cell(1, numel(asOtherOrgansName));
    
        for oo=1:numel(asOtherOrgansName)
    
            chkMachineSegmentationOtherOrgans{oo} = ...
                uicontrol(uiMachineSegmentation,...
                          'style'   , 'checkbox',...
                          'Units'   , 'normalized',...
                          'enable'  , 'on',...
                          'value'   , 0,...
                          'BackgroundColor', viewerBackgroundColor('get'), ...
                          'ForegroundColor', viewerForegroundColor('get'), ...
                          'position', [0.405+0.013 ...
                                       0.95-(oo*0.032)...
                                       0.02 ...
                                       0.02], ...
                          'UserData', oo, ...
                          'Callback', @chkMachineSegmentationOtherOrgansCallback...
                          );
    
                uicontrol(uiMachineSegmentation,...
                      'style'     , 'text',...
                      'Units'     , 'normalized',...
                      'enable'    , 'inactive',...
                      'FontSize'  , 10,...
                      'FontName'  , 'MS Sans Serif', ...
                      'string'    , asOtherOrgansName{oo},...
                      'horizontalalignment', 'left',...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.405+0.013+0.013 ...
                                   0.943-(oo*0.032)...
                                   0.15 ...
                                   0.03], ...
                      'UserData', oo, ...
                      'ButtonDownFcn', @chkMachineSegmentationOtherOrgansCallback...
                      );
        end
    else
    
        chkMachineSegmentationOtherOrgansAll = ...
            uicontrol(uiMachineSegmentation,...
                      'style'   , 'checkbox',...
                      'Units'   , 'normalized',...
                      'enable'  , 'on',...
                      'value'   , 0,...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.405+(2*0.025) ...
                                   0.95 ...
                                   0.02 ...
                                   0.02], ...
                      'Callback', @chkMachineSegmentationOtherOrgansAllCallback...
                      );

         uicontrol(uiMachineSegmentation,...
                  'style'     , 'text',...
                  'Units'     , 'normalized',...
                  'enable'    , 'Inactive',...
                  'FontWeight', 'bold',...
                  'FontSize'  , 12,...
                  'FontName'  , 'MS Sans Serif', ...
                  'string'    , 'Other Organs',...
                  'horizontalalignment', 'left',...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'position', [0.405+0.013+(2*0.025) ...
                               0.925 ...
                               0.2 ...
                               0.05], ...
                  'ButtonDownFcn', @chkMachineSegmentationOtherOrgansAllCallback...
                  );

        chkMachineSegmentationOtherOrgans = cell(1, numel(asOtherOrgansName));
    
        for oo=1:numel(asOtherOrgansName)
    
            chkMachineSegmentationOtherOrgans{oo} = ...
                uicontrol(uiMachineSegmentation,...
                          'style'   , 'checkbox',...
                          'Units'   , 'normalized',...
                          'enable'  , 'on',...
                          'value'   , 0,...
                          'BackgroundColor', viewerBackgroundColor('get'), ...
                          'ForegroundColor', viewerForegroundColor('get'), ...
                          'position', [0.405+0.013+(2*0.025) ...
                                       0.95-(oo*0.03)...
                                       0.02+0.025 ...
                                       0.02], ...
                          'UserData', oo, ...
                          'Callback', @chkMachineSegmentationOtherOrgansCallback...
                          );
    
                uicontrol(uiMachineSegmentation,...
                      'style'     , 'text',...
                      'Units'     , 'normalized',...
                      'enable'    , 'inactive',...
                      'FontSize'  , 10,...
                      'FontName'  , 'MS Sans Serif', ...
                      'string'    , asOtherOrgansName{oo},...
                      'horizontalalignment', 'left',...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.405+0.013+0.013+(2*0.025) ...
                                   0.943-(oo*0.03)...
                                   0.15+0.025 ...
                                   0.03], ...
                      'UserData', oo, ...
                      'ButtonDownFcn', @chkMachineSegmentationOtherOrgansCallback...
                      );
        end
    end

    % Gastrointestinal Tract

    if CLASSES_CT == true

        chkMachineSegmentationGastrointestinalTractAll = ...
            uicontrol(uiMachineSegmentation,...
                      'style'   , 'checkbox',...
                      'Units'   , 'normalized',...
                      'enable'  , 'on',...
                      'value'   , 0,...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.6 ...
                                   0.95 ...
                                   0.02 ...
                                   0.02], ...
                      'Callback', @chkMachineSegmentationGastrointestinalTractAllCallback...
                      );
    
         uicontrol(uiMachineSegmentation,...
                  'style'     , 'text',...
                  'Units'     , 'normalized',...
                  'enable'    , 'Inactive',...
                  'FontWeight', 'bold',...
                  'FontSize'  , 12,...
                  'FontName'  , 'MS Sans Serif', ...
                  'string'    , 'Gastrointestinal Tract',...
                  'horizontalalignment', 'left',...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'position', [0.6+0.013 ...
                               0.925 ...
                               0.2 ...
                               0.05], ...
                  'ButtonDownFcn', @chkMachineSegmentationGastrointestinalTractAllCallback...
                  );
    
        chkMachineSegmentationGastrointestinalTract = cell(1, numel(asGastrointestinalTractName));
    
        for gt=1:numel(asGastrointestinalTractName)
    
            chkMachineSegmentationGastrointestinalTract{gt} = ...
                uicontrol(uiMachineSegmentation,...
                          'style'   , 'checkbox',...
                          'Units'   , 'normalized',...
                          'enable'  , 'on',...
                          'value'   , 0,...
                          'BackgroundColor', viewerBackgroundColor('get'), ...
                          'ForegroundColor', viewerForegroundColor('get'), ...
                          'position', [0.6+0.013 ...
                                       0.95-(gt*0.032)...
                                       0.02 ...
                                       0.02], ...
                          'UserData', gt, ...
                          'Callback', @chkMachineSegmentationGastrointestinalTractCallback...
                          );
    
                uicontrol(uiMachineSegmentation,...
                      'style'     , 'text',...
                      'Units'     , 'normalized',...
                      'enable'    , 'inactive',...
                      'FontSize'  , 10,...
                      'FontName'  , 'MS Sans Serif', ...
                      'string'    , asGastrointestinalTractName{gt},...
                      'horizontalalignment', 'left',...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.6+0.013+0.013 ...
                                   0.943-(gt*0.032)...
                                   0.15 ...
                                   0.03], ...
                      'UserData', gt, ...
                      'ButtonDownFcn', @chkMachineSegmentationGastrointestinalTractCallback...
                      );
        end
    end

    % Muscles

    if CLASSES_CT == true

        chkMachineSegmentationMusclesAll = ...
            uicontrol(uiMachineSegmentation,...
                      'style'   , 'checkbox',...
                      'Units'   , 'normalized',...
                      'enable'  , 'on',...
                      'value'   , 0,...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.6 ...
                                   0.75-0.04 ...
                                   0.02 ...
                                   0.02], ...
                      'Callback', @chkMachineSegmentationMusclesAllCallback...
                      );
    
         uicontrol(uiMachineSegmentation,...
                  'style'     , 'text',...
                  'Units'     , 'normalized',...
                  'enable'    , 'Inactive',...
                  'FontWeight', 'bold',...
                  'FontSize'  , 12,...
                  'FontName'  , 'MS Sans Serif', ...
                  'string'    , 'Muscles',...
                  'horizontalalignment', 'left',...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'position', [0.6+0.013 ...
                               0.725-0.04 ...
                               0.2 ...
                               0.05], ...
                  'ButtonDownFcn', @chkMachineSegmentationMusclesAllCallback...
                  );
    
         chkMachineSegmentationMuscles = cell(1,numel(asMusclesName));
    
         for mu=1:numel(asMusclesName)
    
            chkMachineSegmentationMuscles{mu} = ...
                uicontrol(uiMachineSegmentation,...
                          'style'   , 'checkbox',...
                          'Units'   , 'normalized',...
                          'enable'  , 'on',...
                          'value'   , 0,...
                          'BackgroundColor', viewerBackgroundColor('get'), ...
                          'ForegroundColor', viewerForegroundColor('get'), ...
                          'position', [0.6+0.013 ...
                                       0.75-0.04-(mu*0.032)...
                                       0.02 ...
                                       0.02], ...
                          'UserData', mu, ...
                          'Callback', @chkMachineSegmentationMusclesCallback...
                          );
    
                uicontrol(uiMachineSegmentation,...
                      'style'     , 'text',...
                      'Units'     , 'normalized',...
                      'enable'    , 'inactive',...
                      'FontSize'  , 10,...
                      'FontName'  , 'MS Sans Serif', ...
                      'string'    , asMusclesName{mu},...
                      'horizontalalignment', 'left',...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.6+0.013+0.013 ...
                                   0.743-0.04-(mu*0.032)...
                                   0.15 ...
                                   0.03], ...
                      'UserData', mu, ...
                      'ButtonDownFcn', @chkMachineSegmentationMusclesCallback...
                      );
        end
    end

    % Anonymization

    if CLASSES_CT == true

        chkMachineSegmentationAnonymizationAll = ...
            uicontrol(uiMachineSegmentationNext,...
                      'style'   , 'checkbox',...
                      'Units'   , 'normalized',...
                      'enable'  , 'on',...
                      'value'   , 0,...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.6 ...
                                   0.95-0.67 ...
                                   0.02 ...
                                   0.02], ...
                      'Callback', @chkMachineSegmentationAnonymizationAllCallback...
                      );
    
         uicontrol(uiMachineSegmentationNext,...
                  'style'     , 'text',...
                  'Units'     , 'normalized',...
                  'enable'    , 'Inactive',...
                  'FontWeight', 'bold',...
                  'FontSize'  , 12,...
                  'FontName'  , 'MS Sans Serif', ...
                  'string'    , 'Anonymization',...
                  'horizontalalignment', 'left',...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'position', [0.6+0.013 ...
                               0.925-0.67 ...
                               0.2 ...
                               0.05], ...
                  'ButtonDownFcn', @chkMachineSegmentationAnonymizationAllCallback...
                  );
    
         chkMachineSegmentationAnonymization = cell(1,numel(asAnonymizationName));
    
         for an=1:numel(asAnonymizationName)
    
            chkMachineSegmentationAnonymization{an} = ...
                uicontrol(uiMachineSegmentationNext,...
                          'style'   , 'checkbox',...
                          'Units'   , 'normalized',...
                          'enable'  , 'on',...
                          'value'   , 0,...
                          'BackgroundColor', viewerBackgroundColor('get'), ...
                          'ForegroundColor', viewerForegroundColor('get'), ...
                          'position', [0.6+0.013 ...
                                       0.95-(an*0.032)-0.67...
                                       0.02 ...
                                       0.02], ...
                          'UserData', an, ...
                          'Callback', @chkMachineSegmentationAnonymizationCallback...
                          );
    
                uicontrol(uiMachineSegmentationNext,...
                      'style'     , 'text',...
                      'Units'     , 'normalized',...
                      'enable'    , 'inactive',...
                      'FontSize'  , 10,...
                      'FontName'  , 'MS Sans Serif', ...
                      'string'    , asAnonymizationName{an},...
                      'horizontalalignment', 'left',...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.6+0.013+0.013 ...
                                   0.943-(an*0.032)-0.67...
                                   0.15 ...
                                   0.03], ...
                      'UserData', an, ...
                      'ButtonDownFcn', @chkMachineSegmentationAnonymizationCallback...
                      );
        end
    end

    % Tissue Types

    if CLASSES_CT == true

        chkMachineSegmentationTissueTypesAll = ...
            uicontrol(uiMachineSegmentationNext,...
                      'style'   , 'checkbox',...
                      'Units'   , 'normalized',...
                      'enable'  , 'on',...
                      'value'   , 0,...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.795 ...
                                   0.95 ...
                                   0.02 ...
                                   0.02], ...
                      'Callback', @chkMachineSegmentationTissueTypesAllCallback...
                      );
    
         uicontrol(uiMachineSegmentationNext,...
                  'style'     , 'text',...
                  'Units'     , 'normalized',...
                  'enable'    , 'Inactive',...
                  'FontWeight', 'bold',...
                  'FontSize'  , 12,...
                  'FontName'  , 'MS Sans Serif', ...
                  'string'    , 'Tissue Type Mask',...
                  'horizontalalignment', 'left',...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'position', [0.795+0.013 ...
                               0.925 ...
                               0.2 ...
                               0.05], ...
                  'ButtonDownFcn', @chkMachineSegmentationTissueTypesAllCallback...
                  );
    
         chkMachineSegmentationTissueTypes = cell(1,numel(asTissueTypesName));
    
         for tt=1:numel(asTissueTypesName)
    
            chkMachineSegmentationTissueTypes{tt} = ...
                uicontrol(uiMachineSegmentationNext,...
                          'style'   , 'checkbox',...
                          'Units'   , 'normalized',...
                          'enable'  , 'on',...
                          'value'   , 0,...
                          'BackgroundColor', viewerBackgroundColor('get'), ...
                          'ForegroundColor', viewerForegroundColor('get'), ...
                          'position', [0.795+0.013 ...
                                       0.95-(tt*0.032)...
                                       0.02 ...
                                       0.02], ...
                          'UserData', tt, ...
                          'Callback', @chkMachineSegmentationTissueTypesCallback...
                          );
    
                uicontrol(uiMachineSegmentationNext,...
                      'style'     , 'text',...
                      'Units'     , 'normalized',...
                      'enable'    , 'inactive',...
                      'FontSize'  , 10,...
                      'FontName'  , 'MS Sans Serif', ...
                      'string'    , asTissueTypesName{tt},...
                      'horizontalalignment', 'left',...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.795+0.013+0.013 ...
                                   0.943-(tt*0.032)...
                                   0.15 ...
                                   0.03], ...
                      'UserData', tt, ...
                      'ButtonDownFcn', @chkMachineSegmentationTissueTypesCallback...
                      );
        end
    else
        chkMachineSegmentationTissueTypesAll = ...
            uicontrol(uiMachineSegmentation,...
                      'style'   , 'checkbox',...
                      'Units'   , 'normalized',...
                      'enable'  , 'on',...
                      'value'   , 0,...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.6 ...
                                   0.95 ...
                                   0.02 ...
                                   0.02], ...
                      'Callback', @chkMachineSegmentationTissueTypesAllCallback...
                      );
    
         uicontrol(uiMachineSegmentation,...
                  'style'     , 'text',...
                  'Units'     , 'normalized',...
                  'enable'    , 'Inactive',...
                  'FontWeight', 'bold',...
                  'FontSize'  , 12,...
                  'FontName'  , 'MS Sans Serif', ...
                  'string'    , 'Tissue Type Mask',...
                  'horizontalalignment', 'left',...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'position', [0.6+0.013 ...
                               0.925 ...
                               0.2 ...
                               0.05], ...
                  'ButtonDownFcn', @chkMachineSegmentationTissueTypesAllCallback...
                  );

        chkMachineSegmentationTissueTypes = cell(1, numel(asTissueTypesName));
    
        for tt=1:numel(asTissueTypesName)
    
            chkMachineSegmentationTissueTypes{tt} = ...
                uicontrol(uiMachineSegmentation,...
                          'style'   , 'checkbox',...
                          'Units'   , 'normalized',...
                          'enable'  , 'on',...
                          'value'   , 0,...
                          'BackgroundColor', viewerBackgroundColor('get'), ...
                          'ForegroundColor', viewerForegroundColor('get'), ...
                          'position', [0.6+0.013 ...
                                       0.95-(tt*0.030)...
                                       0.02 ...
                                       0.02], ...
                          'UserData', tt, ...
                          'Callback', @chkMachineSegmentationTissueTypesCallback...
                          );
    
                uicontrol(uiMachineSegmentation,...
                      'style'     , 'text',...
                      'Units'     , 'normalized',...
                      'enable'    , 'inactive',...
                      'FontSize'  , 10,...
                      'FontName'  , 'MS Sans Serif', ...
                      'string'    , asTissueTypesName{tt},...
                      'horizontalalignment', 'left',...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.6+0.013+0.013 ...
                                   0.943-(tt*0.030)...
                                   0.15 ...
                                   0.03], ...
                      'UserData', tt, ...
                      'ButtonDownFcn', @chkMachineSegmentationTissueTypesCallback...
                      );
        end

    end

    % Head Glands Cavities Structures

    if CLASSES_CT == true

        chkMachineSegmentationHeadGlandsCavitiesAll = ...
            uicontrol(uiMachineSegmentation,...
                      'style'   , 'checkbox',...
                      'Units'   , 'normalized',...
                      'enable'  , 'on',...
                      'value'   , 0,...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.795 ...
                                   0.95 ...
                                   0.02 ...
                                   0.02], ...
                      'Callback', @chkMachineSegmentationHeadGlandsCavitiesAllCallback...
                      );
  
         uicontrol(uiMachineSegmentation,...
                  'style'     , 'text',...
                  'Units'     , 'normalized',...
                  'enable'    , 'Inactive',...
                  'FontWeight', 'bold',...
                  'FontSize'  , 12,...
                  'FontName'  , 'MS Sans Serif', ...
                  'string'    , 'Head Glands Cavities',...
                  'horizontalalignment', 'left',...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'position', [0.795+0.013 ...
                               0.925 ...
                               0.2 ...
                               0.05], ...
                  'ButtonDownFcn', @chkMachineSegmentationHeadGlandsCavitiesAllCallback...
                  );
    
         chkMachineSegmentationHeadGlandsCavities = cell(1,numel(asHeadGlandsCavitiesName));
    
         for hg=1:numel(asHeadGlandsCavitiesName)
    
            chkMachineSegmentationHeadGlandsCavities{hg} = ...
                uicontrol(uiMachineSegmentation,...
                          'style'   , 'checkbox',...
                          'Units'   , 'normalized',...
                          'enable'  , 'on',...
                          'value'   , 0,...
                          'BackgroundColor', viewerBackgroundColor('get'), ...
                          'ForegroundColor', viewerForegroundColor('get'), ...
                          'position', [0.795+0.013 ...
                                       0.95-(hg*0.032)...
                                       0.02 ...
                                       0.02], ...
                          'UserData', hg, ...
                          'Callback', @chkMachineSegmentationHeadGlandsCavitiesCallback...
                          );
    
                uicontrol(uiMachineSegmentation,...
                      'style'     , 'text',...
                      'Units'     , 'normalized',...
                      'enable'    , 'inactive',...
                      'FontSize'  , 10,...
                      'FontName'  , 'MS Sans Serif', ...
                      'string'    , asHeadGlandsCavitiesName{hg},...
                      'horizontalalignment', 'left',...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.795+0.013+0.013 ...
                                   0.943-(hg*0.032)...
                                   0.15 ...
                                   0.03], ...
                      'UserData', hg, ...
                      'ButtonDownFcn', @chkMachineSegmentationHeadGlandsCavitiesCallback...
                      );
        end
    end

    % Head Muscles

    if CLASSES_CT == true

        chkMachineSegmentationHeadMusclesAll = ...
            uicontrol(uiMachineSegmentationNext,...
                      'style'   , 'checkbox',...
                      'Units'   , 'normalized',...
                      'enable'  , 'on',...
                      'value'   , 0,...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.01 ...
                                   0.95 ...
                                   0.02 ...
                                   0.02], ...
                      'Callback', @chkMachineSegmentationHeadMusclesAllCallback...
                      );
    
         uicontrol(uiMachineSegmentationNext,...
                  'style'     , 'text',...
                  'Units'     , 'normalized',...
                  'enable'    , 'Inactive',...
                  'FontWeight', 'bold',...
                  'FontSize'  , 12,...
                  'FontName'  , 'MS Sans Serif', ...
                  'string'    , 'Head Muscles',...
                  'horizontalalignment', 'left',...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'position', [0.01+0.013 ...
                               0.925 ...
                               0.15 ...
                               0.05], ...
                  'ButtonDownFcn', @chkMachineSegmentationHeadMusclesAllCallback...
                  );
    
         chkMachineSegmentationHeadMuscles = cell(1,numel(asHeadMusclesName));
    
         for br=1:numel(asHeadMusclesName)
    
            chkMachineSegmentationHeadMuscles{br} = ...
                uicontrol(uiMachineSegmentationNext,...
                          'style'   , 'checkbox',...
                          'Units'   , 'normalized',...
                          'enable'  , 'on',...
                          'value'   , 0,...
                          'BackgroundColor', viewerBackgroundColor('get'), ...
                          'ForegroundColor', viewerForegroundColor('get'), ...
                          'position', [0.01+0.013 ...
                                       0.95-(br*0.032)...
                                       0.02 ...
                                       0.02], ...
                          'UserData', br, ...
                          'Callback', @chkMachineSegmentationHeadMusclesCallback...
                          );
    
                uicontrol(uiMachineSegmentationNext,...
                      'style'     , 'text',...
                      'Units'     , 'normalized',...
                      'enable'    , 'inactive',...
                      'FontSize'  , 10,...
                      'FontName'  , 'MS Sans Serif', ...
                      'string'    , asHeadMusclesName{br},...
                      'horizontalalignment', 'left',...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.01+0.013+0.013 ...
                                   0.943-(br*0.032)...
                                   0.15 ...
                                   0.03], ...
                      'UserData', br, ...
                      'ButtonDownFcn', @chkMachineSegmentationHeadMusclesCallback...
                      );
        end
    end

    % Headneck Bones Vessels

    if CLASSES_CT == true

        chkMachineSegmentationHeadneckBonesVesselsAll = ...
            uicontrol(uiMachineSegmentationNext,...
                      'style'   , 'checkbox',...
                      'Units'   , 'normalized',...
                      'enable'  , 'on',...
                      'value'   , 0,...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.01 ...
                                   0.95-0.4 ...
                                   0.02 ...
                                   0.02], ...
                      'Callback', @chkMachineSegmentationHeadneckBonesVesselsAllCallback...
                      );

         uicontrol(uiMachineSegmentationNext,...
                  'style'     , 'text',...
                  'Units'     , 'normalized',...
                  'enable'    , 'Inactive',...
                  'FontWeight', 'bold',...
                  'FontSize'  , 12,...
                  'FontName'  , 'MS Sans Serif', ...
                  'string'    , 'Headneck Bones Vessels',...
                  'horizontalalignment', 'left',...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'position', [0.01+0.013 ...
                               0.925-0.4 ...
                               0.15 ...
                               0.05], ...
                  'ButtonDownFcn', @chkMachineSegmentationHeadneckBonesVesselsAllCallback...
                  );
    
         chkMachineSegmentationHeadneckBonesVessels = cell(1,numel(asHeadneckBonesVesselsName));
    
         for br=1:numel(asHeadneckBonesVesselsName)
    
            chkMachineSegmentationHeadneckBonesVessels{br} = ...
                uicontrol(uiMachineSegmentationNext,...
                          'style'   , 'checkbox',...
                          'Units'   , 'normalized',...
                          'enable'  , 'on',...
                          'value'   , 0,...
                          'BackgroundColor', viewerBackgroundColor('get'), ...
                          'ForegroundColor', viewerForegroundColor('get'), ...
                          'position', [0.01+0.013 ...
                                       0.95-(br*0.032)-0.4...
                                       0.02 ...
                                       0.02], ...
                          'UserData', br, ...
                          'Callback', @chkMachineSegmentationHeadneckBonesVesselsCallback...
                          );
    
                uicontrol(uiMachineSegmentationNext,...
                      'style'     , 'text',...
                      'Units'     , 'normalized',...
                      'enable'    , 'inactive',...
                      'FontSize'  , 10,...
                      'FontName'  , 'MS Sans Serif', ...
                      'string'    , asHeadneckBonesVesselsName{br},...
                      'horizontalalignment', 'left',...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.01+0.013+0.013 ...
                                   0.943-(br*0.032)-0.4...
                                   0.15 ...
                                   0.03], ...
                      'UserData', br, ...
                      'ButtonDownFcn', @chkMachineSegmentationHeadneckBonesVesselsCallback...
                      );
        end
    end

    % Headneck Muscles

    if CLASSES_CT == true

        chkMachineSegmentationHeadneckMusclesAll = ...
            uicontrol(uiMachineSegmentationNext,...
                      'style'   , 'checkbox',...
                      'Units'   , 'normalized',...
                      'enable'  , 'on',...
                      'value'   , 0,...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.21 ...
                                   0.95 ...
                                   0.02 ...
                                   0.02], ...
                      'Callback', @chkMachineSegmentationHeadneckMusclesAllCallback...
                      );

         uicontrol(uiMachineSegmentationNext,...
                  'style'     , 'text',...
                  'Units'     , 'normalized',...
                  'enable'    , 'Inactive',...
                  'FontWeight', 'bold',...
                  'FontSize'  , 12,...
                  'FontName'  , 'MS Sans Serif', ...
                  'string'    , 'Headneck Muscles',...
                  'horizontalalignment', 'left',...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'position', [0.21+0.013 ...
                               0.925 ...
                               0.15 ...
                               0.05], ...
                  'ButtonDownFcn', @chkMachineSegmentationHeadneckMusclesAllCallback...
                  );
    
         chkMachineSegmentationHeadneckMuscles = cell(1,numel(asHeadneckMusclesName));
    
         for br=1:numel(asHeadneckMusclesName)
    
            chkMachineSegmentationHeadneckMuscles{br} = ...
                uicontrol(uiMachineSegmentationNext,...
                          'style'   , 'checkbox',...
                          'Units'   , 'normalized',...
                          'enable'  , 'on',...
                          'value'   , 0,...
                          'BackgroundColor', viewerBackgroundColor('get'), ...
                          'ForegroundColor', viewerForegroundColor('get'), ...
                          'position', [0.21+0.013 ...
                                       0.95-(br*0.032)...
                                       0.02 ...
                                       0.02], ...
                          'UserData', br, ...
                          'Callback', @chkMachineSegmentationHeadneckMusclesCallback...
                          );
    
                uicontrol(uiMachineSegmentationNext,...
                      'style'     , 'text',...
                      'Units'     , 'normalized',...
                      'enable'    , 'inactive',...
                      'FontSize'  , 10,...
                      'FontName'  , 'MS Sans Serif', ...
                      'string'    , asHeadneckMusclesName{br},...
                      'horizontalalignment', 'left',...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.21+0.013+0.013 ...
                                   0.943-(br*0.032)...
                                   0.15 ...
                                   0.03], ...
                      'UserData', br, ...
                      'ButtonDownFcn', @chkMachineSegmentationHeadneckMusclesCallback...
                      );
        end
    end

    % Liver Vessels

    if CLASSES_CT == true

        chkMachineSegmentationLiverVesselsAll = ...
            uicontrol(uiMachineSegmentationNext,...
                      'style'   , 'checkbox',...
                      'Units'   , 'normalized',...
                      'enable'  , 'on',...
                      'value'   , 0,...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.405 ...
                                   0.95-0.24 ...
                                   0.02 ...
                                   0.02], ...
                      'Callback', @chkMachineSegmentationLiverVesselsAllCallback...
                      );
    
         uicontrol(uiMachineSegmentationNext,...
                  'style'     , 'text',...
                  'Units'     , 'normalized',...
                  'enable'    , 'Inactive',...
                  'FontWeight', 'bold',...
                  'FontSize'  , 12,...
                  'FontName'  , 'MS Sans Serif', ...
                  'string'    , 'Liver Vessels',...
                  'horizontalalignment', 'left',...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'position', [0.405+0.013 ...
                               0.925-0.24 ...
                               0.15 ...
                               0.05], ...
                  'ButtonDownFcn', @chkMachineSegmentationLiverVesselsAllCallback...
                  );
    
         chkMachineSegmentationLiverVessels = cell(1,numel(asLiverVesselsName));
    
         for br=1:numel(asLiverVesselsName)
    
            chkMachineSegmentationLiverVessels{br} = ...
                uicontrol(uiMachineSegmentationNext,...
                          'style'   , 'checkbox',...
                          'Units'   , 'normalized',...
                          'enable'  , 'on',...
                          'value'   , 0,...
                          'BackgroundColor', viewerBackgroundColor('get'), ...
                          'ForegroundColor', viewerForegroundColor('get'), ...
                          'position', [0.405+0.013 ...
                                       0.95-(br*0.032)-0.24...
                                       0.02 ...
                                       0.02], ...
                          'UserData', br, ...
                          'Callback', @chkMachineSegmentationLiverVesselsCallback...
                          );
    
                uicontrol(uiMachineSegmentationNext,...
                      'style'     , 'text',...
                      'Units'     , 'normalized',...
                      'enable'    , 'inactive',...
                      'FontSize'  , 10,...
                      'FontName'  , 'MS Sans Serif', ...
                      'string'    , asLiverVesselsName{br},...
                      'horizontalalignment', 'left',...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.405+0.013+0.013 ...
                                   0.943-(br*0.032)-0.24...
                                   0.15 ...
                                   0.03], ...
                      'UserData', br, ...
                      'ButtonDownFcn', @chkMachineSegmentationLiverVesselsCallback...
                      );
        end
    end

    % Liver Segments
    if CLASSES_CT == true

        chkMachineSegmentationLiverSegmentsAll = ...
            uicontrol(uiMachineSegmentationNext,...
                      'style'   , 'checkbox',...
                      'Units'   , 'normalized',...
                      'enable'  , 'on',...
                      'value'   , 0,...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.405 ...
                                   0.95-0.35 ...
                                   0.02 ...
                                   0.02], ...
                      'Callback', @chkMachineSegmentationLiverSegmentsAllCallback...
                      );
    
         uicontrol(uiMachineSegmentationNext,...
                  'style'     , 'text',...
                  'Units'     , 'normalized',...
                  'enable'    , 'Inactive',...
                  'FontWeight', 'bold',...
                  'FontSize'  , 12,...
                  'FontName'  , 'MS Sans Serif', ...
                  'string'    , 'Liver Segments',...
                  'horizontalalignment', 'left',...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'position', [0.405+0.013 ...
                               0.925-0.35 ...
                               0.15 ...
                               0.05], ...
                  'ButtonDownFcn', @chkMachineSegmentationLiverSegmentsAllCallback...
                  );
    
         chkMachineSegmentationLiverSegments = cell(1,numel(asLiverSegmentsName));
    
         for br=1:numel(asLiverSegmentsName)
    
            chkMachineSegmentationLiverSegments{br} = ...
                uicontrol(uiMachineSegmentationNext,...
                          'style'   , 'checkbox',...
                          'Units'   , 'normalized',...
                          'enable'  , 'on',...
                          'value'   , 0,...
                          'BackgroundColor', viewerBackgroundColor('get'), ...
                          'ForegroundColor', viewerForegroundColor('get'), ...
                          'position', [0.405+0.013 ...
                                       0.95-(br*0.032)-0.35...
                                       0.02 ...
                                       0.02], ...
                          'UserData', br, ...
                          'Callback', @chkMachineSegmentationLiverSegmentsCallback...
                          );
    
                uicontrol(uiMachineSegmentationNext,...
                      'style'     , 'text',...
                      'Units'     , 'normalized',...
                      'enable'    , 'inactive',...
                      'FontSize'  , 10,...
                      'FontName'  , 'MS Sans Serif', ...
                      'string'    , asLiverSegmentsName{br},...
                      'horizontalalignment', 'left',...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.405+0.013+0.013 ...
                                   0.943-(br*0.032)-0.35...
                                   0.15 ...
                                   0.03], ...
                      'UserData', br, ...
                      'ButtonDownFcn', @chkMachineSegmentationLiverSegmentsCallback...
                      );
        end
    else
        chkMachineSegmentationLiverSegmentsAll = ...
            uicontrol(uiMachineSegmentation,...
                      'style'   , 'checkbox',...
                      'Units'   , 'normalized',...
                      'enable'  , 'on',...
                      'value'   , 0,...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.75 ...
                                   0.95 ...
                                   0.02 ...
                                   0.02], ...
                      'Callback', @chkMachineSegmentationLiverSegmentsAllCallback...
                      );
    
         uicontrol(uiMachineSegmentation,...
                  'style'     , 'text',...
                  'Units'     , 'normalized',...
                  'enable'    , 'Inactive',...
                  'FontWeight', 'bold',...
                  'FontSize'  , 12,...
                  'FontName'  , 'MS Sans Serif', ...
                  'string'    , 'Liver Segments',...
                  'horizontalalignment', 'left',...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'position', [0.75+0.013 ...
                               0.925 ...
                               0.2 ...
                               0.05], ...
                  'ButtonDownFcn', @chkMachineSegmentationLiverSegmentsAllCallback...
                  );
    
         chkMachineSegmentationLiverSegments = cell(1,numel(asLiverSegmentsName));
    
         for br=1:numel(asLiverSegmentsName)
    
            chkMachineSegmentationLiverSegments{br} = ...
                uicontrol(uiMachineSegmentation,...
                          'style'   , 'checkbox',...
                          'Units'   , 'normalized',...
                          'enable'  , 'on',...
                          'value'   , 0,...
                          'BackgroundColor', viewerBackgroundColor('get'), ...
                          'ForegroundColor', viewerForegroundColor('get'), ...
                          'position', [0.75+0.013 ...
                                       0.95-(br*0.032)...
                                       0.02 ...
                                       0.02], ...
                          'UserData', br, ...
                          'Callback', @chkMachineSegmentationLiverSegmentsCallback...
                          );
    
                uicontrol(uiMachineSegmentation,...
                      'style'     , 'text',...
                      'Units'     , 'normalized',...
                      'enable'    , 'inactive',...
                      'FontSize'  , 10,...
                      'FontName'  , 'MS Sans Serif', ...
                      'string'    , asLiverSegmentsName{br},...
                      'horizontalalignment', 'left',...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.75+0.013+0.013 ...
                                   0.943-(br*0.032)...
                                   0.15 ...
                                   0.03], ...
                      'UserData', br, ...
                      'ButtonDownFcn', @chkMachineSegmentationLiverSegmentsCallback...
                      );
        end
    end

    % Brain Structures

    if CLASSES_CT == true

        chkMachineSegmentationBrainStructuresAll = ...
            uicontrol(uiMachineSegmentationSecondNext,...
                      'style'   , 'checkbox',...
                      'Units'   , 'normalized',...
                      'enable'  , 'on',...
                      'value'   , 0,...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.01 ...
                                   0.95 ...
                                   0.02 ...
                                   0.02], ...
                      'Callback', @chkMachineSegmentationBrainStructuresAllCallback...
                      );
    
         uicontrol(uiMachineSegmentationSecondNext,...
                  'style'     , 'text',...
                  'Units'     , 'normalized',...
                  'enable'    , 'Inactive',...
                  'FontWeight', 'bold',...
                  'FontSize'  , 12,...
                  'FontName'  , 'MS Sans Serif', ...
                  'string'    , 'Brain Structures',...
                  'horizontalalignment', 'left',...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'position', [0.01+0.013 ...
                               0.925 ...
                               0.15 ...
                               0.05], ...
                  'ButtonDownFcn', @chkMachineSegmentationBrainStructuresAllCallback...
                  );

         chkMachineSegmentationBrainStructures = cell(1,numel(asBrainStructuresName));
    
         for br=1:numel(asBrainStructuresName)
    
            chkMachineSegmentationBrainStructures{br} = ...
                uicontrol(uiMachineSegmentationSecondNext,...
                          'style'   , 'checkbox',...
                          'Units'   , 'normalized',...
                          'enable'  , 'on',...
                          'value'   , 0,...
                          'BackgroundColor', viewerBackgroundColor('get'), ...
                          'ForegroundColor', viewerForegroundColor('get'), ...
                          'position', [0.01+0.013 ...
                                       0.95-(br*0.032)...
                                       0.02 ...
                                       0.02], ...
                          'UserData', br, ...
                          'Callback', @chkMachineSegmentationBrainStructuresCallback...
                          );
    
                uicontrol(uiMachineSegmentationSecondNext,...
                      'style'     , 'text',...
                      'Units'     , 'normalized',...
                      'enable'    , 'inactive',...
                      'FontSize'  , 10,...
                      'FontName'  , 'MS Sans Serif', ...
                      'string'    , asBrainStructuresName{br},...
                      'horizontalalignment', 'left',...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.01+0.013+0.013 ...
                                   0.943-(br*0.032)...
                                   0.15 ...
                                   0.03], ...
                      'UserData', br, ...
                      'ButtonDownFcn', @chkMachineSegmentationBrainStructuresCallback...
                      );
        end
    end

    % Body Mask

    if CLASSES_CT == true

        chkMachineSegmentationBodyAll = ...
            uicontrol(uiMachineSegmentationNext,...
                      'style'   , 'checkbox',...
                      'Units'   , 'normalized',...
                      'enable'  , 'on',...
                      'value'   , 0,...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.795 ...
                                   0.95-0.14 ...
                                   0.02 ...
                                   0.02], ...
                      'Callback', @chkMachineSegmentationBodyAllCallback...
                      );
    
         uicontrol(uiMachineSegmentationNext,...
                  'style'     , 'text',...
                  'Units'     , 'normalized',...
                  'enable'    , 'Inactive',...
                  'FontWeight', 'bold',...
                  'FontSize'  , 12,...
                  'FontName'  , 'MS Sans Serif', ...
                  'string'    , 'Body Mask',...
                  'horizontalalignment', 'left',...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'position', [0.795+0.013 ...
                               0.925-0.14 ...
                               0.2 ...
                               0.05], ...
                  'ButtonDownFcn', @chkMachineSegmentationBodyAllCallback...
                  );
    
         chkMachineSegmentationBody = cell(1,numel(asBodyName));
    
         for bd=1:numel(asBodyName)
    
            chkMachineSegmentationBody{bd} = ...
                uicontrol(uiMachineSegmentationNext,...
                          'style'   , 'checkbox',...
                          'Units'   , 'normalized',...
                          'enable'  , 'on',...
                          'value'   , 0,...
                          'BackgroundColor', viewerBackgroundColor('get'), ...
                          'ForegroundColor', viewerForegroundColor('get'), ...
                          'position', [0.795+0.013 ...
                                       0.95-(bd*0.032)-0.14...
                                       0.02 ...
                                       0.02], ...
                          'UserData', bd, ...
                          'Callback', @chkMachineSegmentationBodyCallback...
                          );
    
                uicontrol(uiMachineSegmentationNext,...
                      'style'     , 'text',...
                      'Units'     , 'normalized',...
                      'enable'    , 'inactive',...
                      'FontSize'  , 10,...
                      'FontName'  , 'MS Sans Serif', ...
                      'string'    , asBodyName{bd},...
                      'horizontalalignment', 'left',...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.795+0.013+0.013 ...
                                   0.943-(bd*0.032)-0.14...
                                   0.15 ...
                                   0.03], ...
                      'UserData', bd, ...
                      'ButtonDownFcn', @chkMachineSegmentationBodyCallback...
                      );
        end
    end

    % Lung Vessels Mask

    if CLASSES_CT == true

        chkMachineSegmentationLungVesselsAll = ...
            uicontrol(uiMachineSegmentationNext,...
                      'style'   , 'checkbox',...
                      'Units'   , 'normalized',...
                      'enable'  , 'on',...
                      'value'   , 0,...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.795 ...
                                   0.95-0.31 ...
                                   0.02 ...
                                   0.02], ...
                      'Callback', @chkMachineSegmentationLungVesselsAllCallback...
                      );
    
         uicontrol(uiMachineSegmentationNext,...
                  'style'     , 'text',...
                  'Units'     , 'normalized',...
                  'enable'    , 'Inactive',...
                  'FontWeight', 'bold',...
                  'FontSize'  , 12,...
                  'FontName'  , 'MS Sans Serif', ...
                  'string'    , 'Lung Vessels Mask',...
                  'horizontalalignment', 'left',...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'position', [0.795+0.013 ...
                               0.925-0.31 ...
                               0.2 ...
                               0.05], ...
                  'ButtonDownFcn', @chkMachineSegmentationLungVesselsAllCallback...
                  );
    
         chkMachineSegmentationLungVessels = cell(1,numel(asLungVesselsName));
    
         for bd=1:numel(asLungVesselsName)
    
            chkMachineSegmentationLungVessels{bd} = ...
                uicontrol(uiMachineSegmentationNext,...
                          'style'   , 'checkbox',...
                          'Units'   , 'normalized',...
                          'enable'  , 'on',...
                          'value'   , 0,...
                          'BackgroundColor', viewerBackgroundColor('get'), ...
                          'ForegroundColor', viewerForegroundColor('get'), ...
                          'position', [0.795+0.013 ...
                                       0.95-(bd*0.032)-0.31...
                                       0.02 ...
                                       0.02], ...
                          'UserData', bd, ...
                          'Callback', @chkMachineSegmentationLungVesselsCallback...
                          );
    
                uicontrol(uiMachineSegmentationNext,...
                      'style'     , 'text',...
                      'Units'     , 'normalized',...
                      'enable'    , 'inactive',...
                      'FontSize'  , 10,...
                      'FontName'  , 'MS Sans Serif', ...
                      'string'    , asLungVesselsName{bd},...
                      'horizontalalignment', 'left',...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.795+0.013+0.013 ...
                                   0.943-(bd*0.032)-0.31...
                                   0.15 ...
                                   0.03], ...
                      'UserData', bd, ...
                      'ButtonDownFcn', @chkMachineSegmentationLungVesselsCallback...
                      );
        end
    end

    % Cerebral Bleed 

    if CLASSES_CT == true

        chkMachineSegmentationCerebralBleedAll = ...
            uicontrol(uiMachineSegmentationNext,...
                      'style'   , 'checkbox',...
                      'Units'   , 'normalized',...
                      'enable'  , 'on',...
                      'value'   , 0,...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.405 ...
                                   0.95 ...
                                   0.02 ...
                                   0.02], ...
                      'Callback', @chkMachineSegmentationCerebralBleedAllCallback...
                      );
    

         uicontrol(uiMachineSegmentationNext,...
                  'style'     , 'text',...
                  'Units'     , 'normalized',...
                  'enable'    , 'Inactive',...
                  'FontWeight', 'bold',...
                  'FontSize'  , 12,...
                  'FontName'  , 'MS Sans Serif', ...
                  'string'    , 'Cerebral Bleed',...
                  'horizontalalignment', 'left',...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'position', [0.405+0.013 ...
                               0.925 ...
                               0.15 ...
                               0.05], ...
                  'ButtonDownFcn', @chkMachineSegmentationCerebralBleedAllCallback...
                  );
    
         chkMachineSegmentationCerebralBleed = cell(1,numel(asCerebralBleedName));
    
         for bd=1:numel(asCerebralBleedName)
    
            chkMachineSegmentationCerebralBleed{bd} = ...
                uicontrol(uiMachineSegmentationNext,...
                          'style'   , 'checkbox',...
                          'Units'   , 'normalized',...
                          'enable'  , 'on',...
                          'value'   , 0,...
                          'BackgroundColor', viewerBackgroundColor('get'), ...
                          'ForegroundColor', viewerForegroundColor('get'), ...
                          'position', [0.405+0.013 ...
                                       0.95-(bd*0.032)...
                                       0.02 ...
                                       0.02], ...
                          'UserData', bd, ...
                          'Callback', @chkMachineSegmentationCerebralBleedCallback...
                          );
    
                uicontrol(uiMachineSegmentationNext,...
                      'style'     , 'text',...
                      'Units'     , 'normalized',...
                      'enable'    , 'inactive',...
                      'FontSize'  , 10,...
                      'FontName'  , 'MS Sans Serif', ...
                      'string'    , asCerebralBleedName{bd},...
                      'horizontalalignment', 'left',...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.405+0.013+0.013 ...
                                   0.943-(bd*0.032)...
                                   0.15 ...
                                   0.03], ...
                      'UserData', bd, ...
                      'ButtonDownFcn', @chkMachineSegmentationCerebralBleedCallback...
                      );
        end
    end

    % Hip Implant 

    if CLASSES_CT == true

        chkMachineSegmentationHipImplantAll = ...
            uicontrol(uiMachineSegmentationNext,...
                      'style'   , 'checkbox',...
                      'Units'   , 'normalized',...
                      'enable'  , 'on',...
                      'value'   , 0,...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.405 ...
                                   0.95-0.08 ...
                                   0.02 ...
                                   0.02], ...
                      'Callback', @chkMachineSegmentationHipImplantAllCallback...
                      );
   
         uicontrol(uiMachineSegmentationNext,...
                  'style'     , 'text',...
                  'Units'     , 'normalized',...
                  'enable'    , 'Inactive',...
                  'FontWeight', 'bold',...
                  'FontSize'  , 12,...
                  'FontName'  , 'MS Sans Serif', ...
                  'string'    , 'Hip Implant',...
                  'horizontalalignment', 'left',...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'position', [0.405+0.013 ...
                               0.925-0.08 ...
                               0.15 ...
                               0.05], ...
                  'ButtonDownFcn', @chkMachineSegmentationHipImplantAllCallback...
                  );
    
         chkMachineSegmentationHipImplant = cell(1,numel(asHipImplantName));
    
         for bd=1:numel(asHipImplantName)
    
            chkMachineSegmentationHipImplant{bd} = ...
                uicontrol(uiMachineSegmentationNext,...
                          'style'   , 'checkbox',...
                          'Units'   , 'normalized',...
                          'enable'  , 'on',...
                          'value'   , 0,...
                          'BackgroundColor', viewerBackgroundColor('get'), ...
                          'ForegroundColor', viewerForegroundColor('get'), ...
                          'position', [0.405+0.013 ...
                                       0.95-(bd*0.032)-0.08...
                                       0.02 ...
                                       0.02], ...
                          'UserData', bd, ...
                          'Callback', @chkMachineSegmentationHipImplantCallback...
                          );
    
                uicontrol(uiMachineSegmentationNext,...
                      'style'     , 'text',...
                      'Units'     , 'normalized',...
                      'enable'    , 'inactive',...
                      'FontSize'  , 10,...
                      'FontName'  , 'MS Sans Serif', ...
                      'string'    , asHipImplantName{bd},...
                      'horizontalalignment', 'left',...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.405+0.013+0.013 ...
                                   0.943-(bd*0.032)-0.08...
                                   0.15 ...
                                   0.03], ...
                      'UserData', bd, ...
                      'ButtonDownFcn', @chkMachineSegmentationHipImplantCallback...
                      );
        end
    end

    % Coronary Arteries 

    if CLASSES_CT == true

        chkMachineSegmentationCoronaryArteriesAll = ...
            uicontrol(uiMachineSegmentationNext,...
                      'style'   , 'checkbox',...
                      'Units'   , 'normalized',...
                      'enable'  , 'on',...
                      'value'   , 0,...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.405 ...
                                   0.95-0.16 ...
                                   0.02 ...
                                   0.02], ...
                      'Callback', @chkMachineSegmentationCoronaryArteriesAllCallback...
                      );
   
         uicontrol(uiMachineSegmentationNext,...
                  'style'     , 'text',...
                  'Units'     , 'normalized',...
                  'enable'    , 'Inactive',...
                  'FontWeight', 'bold',...
                  'FontSize'  , 12,...
                  'FontName'  , 'MS Sans Serif', ...
                  'string'    , 'Coronary Arteries',...
                  'horizontalalignment', 'left',...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'position', [0.405+0.013 ...
                               0.925-0.16 ...
                               0.15 ...
                               0.05], ...
                  'ButtonDownFcn', @chkMachineSegmentationCoronaryArteriesAllCallback...
                  );
    
         chkMachineSegmentationCoronaryArteries = cell(1,numel(asCoronaryArteriesName));
    
         for bd=1:numel(asCoronaryArteriesName)
    
            chkMachineSegmentationCoronaryArteries{bd} = ...
                uicontrol(uiMachineSegmentationNext,...
                          'style'   , 'checkbox',...
                          'Units'   , 'normalized',...
                          'enable'  , 'on',...
                          'value'   , 0,...
                          'BackgroundColor', viewerBackgroundColor('get'), ...
                          'ForegroundColor', viewerForegroundColor('get'), ...
                          'position', [0.405+0.013 ...
                                       0.95-(bd*0.032)-0.16...
                                       0.02 ...
                                       0.02], ...
                          'UserData', bd, ...
                          'Callback', @chkMachineSegmentationCoronaryArteriesCallback...
                          );
    
                uicontrol(uiMachineSegmentationNext,...
                      'style'     , 'text',...
                      'Units'     , 'normalized',...
                      'enable'    , 'inactive',...
                      'FontSize'  , 10,...
                      'FontName'  , 'MS Sans Serif', ...
                      'string'    , asCoronaryArteriesName{bd},...
                      'horizontalalignment', 'left',...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.405+0.013+0.013 ...
                                   0.943-(bd*0.032)-0.16...
                                   0.15 ...
                                   0.03], ...
                      'UserData', bd, ...
                      'ButtonDownFcn', @chkMachineSegmentationCoronaryArteriesCallback...
                      );
        end
    end
    
    % Heartchambers Highres 

    if CLASSES_CT == true

        chkMachineSegmentationHeartchambersHighresAll = ...
            uicontrol(uiMachineSegmentationNext,...
                      'style'   , 'checkbox',...
                      'Units'   , 'normalized',...
                      'enable'  , 'on',...
                      'value'   , 0,...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.6 ...
                                   0.95 ...
                                   0.02 ...
                                   0.02], ...
                      'Callback', @chkMachineSegmentationHeartchambersHighresAllCallback...
                      );
   
         uicontrol(uiMachineSegmentationNext,...
                  'style'     , 'text',...
                  'Units'     , 'normalized',...
                  'enable'    , 'Inactive',...
                  'FontWeight', 'bold',...
                  'FontSize'  , 12,...
                  'FontName'  , 'MS Sans Serif', ...
                  'string'    , 'Heart Chambers Highres',...
                  'horizontalalignment', 'left',...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'position', [0.6+0.013 ...
                               0.925 ...
                               0.15 ...
                               0.05], ...
                  'ButtonDownFcn', @chkMachineSegmentationHeartchambersHighresAllCallback...
                  );
    
         chkMachineSegmentationHeartchambersHighres = cell(1,numel(asHeartchambersHighresName));
    
         for bd=1:numel(asHeartchambersHighresName)
    
            chkMachineSegmentationHeartchambersHighres{bd} = ...
                uicontrol(uiMachineSegmentationNext,...
                          'style'   , 'checkbox',...
                          'Units'   , 'normalized',...
                          'enable'  , 'on',...
                          'value'   , 0,...
                          'BackgroundColor', viewerBackgroundColor('get'), ...
                          'ForegroundColor', viewerForegroundColor('get'), ...
                          'position', [0.6+0.013 ...
                                       0.95-(bd*0.032)...
                                       0.02 ...
                                       0.02], ...
                          'UserData', bd, ...
                          'Callback', @chkMachineSegmentationHeartchambersHighresCallback...
                          );
    
                uicontrol(uiMachineSegmentationNext,...
                      'style'     , 'text',...
                      'Units'     , 'normalized',...
                      'enable'    , 'inactive',...
                      'FontSize'  , 10,...
                      'FontName'  , 'MS Sans Serif', ...
                      'string'    , asHeartchambersHighresName{bd},...
                      'horizontalalignment', 'left',...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.6+0.013+0.013 ...
                                   0.943-(bd*0.032)...
                                   0.15 ...
                                   0.03], ...
                      'UserData', bd, ...
                      'ButtonDownFcn', @chkMachineSegmentationHeartchambersHighresCallback...
                      );
        end
    end

    % Appendicular Bones 

    if CLASSES_CT == true

        chkMachineSegmentationAppendicularBonesAll = ...
            uicontrol(uiMachineSegmentationNext,...
                      'style'   , 'checkbox',...
                      'Units'   , 'normalized',...
                      'enable'  , 'on',...
                      'value'   , 0,...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.6 ...
                                   0.95-0.27 ...
                                   0.02 ...
                                   0.02], ...
                      'Callback', @chkMachineSegmentationAppendicularBonesAllCallback...
                      );
   

         uicontrol(uiMachineSegmentationNext,...
                  'style'     , 'text',...
                  'Units'     , 'normalized',...
                  'enable'    , 'Inactive',...
                  'FontWeight', 'bold',...
                  'FontSize'  , 12,...
                  'FontName'  , 'MS Sans Serif', ...
                  'string'    , 'Appendicular Bones',...
                  'horizontalalignment', 'left',...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'position', [0.6+0.013 ...
                               0.925-0.27 ...
                               0.15 ...
                               0.05], ...
                  'ButtonDownFcn', @chkMachineSegmentationAppendicularBonesAllCallback...
                  );
    
         chkMachineSegmentationAppendicularBones = cell(1,numel(asAppendicularBonesName));
    
         for bd=1:numel(asAppendicularBonesName)
    
            chkMachineSegmentationAppendicularBones{bd} = ...
                uicontrol(uiMachineSegmentationNext,...
                          'style'   , 'checkbox',...
                          'Units'   , 'normalized',...
                          'enable'  , 'on',...
                          'value'   , 0,...
                          'BackgroundColor', viewerBackgroundColor('get'), ...
                          'ForegroundColor', viewerForegroundColor('get'), ...
                          'position', [0.6+0.013 ...
                                       0.95-(bd*0.032)-0.27...
                                       0.02 ...
                                       0.02], ...
                          'UserData', bd, ...
                          'Callback', @chkMachineSegmentationAppendicularBonesCallback...
                          );
    
                uicontrol(uiMachineSegmentationNext,...
                      'style'     , 'text',...
                      'Units'     , 'normalized',...
                      'enable'    , 'inactive',...
                      'FontSize'  , 10,...
                      'FontName'  , 'MS Sans Serif', ...
                      'string'    , asAppendicularBonesName{bd},...
                      'horizontalalignment', 'left',...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.6+0.013+0.013 ...
                                   0.943-(bd*0.032)-0.27...
                                   0.15 ...
                                   0.03], ...
                      'UserData', bd, ...
                      'ButtonDownFcn', @chkMachineSegmentationAppendicularBonesCallback...
                      );
        end
    end

    % Pleural Pericard Effusion 

    if CLASSES_CT == true

        chkMachineSegmentationPleuralPericardEffusionAll = ...
            uicontrol(uiMachineSegmentationNext,...
                      'style'   , 'checkbox',...
                      'Units'   , 'normalized',...
                      'enable'  , 'on',...
                      'value'   , 0,...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.795 ...
                                   0.95-0.42 ...
                                   0.02 ...
                                   0.02], ...
                      'Callback', @chkMachineSegmentationPleuralPericardEffusionAllCallback...
                      );
   
         uicontrol(uiMachineSegmentationNext,...
                  'style'     , 'text',...
                  'Units'     , 'normalized',...
                  'enable'    , 'Inactive',...
                  'FontWeight', 'bold',...
                  'FontSize'  , 12,...
                  'FontName'  , 'MS Sans Serif', ...
                  'string'    , 'Pleural Pericard Effusion Mask',...
                  'horizontalalignment', 'left',...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'position', [0.795+0.013 ...
                               0.925-0.42 ...
                               0.2 ...
                               0.05], ...
                  'ButtonDownFcn', @chkMachineSegmentationPleuralPericardEffusionAllCallback...
                  );
    
         chkMachineSegmentationPleuralPericardEffusion = cell(1,numel(asPleuralPericardEffusionName));
    
         for bd=1:numel(asPleuralPericardEffusionName)
    
            chkMachineSegmentationPleuralPericardEffusion{bd} = ...
                uicontrol(uiMachineSegmentationNext,...
                          'style'   , 'checkbox',...
                          'Units'   , 'normalized',...
                          'enable'  , 'on',...
                          'value'   , 0,...
                          'BackgroundColor', viewerBackgroundColor('get'), ...
                          'ForegroundColor', viewerForegroundColor('get'), ...
                          'position', [0.795+0.013 ...
                                       0.95-(bd*0.032)-0.42...
                                       0.02 ...
                                       0.02], ...
                          'UserData', bd, ...
                          'Callback', @chkMachineSegmentationPleuralPericardEffusionCallback...
                          );
    
                uicontrol(uiMachineSegmentationNext,...
                      'style'     , 'text',...
                      'Units'     , 'normalized',...
                      'enable'    , 'inactive',...
                      'FontSize'  , 10,...
                      'FontName'  , 'MS Sans Serif', ...
                      'string'    , asPleuralPericardEffusionName{bd},...
                      'horizontalalignment', 'left',...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.795+0.013+0.013 ...
                                   0.943-(bd*0.032)-0.42...
                                   0.15 ...
                                   0.03], ...
                      'UserData', bd, ...
                      'ButtonDownFcn', @chkMachineSegmentationPleuralPericardEffusionCallback...
                      );
        end
    end

    % Preset

         uicontrol(uiMachineSegmentation,...
                  'style'     , 'text',...
                  'Units'     , 'normalized',...
                  'FontWeight', 'bold',...
                  'FontSize'  , 10,...
                  'FontName'  , 'MS Sans Serif', ...
                  'string'    , 'Preset protocol',...
                  'horizontalalignment', 'left',...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'position', [0.737 ...
                               0.180 ...
                               0.1 ...
                               0.03] ...
                  );

    popMachineSegmentationProtocol = ...
        uicontrol(uiMachineSegmentation, ...
                  'enable'  , 'on',...
                  'Units'   , 'normalized',...
                  'Style'   , 'popup', ...
                  'position', [0.822 ...
                               0.180 ...
                               0.165 ...
                               0.03], ...
                  'String'  , getMachineLearningProtocolName(), ...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'Callback', @popMachineSegmentationProtocolCallback, ...
                  'Value'   , 1 ...
                  );

    if CLASSES_CT == true

         uicontrol(uiMachineSegmentationNext,...
                  'style'     , 'text',...
                  'Units'     , 'normalized',...
                  'FontWeight', 'bold',...
                  'FontSize'  , 10,...
                  'FontName'  , 'MS Sans Serif', ...
                  'string'    , 'Preset protocol',...
                  'horizontalalignment', 'left',...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'position', [0.737 ...
                               0.180 ...
                               0.1 ...
                               0.03] ...
                  );

    popMachineSegmentationProtocolNext = ...
        uicontrol(uiMachineSegmentationNext, ...
                  'enable'  , 'on',...
                  'Units'   , 'normalized',...
                  'Style'   , 'popup', ...
                  'position', [0.822 ...
                               0.180 ...
                               0.165 ...
                               0.03], ...
                  'String'  , getMachineLearningProtocolName(), ...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'Callback', @popMachineSegmentationProtocolCallback, ...
                  'Value'   , 1 ...
                  );
    % Second Next

         uicontrol(uiMachineSegmentationSecondNext,...
                  'style'     , 'text',...
                  'Units'     , 'normalized',...
                  'FontWeight', 'bold',...
                  'FontSize'  , 10,...
                  'FontName'  , 'MS Sans Serif', ...
                  'string'    , 'Preset protocol',...
                  'horizontalalignment', 'left',...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'position', [0.737 ...
                               0.180 ...
                               0.1 ...
                               0.03] ...
                  );

    popMachineSegmentationProtocolSecondNext = ...
        uicontrol(uiMachineSegmentationSecondNext, ...
                  'enable'  , 'on',...
                  'Units'   , 'normalized',...
                  'Style'   , 'popup', ...
                  'position', [0.822 ...
                               0.180 ...
                               0.165 ...
                               0.03], ...
                  'String'  , getMachineLearningProtocolName(), ...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'Callback', @popMachineSegmentationProtocolCallback, ...
                  'Value'   , 1 ...
                  );    
    end

        uicontrol(uiMachineSegmentation,...
                  'style'   , 'pushbutton',...
                  'Units'   , 'normalized',...
                  'String'  , 'Load',...
                  'position', [0.737 ...
                               0.120 ...
                               0.08 ...
                               0.04], ...
                  'Enable'  , 'on', ...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'Callback', @loadMachineSegmentationProtocolCallback...
                  );

    if CLASSES_CT == true

        uicontrol(uiMachineSegmentationNext,...
                  'style'   , 'pushbutton',...
                  'Units'   , 'normalized',...
                  'String'  , 'Load',...
                  'position', [0.737 ...
                               0.120 ...
                               0.08 ...
                               0.04], ...
                  'Enable'  , 'on', ...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'Callback', @loadMachineSegmentationProtocolCallback...
                  );

        uicontrol(uiMachineSegmentationSecondNext,...
                  'style'   , 'pushbutton',...
                  'Units'   , 'normalized',...
                  'String'  , 'Load',...
                  'position', [0.737 ...
                               0.120 ...
                               0.08 ...
                               0.04], ...
                  'Enable'  , 'on', ...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'Callback', @loadMachineSegmentationProtocolCallback...
                  );        
    end

        uicontrol(uiMachineSegmentation,...
                  'style'   , 'pushbutton',...
                  'Units'   , 'normalized',...
                  'String'  , 'Save',...
                  'position', [0.822 ...
                               0.120 ...
                               0.08 ...
                               0.04], ...
                  'Enable'  , 'on', ...
                  'BackgroundColor', [0.5300 0.6300 0.4000], ...
                  'ForegroundColor', [0.1 0.1 0.1], ...
                  'Callback', @saveMachineSegmentationProtocolCallback...
                  );

    if CLASSES_CT == true

        uicontrol(uiMachineSegmentationNext,...
                  'style'   , 'pushbutton',...
                  'Units'   , 'normalized',...
                  'String'  , 'Save',...
                  'position', [0.822 ...
                               0.120 ...
                               0.08 ...
                               0.04], ...
                  'Enable'  , 'on', ...
                  'BackgroundColor', [0.5300 0.6300 0.4000], ...
                  'ForegroundColor', [0.1 0.1 0.1], ...
                  'Callback', @saveMachineSegmentationProtocolCallback...
                  );

    % Second Next

       uicontrol(uiMachineSegmentationSecondNext,...
                  'style'   , 'pushbutton',...
                  'Units'   , 'normalized',...
                  'String'  , 'Save',...
                  'position', [0.822 ...
                               0.120 ...
                               0.08 ...
                               0.04], ...
                  'Enable'  , 'on', ...
                  'BackgroundColor', [0.5300 0.6300 0.4000], ...
                  'ForegroundColor', [0.1 0.1 0.1], ...
                  'Callback', @saveMachineSegmentationProtocolCallback...
                  );
    end

        uicontrol(uiMachineSegmentation, ...
                  'style'   , 'pushbutton',...
                  'Units'   , 'normalized',...
                  'String'  , 'Delete',...
                  'position', [0.907 ...
                               0.120 ...
                               0.08 ...
                               0.04], ...
                  'Enable'  , 'on', ...
                  'BackgroundColor', [0.3255, 0.1137, 0.1137], ...
                  'ForegroundColor', [0.94 0.94 0.94], ...
                  'Callback', @deleteMachineSegmentationProtocolCallback...
                  );

    if CLASSES_CT == true

        uicontrol(uiMachineSegmentationNext, ...
                  'style'   , 'pushbutton',...
                  'Units'   , 'normalized',...
                  'String'  , 'Delete',...
                  'position', [0.907 ...
                               0.120 ...
                               0.08 ...
                               0.04], ...
                  'Enable'  , 'on', ...
                  'BackgroundColor', [0.3255, 0.1137, 0.1137], ...
                  'ForegroundColor', [0.94 0.94 0.94], ...
                  'Callback', @deleteMachineSegmentationProtocolCallback...
                  );

    % Second Next

        uicontrol(uiMachineSegmentationSecondNext, ...
                  'style'   , 'pushbutton',...
                  'Units'   , 'normalized',...
                  'String'  , 'Delete',...
                  'position', [0.907 ...
                               0.120 ...
                               0.08 ...
                               0.04], ...
                  'Enable'  , 'on', ...
                  'BackgroundColor', [0.3255, 0.1137, 0.1137], ...
                  'ForegroundColor', [0.94 0.94 0.94], ...
                  'Callback', @deleteMachineSegmentationProtocolCallback...
                  );    
    end

    % Options

         uicontrol(uiMachineSegmentation,...
                  'style'     , 'text',...
                  'Units'     , 'normalized',...
                  'FontWeight', 'bold',...
                  'FontSize'  , 10,...
                  'FontName'  , 'MS Sans Serif', ...
                  'string'    , 'Options',...
                  'horizontalalignment', 'left',...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'position', [0.57 ...
                               0.180 ...
                               0.1 ...
                               0.03] ...
                  );

    if CLASSES_CT == true

         uicontrol(uiMachineSegmentationNext,...
                  'style'     , 'text',...
                  'Units'     , 'normalized',...
                  'FontWeight', 'bold',...
                  'FontSize'  , 10,...
                  'FontName'  , 'MS Sans Serif', ...
                  'string'    , 'Options',...
                  'horizontalalignment', 'left',...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'position', [0.57 ...
                               0.180 ...
                               0.1 ...
                               0.03] ...
                  );

    % Second Next

         uicontrol(uiMachineSegmentationSecondNext,...
                  'style'     , 'text',...
                  'Units'     , 'normalized',...
                  'FontWeight', 'bold',...
                  'FontSize'  , 10,...
                  'FontName'  , 'MS Sans Serif', ...
                  'string'    , 'Options',...
                  'horizontalalignment', 'left',...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'position', [0.57 ...
                               0.180 ...
                               0.1 ...
                               0.03] ...
                  );
    end

    chkMachineSegmentationFast = ...
        uicontrol(uiMachineSegmentation,...
                  'style'   , 'checkbox',...
                  'Units'   , 'normalized',...
                  'enable'  , 'on',...
                  'value'   , fastMachineLearningDialog('get'),...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'position', [0.57 ...
                               0.145 ...
                               0.02 ...
                               0.02], ...
                  'Callback', @chkMachineSegmentationFastCallback...
                  );

         uicontrol(uiMachineSegmentation,...
                  'style'     , 'text',...
                  'Units'     , 'normalized',...
                  'enable'    , 'Inactive',...
                  'FontWeight', 'normal',...
                  'FontSize'  , 10,...
                  'FontName'  , 'MS Sans Serif', ...
                  'string'    , 'Fast Segmentation',...
                  'horizontalalignment', 'left',...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'position', [0.57+0.013 ...
                               0.145-.008 ...
                               0.1 ...
                               0.03], ...
                  'ButtonDownFcn', @chkMachineSegmentationFastCallback...
                  );

    if CLASSES_CT == true

        chkMachineSegmentationFastNext = ...
            uicontrol(uiMachineSegmentationNext,...
                      'style'   , 'checkbox',...
                      'Units'   , 'normalized',...
                      'enable'  , 'on',...
                      'value'   , fastMachineLearningDialog('get'),...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.57 ...
                                   0.145 ...
                                   0.02 ...
                                   0.02], ...
                      'Callback', @chkMachineSegmentationFastNextCallback...
                      );
    
             uicontrol(uiMachineSegmentationNext,...
                      'style'     , 'text',...
                      'Units'     , 'normalized',...
                      'enable'    , 'Inactive',...
                      'FontWeight', 'normal',...
                      'FontSize'  , 10,...
                      'FontName'  , 'MS Sans Serif', ...
                      'string'    , 'Fast Segmentation',...
                      'horizontalalignment', 'left',...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.57+0.013 ...
                                   0.145-.008 ...
                                   0.1 ...
                                   0.03], ...
                      'ButtonDownFcn', @chkMachineSegmentationFastNextCallback...
                      );
    % Second Next

        chkMachineSegmentationFastSecondNext = ...
            uicontrol(uiMachineSegmentationSecondNext,...
                      'style'   , 'checkbox',...
                      'Units'   , 'normalized',...
                      'enable'  , 'on',...
                      'value'   , fastMachineLearningDialog('get'),...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.57 ...
                                   0.145 ...
                                   0.02 ...
                                   0.02], ...
                      'Callback', @chkMachineSegmentationFastSecondNextCallback...
                      );
    
             uicontrol(uiMachineSegmentationSecondNext,...
                      'style'     , 'text',...
                      'Units'     , 'normalized',...
                      'enable'    , 'Inactive',...
                      'FontWeight', 'normal',...
                      'FontSize'  , 10,...
                      'FontName'  , 'MS Sans Serif', ...
                      'string'    , 'Fast Segmentation',...
                      'horizontalalignment', 'left',...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.57+0.013 ...
                                   0.145-.008 ...
                                   0.1 ...
                                   0.03], ...
                      'ButtonDownFcn', @chkMachineSegmentationFastNextCallback...
                      );    
    end

    chkMachineSegmentationForceSplit = ...
        uicontrol(uiMachineSegmentation,...
                  'style'   , 'checkbox',...
                  'Units'   , 'normalized',...
                  'enable'  , 'on',...
                  'value'   , forceSplitMachineLearningDialog('get'),...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'position', [0.57 ...
                               0.145-0.038 ...
                               0.02 ...
                               0.02], ...
                  'Callback', @chkMachineSegmentationForceSplitCallback...
                  );


         uicontrol(uiMachineSegmentation,...
                  'style'     , 'text',...
                  'Units'     , 'normalized',...
                  'enable'    , 'Inactive',...
                  'FontWeight', 'normal',...
                  'FontSize'  , 10,...
                  'FontName'  , 'MS Sans Serif', ...
                  'string'    , 'Split in part',...
                  'horizontalalignment', 'left',...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'position', [0.57+0.013 ...
                               0.145-0.038-0.008 ...
                               0.1 ...
                               0.03], ...
                  'ButtonDownFcn', @chkMachineSegmentationForceSplitCallback...
                  );

    if CLASSES_CT == true

        chkMachineSegmentationForceSplitNext = ...
            uicontrol(uiMachineSegmentationNext,...
                      'style'   , 'checkbox',...
                      'Units'   , 'normalized',...
                      'enable'  , 'on',...
                      'value'   , forceSplitMachineLearningDialog('get'),...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.57 ...
                                   0.145-0.038 ...
                                   0.02 ...
                                   0.02], ...
                      'Callback', @chkMachineSegmentationForceSplitNextCallback...
                      );
    
    
             uicontrol(uiMachineSegmentationNext,...
                      'style'     , 'text',...
                      'Units'     , 'normalized',...
                      'enable'    , 'Inactive',...
                      'FontWeight', 'normal',...
                      'FontSize'  , 10,...
                      'FontName'  , 'MS Sans Serif', ...
                      'string'    , 'Split in part',...
                      'horizontalalignment', 'left',...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.57+0.013 ...
                                   0.145-0.038-0.008 ...
                                   0.1 ...
                                   0.03], ...
                      'ButtonDownFcn', @chkMachineSegmentationForceSplitNextCallback...
                      );

    % Second Next

        chkMachineSegmentationForceSplitSecondNext = ...
            uicontrol(uiMachineSegmentationSecondNext,...
                      'style'   , 'checkbox',...
                      'Units'   , 'normalized',...
                      'enable'  , 'on',...
                      'value'   , forceSplitMachineLearningDialog('get'),...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.57 ...
                                   0.145-0.038 ...
                                   0.02 ...
                                   0.02], ...
                      'Callback', @chkMachineSegmentationForceSplitSecondNextCallback...
                      );
    
             uicontrol(uiMachineSegmentationSecondNext,...
                      'style'     , 'text',...
                      'Units'     , 'normalized',...
                      'enable'    , 'Inactive',...
                      'FontWeight', 'normal',...
                      'FontSize'  , 10,...
                      'FontName'  , 'MS Sans Serif', ...
                      'string'    , 'Split in part',...
                      'horizontalalignment', 'left',...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.57+0.013 ...
                                   0.145-0.038-0.008 ...
                                   0.1 ...
                                   0.03], ...
                      'ButtonDownFcn', @chkMachineSegmentationForceSplitSecondNextCallback...
                      );
    end

    if CLASSES_CT == true

        chkMachineSegmentationBodySeg = ...
            uicontrol(uiMachineSegmentation,...
                      'style'   , 'checkbox',...
                      'Units'   , 'normalized',...
                      'enable'  , 'on',...
                      'value'   , bodySegMachineLearningDialog('get'),...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.57 ...
                                   0.145-0.076 ...
                                   0.02 ...
                                   0.02], ...
                      'Callback', @chkMachineSegmentationBodySegCallback...
                      );
    
    
             uicontrol(uiMachineSegmentation,...
                      'style'     , 'text',...
                      'Units'     , 'normalized',...
                      'enable'    , 'Inactive',...
                      'FontWeight', 'normal',...
                      'FontSize'  , 10,...
                      'FontName'  , 'MS Sans Serif', ...
                      'string'    , 'Pre-processing crop',...
                      'horizontalalignment', 'left',...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.57+0.013 ...
                                   0.145-0.076-0.008 ...
                                   0.1 ...
                                   0.03], ...
                      'ButtonDownFcn', @chkMachineSegmentationBodySegCallback...
                      );    

        chkMachineSegmentationPixelEdge = ...
            uicontrol(uiMachineSegmentation,...
                      'style'   , 'checkbox',...
                      'Units'   , 'normalized',...
                      'enable'  , 'on',...
                      'value'   , pixelEdge('get'),...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.57 ...
                                   0.145-0.114 ...
                                   0.02 ...
                                   0.02], ...
                      'Callback', @chkMachineSegmentationPixelEdgeCallback...
                      );
        
    
             uicontrol(uiMachineSegmentation,...
                      'style'     , 'text',...
                      'Units'     , 'normalized',...
                      'enable'    , 'Inactive',...
                      'FontWeight', 'normal',...
                      'FontSize'  , 10,...
                      'FontName'  , 'MS Sans Serif', ...
                      'string'    , 'Pixel Edge',...
                      'horizontalalignment', 'left',...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.57+0.013 ...
                                   0.145-0.114-0.008 ...
                                   0.1 ...
                                   0.03], ...
                      'ButtonDownFcn', @chkMachineSegmentationPixelEdgeCallback...
                      );


        chkMachineSegmentationBodySegNext = ...
            uicontrol(uiMachineSegmentationNext,...
                      'style'   , 'checkbox',...
                      'Units'   , 'normalized',...
                      'enable'  , 'on',...
                      'value'   , bodySegMachineLearningDialog('get'),...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.57 ...
                                   0.145-0.076 ...
                                   0.02 ...
                                   0.02], ...
                      'Callback', @chkMachineSegmentationBodySegNextCallback...
                      );
    
    
             uicontrol(uiMachineSegmentationNext,...
                      'style'     , 'text',...
                      'Units'     , 'normalized',...
                      'enable'    , 'Inactive',...
                      'FontWeight', 'normal',...
                      'FontSize'  , 10,...
                      'FontName'  , 'MS Sans Serif', ...
                      'string'    , 'Pre-processing crop',...
                      'horizontalalignment', 'left',...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.57+0.013 ...
                                   0.145-0.076-0.008 ...
                                   0.1 ...
                                   0.03], ...
                      'ButtonDownFcn', @chkMachineSegmentationBodySegNextCallback...
                      ); 

       chkMachineSegmentationPixelEdgeNext = ...
            uicontrol(uiMachineSegmentationNext,...
                      'style'   , 'checkbox',...
                      'Units'   , 'normalized',...
                      'enable'  , 'on',...
                      'value'   , pixelEdge('get'),...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.57 ...
                                   0.145-0.114 ...
                                   0.02 ...
                                   0.02], ...
                      'Callback', @chkMachineSegmentationPixelEdgeNextCallback...
                      );  

             uicontrol(uiMachineSegmentationNext,...
                      'style'     , 'text',...
                      'Units'     , 'normalized',...
                      'enable'    , 'Inactive',...
                      'FontWeight', 'normal',...
                      'FontSize'  , 10,...
                      'FontName'  , 'MS Sans Serif', ...
                      'string'    , 'Pixel Edge',...
                      'horizontalalignment', 'left',...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.57+0.013 ...
                                   0.145-0.114-0.008 ...
                                   0.1 ...
                                   0.03], ...
                      'ButtonDownFcn', @chkMachineSegmentationPixelEdgeNextCallback...
                      ); 

        % Second Next

        chkMachineSegmentationBodySegSecondNext = ...
            uicontrol(uiMachineSegmentationSecondNext,...
                      'style'   , 'checkbox',...
                      'Units'   , 'normalized',...
                      'enable'  , 'on',...
                      'value'   , bodySegMachineLearningDialog('get'),...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.57 ...
                                   0.145-0.076 ...
                                   0.02 ...
                                   0.02], ...
                      'Callback', @chkMachineSegmentationBodySegSecondNextCallback...
                      );
    
    
             uicontrol(uiMachineSegmentationSecondNext,...
                      'style'     , 'text',...
                      'Units'     , 'normalized',...
                      'enable'    , 'Inactive',...
                      'FontWeight', 'normal',...
                      'FontSize'  , 10,...
                      'FontName'  , 'MS Sans Serif', ...
                      'string'    , 'Pre-processing crop',...
                      'horizontalalignment', 'left',...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.57+0.013 ...
                                   0.145-0.076-0.008 ...
                                   0.1 ...
                                   0.03], ...
                      'ButtonDownFcn', @chkMachineSegmentationBodySegSecondNextCallback...
                      ); 

       chkMachineSegmentationPixelEdgeSecondNext = ...
            uicontrol(uiMachineSegmentationSecondNext,...
                      'style'   , 'checkbox',...
                      'Units'   , 'normalized',...
                      'enable'  , 'on',...
                      'value'   , pixelEdge('get'),...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.57 ...
                                   0.145-0.114 ...
                                   0.02 ...
                                   0.02], ...
                      'Callback', @chkMachineSegmentationPixelEdgeSecondNextCallback...
                      );  

             uicontrol(uiMachineSegmentationSecondNext,...
                      'style'     , 'text',...
                      'Units'     , 'normalized',...
                      'enable'    , 'Inactive',...
                      'FontWeight', 'normal',...
                      'FontSize'  , 10,...
                      'FontName'  , 'MS Sans Serif', ...
                      'string'    , 'Pixel Edge',...
                      'horizontalalignment', 'left',...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.57+0.013 ...
                                   0.145-0.114-0.008 ...
                                   0.1 ...
                                   0.03], ...
                      'ButtonDownFcn', @chkMachineSegmentationPixelEdgeSecondNextCallback...
                      );       
    else
        chkMachineSegmentationPixelEdge = ...
            uicontrol(uiMachineSegmentation,...
                      'style'   , 'checkbox',...
                      'Units'   , 'normalized',...
                      'enable'  , 'on',...
                      'value'   , pixelEdge('get'),...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.57 ...
                                   0.145-0.076 ...
                                   0.02 ...
                                   0.02], ...
                      'Callback', @chkMachineSegmentationPixelEdgeCallback...
                      );
        
    
             uicontrol(uiMachineSegmentation,...
                      'style'     , 'text',...
                      'Units'     , 'normalized',...
                      'enable'    , 'Inactive',...
                      'FontWeight', 'normal',...
                      'FontSize'  , 10,...
                      'FontName'  , 'MS Sans Serif', ...
                      'string'    , 'Pixel Edge',...
                      'horizontalalignment', 'left',...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.57+0.013 ...
                                   0.145-0.076-0.008 ...
                                   0.1 ...
                                   0.03], ...
                      'ButtonDownFcn', @chkMachineSegmentationPixelEdgeCallback...
                      );        

        chkMachineSegmentationPixelEdgeNext = ...
            uicontrol(uiMachineSegmentationNext,...
                      'style'   , 'checkbox',...
                      'Units'   , 'normalized',...
                      'enable'  , 'on',...
                      'value'   , pixelEdge('get'),...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.57 ...
                                   0.145-0.076 ...
                                   0.02 ...
                                   0.02], ...
                      'Callback', @chkMachineSegmentationPixelEdgeNextCallback...
                      );       
    
             uicontrol(uiMachineSegmentationNext,...
                      'style'     , 'text',...
                      'Units'     , 'normalized',...
                      'enable'    , 'Inactive',...
                      'FontWeight', 'normal',...
                      'FontSize'  , 10,...
                      'FontName'  , 'MS Sans Serif', ...
                      'string'    , 'Pixel Edge',...
                      'horizontalalignment', 'left',...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [0.57+0.013 ...
                                   0.145-0.076-0.008 ...
                                   0.1 ...
                                   0.03], ...
                      'ButtonDownFcn', @chkMachineSegmentationPixelEdgeNextCallback...
                      );   
    end

     % Cancel or Proceed

     uicontrol(uiMachineSegmentation,...
               'String'  , 'Cancel',...
               'Units'   , 'normalized',...
               'position', [0.907 ...
                            0.01 ...
                            0.08 ...
                            0.04], ...
               'BackgroundColor', viewerBackgroundColor('get'), ...
               'ForegroundColor', viewerForegroundColor('get'), ...
               'Callback', @cancelMachineSegmentationCallback...
               );

     uicontrol(uiMachineSegmentation,...
              'String'    , 'Segment',...
              'Units'     , 'normalized',...
              'FontWeight', 'bold',...
              'position', [0.822 ...
                           0.01 ...
                           0.08 ...
                           0.04], ...
              'BackgroundColor', [0.6300 0.6300 0.4000], ...
              'ForegroundColor', [0.1 0.1 0.1], ...
              'Callback', @proceedMachineSegmentationCallback...
              );

     uicontrol(uiMachineSegmentationNext,...
               'String'  , 'Cancel',...
               'Units'   , 'normalized',...
               'position', [0.907 ...
                            0.01 ...
                            0.08 ...
                            0.04], ...
               'BackgroundColor', viewerBackgroundColor('get'), ...
               'ForegroundColor', viewerForegroundColor('get'), ...
               'Callback', @cancelMachineSegmentationCallback...
               );

     uicontrol(uiMachineSegmentationNext,...
              'String'    , 'Segment',...
              'Units'     , 'normalized',...
              'FontWeight', 'bold',...
              'position', [0.822 ...
                           0.01 ...
                           0.08 ...
                           0.04], ...
              'BackgroundColor', [0.6300 0.6300 0.4000], ...
              'ForegroundColor', [0.1 0.1 0.1], ...
              'Callback', @proceedMachineSegmentationCallback...
              );

     uicontrol(uiMachineSegmentationSecondNext,...
               'String'  , 'Cancel',...
               'Units'   , 'normalized',...
               'position', [0.907 ...
                            0.01 ...
                            0.08 ...
                            0.04], ...
               'BackgroundColor', viewerBackgroundColor('get'), ...
               'ForegroundColor', viewerForegroundColor('get'), ...
               'Callback', @cancelMachineSegmentationCallback...
               );

     uicontrol(uiMachineSegmentationSecondNext,...
              'String'    , 'Segment',...
              'Units'     , 'normalized',...
              'FontWeight', 'bold',...
              'position', [0.822 ...
                           0.01 ...
                           0.08 ...
                           0.04], ...
              'BackgroundColor', [0.6300 0.6300 0.4000], ...
              'ForegroundColor', [0.1 0.1 0.1], ...
              'Callback', @proceedMachineSegmentationCallback...
              );

    % Next Previous Page

    if CLASSES_CT == true

        sPreviousPageIcon = sprintf('%s/icons/previous-page.png', viewerRootPath('get'));     
        if exist(sPreviousPageIcon, 'file')
           % [aImgPreviousPageIcon,~] = imread(sprintf('%s/icons/previous-page.png', viewerRootPath('get')));
           %  aImgPreviousPageIcon = double(aImgPreviousPageIcon)/255;
            bg  = reshape(viewerBackgroundColor('get'),1,1,3);
            aImgPreviousPageIcon =  makeIcon(sPreviousPageIcon, [38 127], bg, 1);
        else
            aImgPreviousPageIcon = [];
        end    
    
            uicontrol(uiMachineSegmentation, ...
                     'Position'       , [10 40 130 40], ...
                     'Enable'         , 'on', ...
                     'String'         , '',...
                     'FontWeight'     , 'bold', ...
                     'BackgroundColor', viewerBackgroundColor('get'), ...
                     'ForegroundColor', viewerForegroundColor('get'), ...
                     'TooltipString'  , 'Previous Page', ...
                     'UserData'       , 'First', ...
                     'CData'          , aImgPreviousPageIcon, ...
                     'CallBack'       , @btnPreviousPageMachineSegmentationCallback ...
                     );

            uicontrol(uiMachineSegmentationNext, ...
                     'Position'       , [10 40 130 40], ...
                     'Enable'         , 'on', ...
                     'String'         , '',...
                     'FontWeight'     , 'bold', ...
                     'BackgroundColor', viewerBackgroundColor('get'), ...
                     'ForegroundColor', viewerForegroundColor('get'), ...
                     'TooltipString'  , 'Previous Page', ...
                     'UserData'       , 'Second', ...
                     'CData'          , aImgPreviousPageIcon, ...
                     'CallBack'       , @btnPreviousPageMachineSegmentationCallback ...
                     );

             uicontrol(uiMachineSegmentationSecondNext, ...
                     'Position'       , [10 40 130 40], ...
                     'Enable'         , 'on', ...
                     'String'         , '',...
                     'FontWeight'     , 'bold', ...
                     'BackgroundColor', viewerBackgroundColor('get'), ...
                     'ForegroundColor', viewerForegroundColor('get'), ...
                     'TooltipString'  , 'Previous Page', ...
                     'UserData'       , 'Third', ...
                     'CData'          , aImgPreviousPageIcon, ...
                     'CallBack'       , @btnPreviousPageMachineSegmentationCallback ...
                     );

        sNextPageIcon = sprintf('%s/icons/next-page.png', viewerRootPath('get'));     
        if exist(sNextPageIcon, 'file')
           % [aImgNextPageIcon,~] = imread(sprintf('%s/icons/next-page.png', viewerRootPath('get')));
            bg  = reshape(viewerBackgroundColor('get'),1,1,3);
            aImgNextPageIcon =  makeIcon(sNextPageIcon, [38 127], bg, 1);
        else
            aImgNextPageIcon = [];
        end    
    
            uicontrol(uiMachineSegmentation, ...
                     'Position'       , [150 40 130 40], ...
                     'Enable'         , 'on', ...
                     'String'         , '',...
                     'FontWeight'     , 'bold', ...
                     'BackgroundColor', viewerBackgroundColor('get'), ...
                     'ForegroundColor', viewerForegroundColor('get'), ...
                     'TooltipString'  , 'Next Page', ...
                     'UserData'       , 'First', ...   
                     'CData'          , aImgNextPageIcon, ...
                     'CallBack'       , @btnNextPageMachineSegmentationCallback ...
                     );
    
            uicontrol(uiMachineSegmentationNext, ...
                     'Position'       , [150 40 130 40], ...
                     'Enable'         , 'on', ...
                     'String'         , '',...
                     'FontWeight'     , 'bold', ...
                     'BackgroundColor', viewerBackgroundColor('get'), ...
                     'ForegroundColor', viewerForegroundColor('get'), ...
                     'TooltipString'  , 'Next Page', ...
                     'UserData'       , 'Second', ...   
                     'CData'          , aImgNextPageIcon, ...
                     'CallBack'       , @btnNextPageMachineSegmentationCallback ...
                     );

            uicontrol(uiMachineSegmentationSecondNext, ...
                     'Position'       , [150 40 130 40], ...
                     'Enable'         , 'on', ...
                     'String'         , '',...
                     'FontWeight'     , 'bold', ...
                     'BackgroundColor', viewerBackgroundColor('get'), ...
                     'ForegroundColor', viewerForegroundColor('get'), ...
                     'TooltipString'  , 'Next Page', ...
                     'UserData'       , 'Third', ...   
                     'CData'          , aImgNextPageIcon, ...
                     'CallBack'       , @btnNextPageMachineSegmentationCallback ...
                     );            
    end

         uicontrol(uiMachineSegmentation,...
                  'style'     , 'text',...
                  'enable'    , 'Inactive',...
                  'FontWeight', 'normal',...
                  'FontSize'  , 10,...
                  'FontName'  , 'MS Sans Serif', ...
                  'string'    , 'Module documentation: https://github.com/wasserth/TotalSegmentator',...
                  'horizontalalignment', 'left',...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', 'white', ...
                  'position', [10 ...
                               10 ...
                               500 ...
                               20], ...
                  'ButtonDownFcn', @visitTotalSegmentator...
                  );

         uicontrol(uiMachineSegmentationNext,...
                  'style'     , 'text',...
                  'enable'    , 'Inactive',...
                  'FontWeight', 'normal',...
                  'FontSize'  , 10,...
                  'FontName'  , 'MS Sans Serif', ...
                  'string'    , 'Module documentation: https://github.com/wasserth/TotalSegmentator',...
                  'horizontalalignment', 'left',...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', 'white', ...
                  'position', [10 ...
                               10 ...
                               500 ...
                               20], ...
                  'ButtonDownFcn', @visitTotalSegmentator...
                  );

         uicontrol(uiMachineSegmentationSecondNext,...
                  'style'     , 'text',...
                  'enable'    , 'Inactive',...
                  'FontWeight', 'normal',...
                  'FontSize'  , 10,...
                  'FontName'  , 'MS Sans Serif', ...
                  'string'    , 'Module documentation: https://github.com/wasserth/TotalSegmentator',...
                  'horizontalalignment', 'left',...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', 'white', ...
                  'position', [10 ...
                               10 ...
                               500 ...
                               20], ...
                  'ButtonDownFcn', @visitTotalSegmentator...
                  );

    function visitTotalSegmentator(~, ~)
        web('https://github.com/wasserth/TotalSegmentator');
    end

    function btnPreviousPageMachineSegmentationCallback(hObject, ~)

        if strcmpi(hObject.UserData, 'First')
            set(uiMachineSegmentation          , 'Visible', 'off');
            set(uiMachineSegmentationNext      , 'Visible', 'off');
            set(uiMachineSegmentationSecondNext, 'Visible', 'on');            

        elseif strcmpi(hObject.UserData, 'Second')
            set(uiMachineSegmentation          , 'Visible', 'on');
            set(uiMachineSegmentationNext      , 'Visible', 'off');
            set(uiMachineSegmentationSecondNext, 'Visible', 'off');            
        else
            set(uiMachineSegmentation          , 'Visible', 'off');
            set(uiMachineSegmentationNext      , 'Visible', 'on');
            set(uiMachineSegmentationSecondNext, 'Visible', 'off');              
        end

    end

    function btnNextPageMachineSegmentationCallback(hObject, ~)

        if strcmpi(hObject.UserData, 'First')
            set(uiMachineSegmentation          , 'Visible', 'off');
            set(uiMachineSegmentationNext      , 'Visible', 'on');
            set(uiMachineSegmentationSecondNext, 'Visible', 'off');            

        elseif strcmpi(hObject.UserData, 'Second')
            set(uiMachineSegmentation          , 'Visible', 'off');
            set(uiMachineSegmentationNext      , 'Visible', 'off');
            set(uiMachineSegmentationSecondNext, 'Visible', 'on');            
        else
            set(uiMachineSegmentation          , 'Visible', 'on');
            set(uiMachineSegmentationNext      , 'Visible', 'off');
            set(uiMachineSegmentationSecondNext, 'Visible', 'off');              
        end
    end

    % Options

    function chkMachineSegmentationFastCallback(hObject, ~)

        bObjectValue = get(chkMachineSegmentationFast, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationFast, 'Value', ~bObjectValue);
        end

        if CLASSES_CT == true
            set(chkMachineSegmentationFastNext      , 'Value', get(chkMachineSegmentationFast, 'Value'));
            set(chkMachineSegmentationFastSecondNext, 'Value', get(chkMachineSegmentationFast, 'Value'));           
        end

        fastMachineLearningDialog('set', get(chkMachineSegmentationFast, 'Value'));
    end

    function chkMachineSegmentationFastNextCallback(hObject, ~)

        bObjectValue = get(chkMachineSegmentationFastNext, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationFastNext, 'Value', ~bObjectValue);
        end

        if CLASSES_CT == true
            set(chkMachineSegmentationFast          , 'Value', get(chkMachineSegmentationFastNext, 'Value'));
            set(chkMachineSegmentationFastSecondNext, 'Value', get(chkMachineSegmentationFastNext, 'Value'));           
        end

        fastMachineLearningDialog('set', get(chkMachineSegmentationFastNext, 'Value'));
    end

    function chkMachineSegmentationFastSecondNextCallback(hObject, ~)

        bObjectValue = get(chkMachineSegmentationFastSecondNext, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationFastSecondNext, 'Value', ~bObjectValue);
        end

        if CLASSES_CT == true
            set(chkMachineSegmentationFast    , 'Value', get(chkMachineSegmentationFastSecondNext, 'Value'));
            set(chkMachineSegmentationFastNext, 'Value', get(chkMachineSegmentationFastSecondNext, 'Value'));           
        end

        fastMachineLearningDialog('set', get(chkMachineSegmentationFastSecondNext, 'Value'));
    end

    function chkMachineSegmentationForceSplitCallback(hObject, ~)

        bObjectValue = get(chkMachineSegmentationForceSplit, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationForceSplit, 'Value', ~bObjectValue);
        end

        if CLASSES_CT == true
            set(chkMachineSegmentationForceSplitNext     , 'Value', get(chkMachineSegmentationForceSplit, 'Value'));
            set(chkMachineSegmentationForceSplitSecondNext, 'Value', get(chkMachineSegmentationForceSplit, 'Value'));           
        end

        forceSplitMachineLearningDialog('set', get(chkMachineSegmentationForceSplit, 'Value'));
    end

    function chkMachineSegmentationForceSplitNextCallback(hObject, ~)

        bObjectValue = get(chkMachineSegmentationForceSplitNext, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationForceSplitNext, 'Value', ~bObjectValue);
        end

        if CLASSES_CT == true
            set(chkMachineSegmentationForceSplit          , 'Value', get(chkMachineSegmentationForceSplitNext, 'Value'));
            set(chkMachineSegmentationForceSplitSecondNext, 'Value', get(chkMachineSegmentationForceSplitNext, 'Value'));           
        end

        forceSplitMachineLearningDialog('set', get(chkMachineSegmentationForceSplitNext, 'Value'));
    end

    function chkMachineSegmentationForceSplitSecondNextCallback(hObject, ~)

        bObjectValue = get(chkMachineSegmentationForceSplitSecondNext, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationForceSplitSecondNext, 'Value', ~bObjectValue);
        end

        if CLASSES_CT == true
            set(chkMachineSegmentationForceSplit    , 'Value', get(chkMachineSegmentationForceSplitSecondNext, 'Value'));
            set(chkMachineSegmentationForceSplitNext, 'Value', get(chkMachineSegmentationForceSplitSecondNext, 'Value'));           
        end

        forceSplitMachineLearningDialog('set', get(chkMachineSegmentationForceSplitSecondNext, 'Value'));
    end

    function chkMachineSegmentationBodySegCallback(hObject, ~)

        bObjectValue = get(chkMachineSegmentationBodySeg, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationBodySeg, 'Value', ~bObjectValue);
        end

        if CLASSES_CT == true
            set(chkMachineSegmentationBodySegNext      , 'Value', get(chkMachineSegmentationBodySeg, 'Value'));
            set(chkMachineSegmentationBodySegSecondNext, 'Value', get(chkMachineSegmentationBodySeg, 'Value'));           
        end

        bodySegMachineLearningDialog('set', get(chkMachineSegmentationBodySeg, 'Value'));
    end

    function chkMachineSegmentationBodySegNextCallback(hObject, ~)

        bObjectValue = get(chkMachineSegmentationBodySegNext, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationBodySegNext, 'Value', ~bObjectValue);
        end

        if CLASSES_CT == true
            set(chkMachineSegmentationBodySeg          , 'Value', get(chkMachineSegmentationBodySegNext, 'Value'));
            set(chkMachineSegmentationBodySegSecondNext, 'Value', get(chkMachineSegmentationBodySegNext, 'Value'));           
        end

        bodySegMachineLearningDialog('set', get(chkMachineSegmentationBodySegNext, 'Value'));
    end

    function chkMachineSegmentationBodySegSecondNextCallback(hObject, ~)

        bObjectValue = get(chkMachineSegmentationBodySegSecondNext, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationBodySegSecondNext, 'Value', ~bObjectValue);
        end

        if CLASSES_CT == true
            set(chkMachineSegmentationBodySeg    , 'Value', get(chkMachineSegmentationBodySegSecondNext, 'Value'));
            set(chkMachineSegmentationBodySegNext, 'Value', get(chkMachineSegmentationBodySegSecondNext, 'Value'));           
        end

        bodySegMachineLearningDialog('set', get(chkMachineSegmentationBodySegSecondNext, 'Value'));
    end

    function chkMachineSegmentationPixelEdgeCallback(hObject, ~)

        bObjectValue = get(chkMachineSegmentationPixelEdge, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationPixelEdge, 'Value', ~bObjectValue);
        end

        if CLASSES_CT == true
            set(chkMachineSegmentationPixelEdgeNext      , 'Value', get(chkMachineSegmentationPixelEdge, 'Value'));
            set(chkMachineSegmentationPixelEdgeSecondNext, 'Value', get(chkMachineSegmentationPixelEdge, 'Value'));           
        end

        pixelEdge('set', get(chkMachineSegmentationPixelEdge, 'Value'));

        % Set contour panel checkbox
        set(chkPixelEdgePtr('get'), 'Value', pixelEdge('get'));

    end

    function chkMachineSegmentationPixelEdgeNextCallback(hObject, ~)

        bObjectValue = get(chkMachineSegmentationPixelEdgeNext, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationPixelEdgeNext, 'Value', ~bObjectValue);
        end

        if CLASSES_CT == true
            set(chkMachineSegmentationPixelEdge          , 'Value', get(chkMachineSegmentationPixelEdgeNext, 'Value'));
            set(chkMachineSegmentationPixelEdgeSecondNext, 'Value', get(chkMachineSegmentationPixelEdgeNext, 'Value'));           
        end

        pixelEdge('set', get(chkMachineSegmentationPixelEdgeNext, 'Value'));

        % Set contour panel checkbox
        set(chkPixelEdgePtr('get'), 'Value', pixelEdge('get'));
    end

    function chkMachineSegmentationPixelEdgeSecondNextCallback(hObject, ~)

        bObjectValue = get(chkMachineSegmentationPixelEdgeSecondNext, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationPixelEdgeSecondNext, 'Value', ~bObjectValue);
        end

        if CLASSES_CT == true
            set(chkMachineSegmentationPixelEdge    , 'Value', get(chkMachineSegmentationPixelEdgeSecondNext, 'Value'));
            set(chkMachineSegmentationPixelEdgeNext, 'Value', get(chkMachineSegmentationPixelEdgeSecondNext, 'Value'));           
        end

        pixelEdge('set', get(chkMachineSegmentationPixelEdgeSecondNext, 'Value'));

        % Set contour panel checkbox
        set(chkPixelEdgePtr('get'), 'Value', pixelEdge('get'));

    end

    % Skeleton

    function chkMachineSegmentationSkeletonAllCallback(hObject, ~)

        bObjectValue = get(chkMachineSegmentationSkeletonAll, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationSkeletonAll, 'Value', ~bObjectValue);
        end

        bObjectValue = get(chkMachineSegmentationSkeletonAll, 'Value');

        for aa=1:numel(chkMachineSegmentationSkeleton)

            set(chkMachineSegmentationSkeleton{aa}, 'Value', bObjectValue);

            if ~isempty(edtMachineSegmentationSkeleton{aa}) % Set Edit Box on\off

                if get(chkMachineSegmentationSkeleton{aa}, 'Value') == true

                    set(edtMachineSegmentationSkeleton{aa}, 'enable', 'on');
                else
                    set(edtMachineSegmentationSkeleton{aa}, 'enable', 'off');
                end
            end
        end
    end

    function chkMachineSegmentationSkeletonCallback(hObject, ~)

        dObjectOffset = get(hObject, 'UserData');

        bObjectValue = get(chkMachineSegmentationSkeleton{dObjectOffset}, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationSkeleton{dObjectOffset}, 'Value', ~bObjectValue);
        end

        bObjectValue = get(chkMachineSegmentationSkeleton{dObjectOffset}, 'Value');

        if ~isempty(edtMachineSegmentationSkeleton{dObjectOffset}) % Set Edit Box on\off

            if bObjectValue == true

                set(edtMachineSegmentationSkeleton{dObjectOffset}, 'enable', 'on');
            else
                set(edtMachineSegmentationSkeleton{dObjectOffset}, 'enable', 'off');
            end
        end

        % Verify if at least 1 object is active

        adOffset = find(cellfun( @(chkMachineSegmentationSkeleton) chkMachineSegmentationSkeleton.Value, chkMachineSegmentationSkeleton, 'uni', true ), true);

        if isempty(adOffset)
            set(chkMachineSegmentationSkeletonAll, 'Value', false);
        else
            set(chkMachineSegmentationSkeletonAll, 'Value', true);
        end

    end

    function edtMachineSegmentationSkeletonCallback(hObject, ~)

        dObjectOffset = get(hObject, 'UserData');

        % Extract asSkeletonName permited from to

        csEdtString = extractBetween(asSkeletonName{dObjectOffset},'[',']');

        dSkeletonObjectFrom = str2double(extractBefore(csEdtString,'-'));
        dSkeletonObjectTo   = str2double(extractAfter (csEdtString,'-'));

        csEditValue   = get(hObject, 'String');

        dCurrentObjectFrom = str2double(extractBefore(csEditValue,'-'));
        dCurrentObjectTo   = str2double(extractAfter (csEditValue,'-'));

        if isnan(dCurrentObjectFrom) && ... % Didn't find -
           isnan(dCurrentObjectTo)

            dCurrentObjectValue = str2double(csEditValue);
            if dCurrentObjectValue > dSkeletonObjectTo
                dCurrentObjectValue = dSkeletonObjectTo;
            end

            if dCurrentObjectValue < dSkeletonObjectFrom
                dCurrentObjectValue = dSkeletonObjectFrom;
            end

            if isnan(dCurrentObjectValue)
                sNewValue = sprintf('%d-%d', dSkeletonObjectFrom, dSkeletonObjectTo);
           else
                sNewValue = sprintf('%d-%d', dCurrentObjectValue, dCurrentObjectValue);
            end

            set(edtMachineSegmentationSkeleton{dObjectOffset}, 'String', sNewValue);
        else

            % Set from limit

            if isnan(dCurrentObjectFrom)
                dCurrentObjectFrom = dSkeletonObjectFrom;
            end

            if dCurrentObjectFrom > dCurrentObjectTo
                dCurrentObjectFrom = dCurrentObjectTo;
            end

            if dCurrentObjectFrom < dSkeletonObjectFrom
                dCurrentObjectFrom = dSkeletonObjectFrom;
            end

            if dCurrentObjectFrom > dSkeletonObjectTo
                dCurrentObjectFrom = dSkeletonObjectTo;
            end

            % Set to limit

            if isnan(dCurrentObjectTo)
                dCurrentObjectTo = dSkeletonObjectTo;
            end

            if dCurrentObjectTo < dCurrentObjectFrom
                dCurrentObjectTo = dCurrentObjectFrom;
            end

            if dCurrentObjectTo > dSkeletonObjectTo
                dCurrentObjectTo = dSkeletonObjectTo;
            end

            if dCurrentObjectTo < dSkeletonObjectFrom
                dCurrentObjectTo = dSkeletonObjectFrom;
            end

            sNewValue = sprintf('%d-%d', dCurrentObjectFrom, dCurrentObjectTo);
            set(edtMachineSegmentationSkeleton{dObjectOffset}, 'String', sNewValue);

        end

    end

    % Cardiovascular System

    function chkMachineSegmentationCardiovascularAllCallback(hObject, ~)

        bObjectValue = get(chkMachineSegmentationCardiovascularAll, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationCardiovascularAll, 'Value', ~bObjectValue);
        end

        bObjectValue = get(chkMachineSegmentationCardiovascularAll, 'Value');

        for aa=1:numel(chkMachineSegmentationCardiovascular)

            set(chkMachineSegmentationCardiovascular{aa}, 'Value', bObjectValue);
        end
    end

    function chkMachineSegmentationCardiovascularCallback(hObject, ~)

        dObjectOffset = get(hObject, 'UserData');

        bObjectValue = get(chkMachineSegmentationCardiovascular{dObjectOffset}, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationCardiovascular{dObjectOffset}, 'Value', ~bObjectValue);
        end

        % Verify if at least 1 object is active

        adOffset = find(cellfun( @(chkMachineSegmentationCardiovascular) chkMachineSegmentationCardiovascular.Value, chkMachineSegmentationCardiovascular, 'uni', true ), true);

        if isempty(adOffset)
            set(chkMachineSegmentationCardiovascularAll, 'Value', false);
        else
            set(chkMachineSegmentationCardiovascularAll, 'Value', true);
        end
    end

    % Other Organs

    function chkMachineSegmentationOtherOrgansAllCallback(hObject, ~)

        bObjectValue = get(chkMachineSegmentationOtherOrgansAll, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationOtherOrgansAll, 'Value', ~bObjectValue);
        end

        bObjectValue = get(chkMachineSegmentationOtherOrgansAll, 'Value');

        for aa=1:numel(chkMachineSegmentationOtherOrgans)

            set(chkMachineSegmentationOtherOrgans{aa}, 'Value', bObjectValue);
        end
    end

    function chkMachineSegmentationOtherOrgansCallback(hObject, ~)

        dObjectOffset = get(hObject, 'UserData');

        bObjectValue = get(chkMachineSegmentationOtherOrgans{dObjectOffset}, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationOtherOrgans{dObjectOffset}, 'Value', ~bObjectValue);
        end

        % Verify if at least 1 object is active

        adOffset = find(cellfun( @(chkMachineSegmentationOtherOrgans) chkMachineSegmentationOtherOrgans.Value, chkMachineSegmentationOtherOrgans, 'uni', true ), true);

        if isempty(adOffset)
            set(chkMachineSegmentationOtherOrgansAll, 'Value', false);
        else
            set(chkMachineSegmentationOtherOrgansAll, 'Value', true);
        end
    end

    % Gastrointestinal Tract

    function chkMachineSegmentationGastrointestinalTractAllCallback(hObject, ~)

        bObjectValue = get(chkMachineSegmentationGastrointestinalTractAll, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationGastrointestinalTractAll, 'Value', ~bObjectValue);
        end

        bObjectValue = get(chkMachineSegmentationGastrointestinalTractAll, 'Value');

        for aa=1:numel(chkMachineSegmentationGastrointestinalTract)

            set(chkMachineSegmentationGastrointestinalTract{aa}, 'Value', bObjectValue);
        end
    end

    function chkMachineSegmentationGastrointestinalTractCallback(hObject, ~)

        dObjectOffset = get(hObject, 'UserData');

        bObjectValue = get(chkMachineSegmentationGastrointestinalTract{dObjectOffset}, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationGastrointestinalTract{dObjectOffset}, 'Value', ~bObjectValue);
        end

        % Verify if at least 1 object is active

        adOffset = find(cellfun( @(chkMachineSegmentationGastrointestinalTract) chkMachineSegmentationGastrointestinalTract.Value, chkMachineSegmentationGastrointestinalTract, 'uni', true ), true);

        if isempty(adOffset)
            set(chkMachineSegmentationGastrointestinalTractAll, 'Value', false);
        else
            set(chkMachineSegmentationGastrointestinalTractAll, 'Value', true);
        end
    end

    % Muscles

    function chkMachineSegmentationMusclesAllCallback(hObject, ~)

        bObjectValue = get(chkMachineSegmentationMusclesAll, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationMusclesAll, 'Value', ~bObjectValue);
        end

        bObjectValue = get(chkMachineSegmentationMusclesAll, 'Value');

        for aa=1:numel(chkMachineSegmentationMuscles)

            set(chkMachineSegmentationMuscles{aa}, 'Value', bObjectValue);
        end
    end

    function chkMachineSegmentationMusclesCallback(hObject, ~)

        dObjectOffset = get(hObject, 'UserData');

        bObjectValue = get(chkMachineSegmentationMuscles{dObjectOffset}, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationMuscles{dObjectOffset}, 'Value', ~bObjectValue);
        end

        % Verify if at least 1 object is active

        adOffset = find(cellfun( @(chkMachineSegmentationMuscles) chkMachineSegmentationMuscles.Value, chkMachineSegmentationMuscles, 'uni', true ), true);

        if isempty(adOffset)
            set(chkMachineSegmentationMusclesAll, 'Value', false);
        else
            set(chkMachineSegmentationMusclesAll, 'Value', true);
        end
    end

    % Anonymization

    function chkMachineSegmentationAnonymizationAllCallback(hObject, ~)

        bObjectValue = get(chkMachineSegmentationAnonymizationAll, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationAnonymizationAll, 'Value', ~bObjectValue);
        end

        bObjectValue = get(chkMachineSegmentationAnonymizationAll, 'Value');

        for aa=1:numel(chkMachineSegmentationAnonymization)

            set(chkMachineSegmentationAnonymization{aa}, 'Value', bObjectValue);
        end
    end

    function chkMachineSegmentationAnonymizationCallback(hObject, ~)

        dObjectOffset = get(hObject, 'UserData');

        bObjectValue = get(chkMachineSegmentationAnonymization{dObjectOffset}, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationAnonymization{dObjectOffset}, 'Value', ~bObjectValue);
        end

        % Verify if at least 1 object is active

        adOffset = find(cellfun( @(chkMachineSegmentationAnonymization) chkMachineSegmentationAnonymization.Value, chkMachineSegmentationAnonymization, 'uni', true ), true);

        if isempty(adOffset)
            set(chkMachineSegmentationAnonymizationAll, 'Value', false);
        else
            set(chkMachineSegmentationAnonymizationAll, 'Value', true);
        end
    end

    % Tissue Type

    function chkMachineSegmentationTissueTypesAllCallback(hObject, ~)

        bObjectValue = get(chkMachineSegmentationTissueTypesAll, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationTissueTypesAll, 'Value', ~bObjectValue);
        end

        bObjectValue = get(chkMachineSegmentationTissueTypesAll, 'Value');

        for aa=1:numel(chkMachineSegmentationTissueTypes)

            set(chkMachineSegmentationTissueTypes{aa}, 'Value', bObjectValue);
        end
    end

    function chkMachineSegmentationTissueTypesCallback(hObject, ~)

        dObjectOffset = get(hObject, 'UserData');

        bObjectValue = get(chkMachineSegmentationTissueTypes{dObjectOffset}, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationTissueTypes{dObjectOffset}, 'Value', ~bObjectValue);
        end

        % Verify if at least 1 object is active

        adOffset = find(cellfun( @(chkMachineSegmentationTissueTypes) chkMachineSegmentationTissueTypes.Value, chkMachineSegmentationTissueTypes, 'uni', true ), true);

        if isempty(adOffset)
            set(chkMachineSegmentationTissueTypesAll, 'Value', false);
        else
            set(chkMachineSegmentationTissueTypesAll, 'Value', true);
        end
    end

    % Head Glands Cavities 

    function chkMachineSegmentationHeadGlandsCavitiesAllCallback(hObject, ~)

        bObjectValue = get(chkMachineSegmentationHeadGlandsCavitiesAll, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationHeadGlandsCavitiesAll, 'Value', ~bObjectValue);
        end

        bObjectValue = get(chkMachineSegmentationHeadGlandsCavitiesAll, 'Value');

        for aa=1:numel(chkMachineSegmentationHeadGlandsCavities)

            set(chkMachineSegmentationHeadGlandsCavities{aa}, 'Value', bObjectValue);
        end
    end

    function chkMachineSegmentationHeadGlandsCavitiesCallback(hObject, ~)

        dObjectOffset = get(hObject, 'UserData');

        bObjectValue = get(chkMachineSegmentationHeadGlandsCavities{dObjectOffset}, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationHeadGlandsCavities{dObjectOffset}, 'Value', ~bObjectValue);
        end

        % Verify if at least 1 object is active

        adOffset = find(cellfun( @(chkMachineSegmentationHeadGlandsCavities) chkMachineSegmentationHeadGlandsCavities.Value, chkMachineSegmentationHeadGlandsCavities, 'uni', true ), true);

        if isempty(adOffset)
            set(chkMachineSegmentationHeadGlandsCavitiesAll, 'Value', false);
        else
            set(chkMachineSegmentationHeadGlandsCavitiesAll, 'Value', true);
        end
    end

    % Head Muscles

    function chkMachineSegmentationHeadMusclesAllCallback(hObject, ~)

        bObjectValue = get(chkMachineSegmentationHeadMusclesAll, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationHeadMusclesAll, 'Value', ~bObjectValue);
        end

        bObjectValue = get(chkMachineSegmentationHeadMusclesAll, 'Value');

        for aa=1:numel(chkMachineSegmentationHeadMuscles)

            set(chkMachineSegmentationHeadMuscles{aa}, 'Value', bObjectValue);
        end
    end

    function chkMachineSegmentationHeadMusclesCallback(hObject, ~)

        dObjectOffset = get(hObject, 'UserData');

        bObjectValue = get(chkMachineSegmentationHeadMuscles{dObjectOffset}, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationHeadMuscles{dObjectOffset}, 'Value', ~bObjectValue);
        end

        % Verify if at least 1 object is active

        adOffset = find(cellfun( @(chkMachineSegmentationHeadMuscles) chkMachineSegmentationHeadMuscles.Value, chkMachineSegmentationHeadMuscles, 'uni', true ), true);

        if isempty(adOffset)
            set(chkMachineSegmentationHeadMusclesAll, 'Value', false);
        else
            set(chkMachineSegmentationHeadMusclesAll, 'Value', true);
        end
    end

    % Headneck Bones Vessels

    function chkMachineSegmentationHeadneckBonesVesselsAllCallback(hObject, ~)

        bObjectValue = get(chkMachineSegmentationHeadneckBonesVesselsAll, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationHeadneckBonesVesselsAll, 'Value', ~bObjectValue);
        end

        bObjectValue = get(chkMachineSegmentationHeadneckBonesVesselsAll, 'Value');

        for aa=1:numel(chkMachineSegmentationHeadneckBonesVessels)

            set(chkMachineSegmentationHeadneckBonesVessels{aa}, 'Value', bObjectValue);
        end
    end

    function chkMachineSegmentationHeadneckBonesVesselsCallback(hObject, ~)

        dObjectOffset = get(hObject, 'UserData');

        bObjectValue = get(chkMachineSegmentationHeadneckBonesVessels{dObjectOffset}, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationHeadneckBonesVessels{dObjectOffset}, 'Value', ~bObjectValue);
        end

        % Verify if at least 1 object is active

        adOffset = find(cellfun( @(chkMachineSegmentationHeadneckBonesVessels) chkMachineSegmentationHeadneckBonesVessels.Value, chkMachineSegmentationHeadneckBonesVessels, 'uni', true ), true);

        if isempty(adOffset)
            set(chkMachineSegmentationHeadneckBonesVesselsAll, 'Value', false);
        else
            set(chkMachineSegmentationHeadneckBonesVesselsAll, 'Value', true);
        end
    end

    % Headneck Muscles

    function chkMachineSegmentationHeadneckMusclesAllCallback(hObject, ~)

        bObjectValue = get(chkMachineSegmentationHeadneckMusclesAll, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationHeadneckMusclesAll, 'Value', ~bObjectValue);
        end

        bObjectValue = get(chkMachineSegmentationHeadneckMusclesAll, 'Value');

        for aa=1:numel(chkMachineSegmentationHeadneckMuscles)

            set(chkMachineSegmentationHeadneckMuscles{aa}, 'Value', bObjectValue);
        end
    end

    function chkMachineSegmentationHeadneckMusclesCallback(hObject, ~)

        dObjectOffset = get(hObject, 'UserData');

        bObjectValue = get(chkMachineSegmentationHeadneckMuscles{dObjectOffset}, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationHeadneckMuscles{dObjectOffset}, 'Value', ~bObjectValue);
        end

        % Verify if at least 1 object is active

        adOffset = find(cellfun( @(chkMachineSegmentationHeadneckMuscles) chkMachineSegmentationHeadneckMuscles.Value, chkMachineSegmentationHeadneckMuscles, 'uni', true ), true);

        if isempty(adOffset)
            set(chkMachineSegmentationHeadneckMusclesAll, 'Value', false);
        else
            set(chkMachineSegmentationHeadneckMusclesAll, 'Value', true);
        end
    end

    % Liver Vessels

    function chkMachineSegmentationLiverVesselsAllCallback(hObject, ~)

        bObjectValue = get(chkMachineSegmentationLiverVesselsAll, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationLiverVesselsAll, 'Value', ~bObjectValue);
        end

        bObjectValue = get(chkMachineSegmentationLiverVesselsAll, 'Value');

        for aa=1:numel(chkMachineSegmentationLiverVessels)

            set(chkMachineSegmentationLiverVessels{aa}, 'Value', bObjectValue);
        end
    end

    function chkMachineSegmentationLiverVesselsCallback(hObject, ~)

        dObjectOffset = get(hObject, 'UserData');

        bObjectValue = get(chkMachineSegmentationLiverVessels{dObjectOffset}, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationLiverVessels{dObjectOffset}, 'Value', ~bObjectValue);
        end

        % Verify if at least 1 object is active

        adOffset = find(cellfun( @(chkMachineSegmentationLiverVessels) chkMachineSegmentationLiverVessels.Value, chkMachineSegmentationLiverVessels, 'uni', true ), true);

        if isempty(adOffset)
            set(chkMachineSegmentationLiverVesselsAll, 'Value', false);
        else
            set(chkMachineSegmentationLiverVesselsAll, 'Value', true);
        end
    end

    % Liver Segments

    function chkMachineSegmentationLiverSegmentsAllCallback(hObject, ~)

        bObjectValue = get(chkMachineSegmentationLiverSegmentsAll, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationLiverSegmentsAll, 'Value', ~bObjectValue);
        end

        bObjectValue = get(chkMachineSegmentationLiverSegmentsAll, 'Value');

        for aa=1:numel(chkMachineSegmentationLiverSegments)

            set(chkMachineSegmentationLiverSegments{aa}, 'Value', bObjectValue);
        end
    end

    function chkMachineSegmentationLiverSegmentsCallback(hObject, ~)

        dObjectOffset = get(hObject, 'UserData');

        bObjectValue = get(chkMachineSegmentationLiverSegments{dObjectOffset}, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationLiverSegments{dObjectOffset}, 'Value', ~bObjectValue);
        end

        % Verify if at least 1 object is active

        adOffset = find(cellfun( @(chkMachineSegmentationLiverSegments) chkMachineSegmentationLiverSegments.Value, chkMachineSegmentationLiverSegments, 'uni', true ), true);

        if isempty(adOffset)
            set(chkMachineSegmentationLiverSegmentsAll, 'Value', false);
        else
            set(chkMachineSegmentationLiverSegmentsAll, 'Value', true);
        end
    end

    % Brain Structures

    function chkMachineSegmentationBrainStructuresAllCallback(hObject, ~)

        bObjectValue = get(chkMachineSegmentationBrainStructuresAll, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationBrainStructuresAll, 'Value', ~bObjectValue);
        end

        bObjectValue = get(chkMachineSegmentationBrainStructuresAll, 'Value');

        for aa=1:numel(chkMachineSegmentationBrainStructures)

            set(chkMachineSegmentationBrainStructures{aa}, 'Value', bObjectValue);
        end
    end

    function chkMachineSegmentationBrainStructuresCallback(hObject, ~)

        dObjectOffset = get(hObject, 'UserData');

        bObjectValue = get(chkMachineSegmentationBrainStructures{dObjectOffset}, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationBrainStructures{dObjectOffset}, 'Value', ~bObjectValue);
        end

        % Verify if at least 1 object is active

        adOffset = find(cellfun( @(chkMachineSegmentationBrainStructures) chkMachineSegmentationBrainStructures.Value, chkMachineSegmentationBrainStructures, 'uni', true ), true);

        if isempty(adOffset)
            set(chkMachineSegmentationBrainStructuresAll, 'Value', false);
        else
            set(chkMachineSegmentationBrainStructuresAll, 'Value', true);
        end
    end

    % Body

    function chkMachineSegmentationBodyAllCallback(hObject, ~)

        bObjectValue = get(chkMachineSegmentationBodyAll, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationBodyAll, 'Value', ~bObjectValue);
        end

        bObjectValue = get(chkMachineSegmentationBodyAll, 'Value');

        for aa=1:numel(chkMachineSegmentationBody)

            set(chkMachineSegmentationBody{aa}, 'Value', bObjectValue);
        end
    end

    function chkMachineSegmentationBodyCallback(hObject, ~)

        dObjectOffset = get(hObject, 'UserData');

        bObjectValue = get(chkMachineSegmentationBody{dObjectOffset}, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationBody{dObjectOffset}, 'Value', ~bObjectValue);
        end

        % Verify if at least 1 object is active

        adOffset = find(cellfun( @(chkMachineSegmentationBody) chkMachineSegmentationBody.Value, chkMachineSegmentationBody, 'uni', true ), true);

        if isempty(adOffset)
            set(chkMachineSegmentationBodyAll, 'Value', false);
        else
            set(chkMachineSegmentationBodyAll, 'Value', true);
        end
    end

    % Lung Vessels

    function chkMachineSegmentationLungVesselsAllCallback(hObject, ~)

        bObjectValue = get(chkMachineSegmentationLungVesselsAll, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationLungVesselsAll, 'Value', ~bObjectValue);
        end

        bObjectValue = get(chkMachineSegmentationLungVesselsAll, 'Value');

        for aa=1:numel(chkMachineSegmentationLungVessels)

            set(chkMachineSegmentationLungVessels{aa}, 'Value', bObjectValue);
        end
    end

    function chkMachineSegmentationLungVesselsCallback(hObject, ~)

        dObjectOffset = get(hObject, 'UserData');

        bObjectValue = get(chkMachineSegmentationLungVessels{dObjectOffset}, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationLungVessels{dObjectOffset}, 'Value', ~bObjectValue);
        end

        % Verify if at least 1 object is active

        adOffset = find(cellfun( @(chkMachineSegmentationLungVessels) chkMachineSegmentationLungVessels.Value, chkMachineSegmentationLungVessels, 'uni', true ), true);

        if isempty(adOffset)
            set(chkMachineSegmentationLungVesselsAll, 'Value', false);
        else
            set(chkMachineSegmentationLungVesselsAll, 'Value', true);
        end
    end

    % Cerebral Bleed

    function chkMachineSegmentationCerebralBleedAllCallback(hObject, ~)

        bObjectValue = get(chkMachineSegmentationCerebralBleedAll, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationCerebralBleedAll, 'Value', ~bObjectValue);
        end

        bObjectValue = get(chkMachineSegmentationCerebralBleedAll, 'Value');

        for aa=1:numel(chkMachineSegmentationCerebralBleed)

            set(chkMachineSegmentationCerebralBleed{aa}, 'Value', bObjectValue);
        end
    end

    function chkMachineSegmentationCerebralBleedCallback(hObject, ~)

        dObjectOffset = get(hObject, 'UserData');

        bObjectValue = get(chkMachineSegmentationCerebralBleed{dObjectOffset}, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationCerebralBleed{dObjectOffset}, 'Value', ~bObjectValue);
        end

        % Verify if at least 1 object is active

        adOffset = find(cellfun( @(chkMachineSegmentationCerebralBleed) chkMachineSegmentationCerebralBleed.Value, chkMachineSegmentationCerebralBleed, 'uni', true ), true);

        if isempty(adOffset)
            set(chkMachineSegmentationCerebralBleedAll, 'Value', false);
        else
            set(chkMachineSegmentationCerebralBleedAll, 'Value', true);
        end
    end

    % Hip Implant

    function chkMachineSegmentationHipImplantAllCallback(hObject, ~)

        bObjectValue = get(chkMachineSegmentationHipImplantAll, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationHipImplantAll, 'Value', ~bObjectValue);
        end

        bObjectValue = get(chkMachineSegmentationHipImplantAll, 'Value');

        for aa=1:numel(chkMachineSegmentationHipImplant)

            set(chkMachineSegmentationHipImplant{aa}, 'Value', bObjectValue);
        end
    end

    function chkMachineSegmentationHipImplantCallback(hObject, ~)

        dObjectOffset = get(hObject, 'UserData');

        bObjectValue = get(chkMachineSegmentationHipImplant{dObjectOffset}, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationHipImplant{dObjectOffset}, 'Value', ~bObjectValue);
        end

        % Verify if at least 1 object is active

        adOffset = find(cellfun( @(chkMachineSegmentationHipImplant) chkMachineSegmentationHipImplant.Value, chkMachineSegmentationHipImplant, 'uni', true ), true);

        if isempty(adOffset)
            set(chkMachineSegmentationHipImplantAll, 'Value', false);
        else
            set(chkMachineSegmentationHipImplantAll, 'Value', true);
        end
    end

    % Coronary Arteries

    function chkMachineSegmentationCoronaryArteriesAllCallback(hObject, ~)

        bObjectValue = get(chkMachineSegmentationCoronaryArteriesAll, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationCoronaryArteriesAll, 'Value', ~bObjectValue);
        end

        bObjectValue = get(chkMachineSegmentationCoronaryArteriesAll, 'Value');

        for aa=1:numel(chkMachineSegmentationCoronaryArteries)

            set(chkMachineSegmentationCoronaryArteries{aa}, 'Value', bObjectValue);
        end
    end

    function chkMachineSegmentationCoronaryArteriesCallback(hObject, ~)

        dObjectOffset = get(hObject, 'UserData');

        bObjectValue = get(chkMachineSegmentationCoronaryArteries{dObjectOffset}, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationCoronaryArteries{dObjectOffset}, 'Value', ~bObjectValue);
        end

        % Verify if at least 1 object is active

        adOffset = find(cellfun( @(chkMachineSegmentationCoronaryArteries) chkMachineSegmentationCoronaryArteries.Value, chkMachineSegmentationCoronaryArteries, 'uni', true ), true);

        if isempty(adOffset)
            set(chkMachineSegmentationCoronaryArteriesAll, 'Value', false);
        else
            set(chkMachineSegmentationCoronaryArteriesAll, 'Value', true);
        end
    end

    % Heartchambers Highres

    function chkMachineSegmentationHeartchambersHighresAllCallback(hObject, ~)

        bObjectValue = get(chkMachineSegmentationHeartchambersHighresAll, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationHeartchambersHighresAll, 'Value', ~bObjectValue);
        end

        bObjectValue = get(chkMachineSegmentationHeartchambersHighresAll, 'Value');

        for aa=1:numel(chkMachineSegmentationHeartchambersHighres)

            set(chkMachineSegmentationHeartchambersHighres{aa}, 'Value', bObjectValue);
        end
    end

    function chkMachineSegmentationHeartchambersHighresCallback(hObject, ~)

        dObjectOffset = get(hObject, 'UserData');

        bObjectValue = get(chkMachineSegmentationHeartchambersHighres{dObjectOffset}, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationHeartchambersHighres{dObjectOffset}, 'Value', ~bObjectValue);
        end

        % Verify if at least 1 object is active

        adOffset = find(cellfun( @(chkMachineSegmentationHeartchambersHighres) chkMachineSegmentationHeartchambersHighres.Value, chkMachineSegmentationHeartchambersHighres, 'uni', true ), true);

        if isempty(adOffset)
            set(chkMachineSegmentationHeartchambersHighresAll, 'Value', false);
        else
            set(chkMachineSegmentationHeartchambersHighresAll, 'Value', true);
        end
    end

    % Appendicular Bones

    function chkMachineSegmentationAppendicularBonesAllCallback(hObject, ~)

        bObjectValue = get(chkMachineSegmentationAppendicularBonesAll, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationAppendicularBonesAll, 'Value', ~bObjectValue);
        end

        bObjectValue = get(chkMachineSegmentationAppendicularBonesAll, 'Value');

        for aa=1:numel(chkMachineSegmentationAppendicularBones)

            set(chkMachineSegmentationAppendicularBones{aa}, 'Value', bObjectValue);
        end
    end

    function chkMachineSegmentationAppendicularBonesCallback(hObject, ~)

        dObjectOffset = get(hObject, 'UserData');

        bObjectValue = get(chkMachineSegmentationAppendicularBones{dObjectOffset}, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationAppendicularBones{dObjectOffset}, 'Value', ~bObjectValue);
        end

        % Verify if at least 1 object is active

        adOffset = find(cellfun( @(chkMachineSegmentationAppendicularBones) chkMachineSegmentationAppendicularBones.Value, chkMachineSegmentationAppendicularBones, 'uni', true ), true);

        if isempty(adOffset)
            set(chkMachineSegmentationAppendicularBonesAll, 'Value', false);
        else
            set(chkMachineSegmentationAppendicularBonesAll, 'Value', true);
        end
    end

    % Pleural Pericard Effusion

    function chkMachineSegmentationPleuralPericardEffusionAllCallback(hObject, ~)

        bObjectValue = get(chkMachineSegmentationPleuralPericardEffusionAll, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationPleuralPericardEffusionAll, 'Value', ~bObjectValue);
        end

        bObjectValue = get(chkMachineSegmentationPleuralPericardEffusionAll, 'Value');

        for aa=1:numel(chkMachineSegmentationPleuralPericardEffusion)

            set(chkMachineSegmentationPleuralPericardEffusion{aa}, 'Value', bObjectValue);
        end
    end

    function chkMachineSegmentationPleuralPericardEffusionCallback(hObject, ~)

        dObjectOffset = get(hObject, 'UserData');

        bObjectValue = get(chkMachineSegmentationPleuralPericardEffusion{dObjectOffset}, 'Value');

        if strcmpi(get(hObject, 'Style'), 'text')

            set(chkMachineSegmentationPleuralPericardEffusion{dObjectOffset}, 'Value', ~bObjectValue);
        end

        % Verify if at least 1 object is active

        adOffset = find(cellfun( @(chkMachineSegmentationPleuralPericardEffusion) chkMachineSegmentationPleuralPericardEffusion.Value, chkMachineSegmentationPleuralPericardEffusion, 'uni', true ), true);

        if isempty(adOffset)
            set(chkMachineSegmentationPleuralPericardEffusionAll, 'Value', false);
        else
            set(chkMachineSegmentationPleuralPericardEffusionAll, 'Value', true);
        end
    end

    function popMachineSegmentationProtocolCallback(hObject, ~)

        set(popMachineSegmentationProtocol          , 'Value', get(hObject, 'Value'));
        
        if CLASSES_CT == true

            set(popMachineSegmentationProtocolNext      , 'Value', get(hObject, 'Value'));
            set(popMachineSegmentationProtocolSecondNext, 'Value', get(hObject, 'Value'));
        end
    end

    % Delete

    function deleteMachineSegmentationProtocolCallback(hObject, ~)

        sRootPath = viewerRootPath('get');
        sProtocolPath = sprintf('%s/protocol/', sRootPath);

        f = java.io.File(char(sProtocolPath));
        asListing = f.listFiles();

        sXmlProtocolFileName = '';

        for kk=1:numel(asListing) % If file exist
            if contains(char(asListing(kk)), 'machineLearning.xml')
                sXmlProtocolFileName = char(asListing(kk));
                break;
            end
        end

        if isa(hObject, 'matlab.ui.control.UIControl')

            asProtocolList  = get(popMachineSegmentationProtocol, 'String');
            dProtocolOffset = get(popMachineSegmentationProtocol, 'Value');

            sProtocolName = strtrim(asProtocolList{dProtocolOffset});
        else
            sProtocolName = hObject;
        end

        if ~isempty(sXmlProtocolFileName) && ...  % Protocol file exist
           ~isempty(sProtocolName)

            st = xml2struct(sXmlProtocolFileName);
            if isfield (st.machineLearning, 'protocol')

                dNbProtocol = numel(st.machineLearning.protocol);
                if dNbProtocol > 1
                    for pp=1:dNbProtocol
                        if strcmpi(st.machineLearning.protocol{1,pp}.protocolName.Text, sProtocolName)
                            st.machineLearning.protocol{1,pp}=[];
                            st.machineLearning.protocol(cellfun(@isempty, st.machineLearning.protocol)) = [];
                            break;
                        end
                    end
                else
                    if strcmpi(st.machineLearning.protocol.protocolName.Text, sProtocolName)
                        st.machineLearning.protocol=[];
                        st.machineLearning = rmfield(st.machineLearning, 'protocol');
                    end
                end
            end

            struct2xml(st, sXmlProtocolFileName);

            set(popMachineSegmentationProtocol, 'Value', 1);
            set(popMachineSegmentationProtocol, 'String', getMachineLearningProtocolName());

            if CLASSES_CT == true

                set(popMachineSegmentationProtocolNext, 'Value', 1);
                set(popMachineSegmentationProtocolNext, 'String', getMachineLearningProtocolName());  
    
                set(popMachineSegmentationProtocolSecondNext, 'Value', 1);
                set(popMachineSegmentationProtocolSecondNext, 'String', getMachineLearningProtocolName());              
            end
        end

    end

    % Load

    function loadMachineSegmentationProtocolCallback(hObject, ~)

        % Refer saveMachineSegmentationProtocol() for the saved element list

        sRootPath = viewerRootPath('get');
        sProtocolPath = sprintf('%s/protocol/', sRootPath);

        f = java.io.File(char(sProtocolPath));
        asListing = f.listFiles();

        sXmlProtocolFileName = '';

        for kk=1:numel(asListing) % If file exist
            if contains(char(asListing(kk)), 'machineLearning.xml')
                sXmlProtocolFileName = char(asListing(kk));
                break;
            end
        end

        if isa(hObject, 'matlab.ui.control.UIControl')

            asProtocolList  = get(popMachineSegmentationProtocol, 'String');
            dProtocolOffset = get(popMachineSegmentationProtocol, 'Value');

            sProtocolName = asProtocolList{dProtocolOffset};
        else
            sProtocolName = hObject;
            asProtocolList = get(popMachineSegmentationProtocol, 'String');
            
            idx = find(strcmpi(asProtocolList, sProtocolName), 1);
            if ~isempty(idx)
                set(popMachineSegmentationProtocol, 'Value', idx);
            end
        end

        if ~isempty(sXmlProtocolFileName)  % Protocol file exist

            st = xml2struct(sXmlProtocolFileName);
            if isfield (st.machineLearning, 'protocol')

                stMachineLearning = [];

                dNbProtocol = numel(st.machineLearning.protocol);
                if dNbProtocol > 1
                    for pp=1:dNbProtocol
                        if strcmpi(st.machineLearning.protocol{1,pp}.protocolName.Text, sProtocolName)
                            stMachineLearning = st.machineLearning.protocol{1,pp};
                        end
                    end
                else
                    if strcmpi(st.machineLearning.protocol.protocolName.Text, sProtocolName)
                        stMachineLearning = st.machineLearning.protocol;
                    end
                end

                if ~isempty(stMachineLearning)

                    % Skelton

                    if isfield(stMachineLearning, 'skelton')
    
                        for aa=1:numel(stMachineLearning.skelton.field)
    
                            dOffset = find(strcmpi(asSkeletonName, stMachineLearning.skelton.field{1, aa}.fieldName.Text), 1);
    
                            if ~isempty(dOffset)
    
                                set(chkMachineSegmentationSkeleton{dOffset}, 'Value', str2double(stMachineLearning.skelton.field{1, aa}.fieldValue.Text));
    
                                if CLASSES_CT == true
    
                                    if ~isempty(edtMachineSegmentationSkeleton{aa}) % Set Edit Box
        
                                        if isfield( stMachineLearning.skelton.field{1,aa}, 'field')
        
                                            set(edtMachineSegmentationSkeleton{dOffset}, 'String', stMachineLearning.skelton.field{1,aa}.field.fieldValue.Text)
        
                                            if get(chkMachineSegmentationSkeleton{aa}, 'Value') == true
                                                set(edtMachineSegmentationSkeleton{dOffset}, 'Enable', 'on');
                                            else
                                                set(edtMachineSegmentationSkeleton{dOffset}, 'Enable', 'off');
                                            end
                                        end
                                    end
                                end
                            end
                        end
    
                        % Verify if at least 1 object is active
    
                        adOffset = find(cellfun( @(chkMachineSegmentationSkeleton) chkMachineSegmentationSkeleton.Value, chkMachineSegmentationSkeleton, 'uni', true ), true);
    
                        if isempty(adOffset)
                            set(chkMachineSegmentationSkeletonAll, 'Value', false);
                        else
                            set(chkMachineSegmentationSkeletonAll, 'Value', true);
                        end
                    end

                    % Cardiovascular System

                    if isfield(stMachineLearning, 'cardiovascular')
    
                        for bb=1:numel(stMachineLearning.cardiovascular.field)
    
                            dOffset = find(strcmpi(asCardiovascularName, stMachineLearning.cardiovascular.field{1, bb}.fieldName.Text), 1);
    
                            if ~isempty(dOffset)
                                set(chkMachineSegmentationCardiovascular{dOffset}, 'Value', str2double(stMachineLearning.cardiovascular.field{1, bb}.fieldValue.Text));
                            end
                        end
    
                        % Verify if at least 1 object is active
    
                        adOffset = find(cellfun( @(chkMachineSegmentationCardiovascular) chkMachineSegmentationCardiovascular.Value, chkMachineSegmentationCardiovascular, 'uni', true ), true);
    
                        if isempty(adOffset)
                            set(chkMachineSegmentationCardiovascularAll, 'Value', false);
                        else
                            set(chkMachineSegmentationCardiovascularAll, 'Value', true);
                        end
                    end

                    % Other Organs

                    if isfield(stMachineLearning, 'otherOrgans')

                        for cc=1:numel(stMachineLearning.otherOrgans.field)
    
                            dOffset = find(strcmpi(asOtherOrgansName, stMachineLearning.otherOrgans.field{1, cc}.fieldName.Text), 1);
    
                            if ~isempty(dOffset)
                                set(chkMachineSegmentationOtherOrgans{dOffset}, 'Value', str2double(stMachineLearning.otherOrgans.field{1, cc}.fieldValue.Text));
                            end
                        end
    
                        % Verify if at least 1 object is active
    
                        adOffset = find(cellfun( @(chkMachineSegmentationOtherOrgans) chkMachineSegmentationOtherOrgans.Value, chkMachineSegmentationOtherOrgans, 'uni', true ), true);
    
                        if isempty(adOffset)
                            set(chkMachineSegmentationOtherOrgansAll, 'Value', false);
                        else
                            set(chkMachineSegmentationOtherOrgansAll, 'Value', true);
                        end
                    end

                    % Gastrointestinal Tract

                    if CLASSES_CT == true

                        if isfield(stMachineLearning, 'gastrointestinal')

                            for dd=1:numel(stMachineLearning.gastrointestinal.field)
        
                                dOffset = find(strcmpi(asGastrointestinalTractName, stMachineLearning.gastrointestinal.field{1, dd}.fieldName.Text), 1);
        
                                if ~isempty(dOffset)
                                    set(chkMachineSegmentationGastrointestinalTract{dOffset}, 'Value', str2double(stMachineLearning.gastrointestinal.field{1, dd}.fieldValue.Text));
                                end
                            end
        
                            % Verify if at least 1 object is active
        
                            adOffset = find(cellfun( @(chkMachineSegmentationGastrointestinalTract) chkMachineSegmentationGastrointestinalTract.Value, chkMachineSegmentationGastrointestinalTract, 'uni', true ), true);
        
                            if isempty(adOffset)
                                set(chkMachineSegmentationGastrointestinalTractAll, 'Value', false);
                            else
                                set(chkMachineSegmentationGastrointestinalTractAll, 'Value', true);
                            end
                        end
                    end

                    % Muscles

                    if CLASSES_CT == true

                        if isfield(stMachineLearning, 'muscles')
    
                            for ee=1:numel(stMachineLearning.muscles.field)
        
                                dOffset = find(strcmpi(asMusclesName, stMachineLearning.muscles.field{1, ee}.fieldName.Text), 1);
        
                                if ~isempty(dOffset)
                                    set(chkMachineSegmentationMuscles{dOffset}, 'Value', str2double(stMachineLearning.muscles.field{1, ee}.fieldValue.Text));
                                end
                            end
        
                            % Verify if at least 1 object is active
        
                            adOffset = find(cellfun( @(chkMachineSegmentationMuscles) chkMachineSegmentationMuscles.Value, chkMachineSegmentationMuscles, 'uni', true ), true);
        
                            if isempty(adOffset)
                                set(chkMachineSegmentationMusclesAll, 'Value', false);
                            else
                                set(chkMachineSegmentationMusclesAll, 'Value', true);
                            end
                        end
                    end

                    % Anonymization

                    if CLASSES_CT == true

                        if isfield(stMachineLearning, 'anonymization')
    
                            for ee=1:numel(stMachineLearning.anonymization.field)
        
                                if isscalar(stMachineLearning.anonymization.field)
                                    dOffset = find(strcmpi(asAnonymizationName, stMachineLearning.anonymization.field.fieldName.Text), 1);
                                else
                                    dOffset = find(strcmpi(asAnonymizationName, stMachineLearning.anonymization.field{1, ee}.fieldName.Text), 1);
                                end
        
                                if ~isempty(dOffset)
                                    if isscalar(stMachineLearning.anonymization.field)
                                        set(chkMachineSegmentationAnonymization{dOffset}, 'Value', str2double(stMachineLearning.anonymization.field.fieldValue.Text));
                                    else
                                        set(chkMachineSegmentationAnonymization{dOffset}, 'Value', str2double(stMachineLearning.anonymization.field{1, ee}.fieldValue.Text));
                                    end
                                end
                            end
        
                            % Verify if at least 1 object is active
        
                            adOffset = find(cellfun( @(chkMachineSegmentationAnonymization) chkMachineSegmentationAnonymization.Value, chkMachineSegmentationAnonymization, 'uni', true ), true);
        
                            if isempty(adOffset)
                                set(chkMachineSegmentationAnonymizationAll, 'Value', false);
                            else
                                set(chkMachineSegmentationAnonymizationAll, 'Value', true);
                            end
                        end
                    end

                    % Tissue Types

                    if isfield(stMachineLearning, 'tissueTypes')

                        for ee=1:numel(stMachineLearning.tissueTypes.field)
    
                            dOffset = find(strcmpi(asTissueTypesName, stMachineLearning.tissueTypes.field{1, ee}.fieldName.Text), 1);
    
                            if ~isempty(dOffset)
                                set(chkMachineSegmentationTissueTypes{dOffset}, 'Value', str2double(stMachineLearning.tissueTypes.field{1, ee}.fieldValue.Text));
                            end
                        end
    
                        % Verify if at least 1 object is active
    
                        adOffset = find(cellfun( @(chkMachineSegmentationTissueTypes) chkMachineSegmentationTissueTypes.Value, chkMachineSegmentationTissueTypes, 'uni', true ), true);
    
                        if isempty(adOffset)
                            set(chkMachineSegmentationTissueTypesAll, 'Value', false);
                        else
                            set(chkMachineSegmentationTissueTypesAll, 'Value', true);
                        end
                    end

                    % Head Glands Cavities 

                    if CLASSES_CT == true

                        if isfield(stMachineLearning, 'headGlandsCavities')
    
                            for ee=1:numel(stMachineLearning.headGlandsCavities.field)
        
                                dOffset = find(strcmpi(asHeadGlandsCavitiesName, stMachineLearning.headGlandsCavities.field{1, ee}.fieldName.Text), 1);
        
                                if ~isempty(dOffset)
                                    set(chkMachineSegmentationHeadGlandsCavities{dOffset}, 'Value', str2double(stMachineLearning.headGlandsCavities.field{1, ee}.fieldValue.Text));
                                end
                            end
        
                            % Verify if at least 1 object is active
        
                            adOffset = find(cellfun( @(chkMachineSegmentationHeadGlandsCavities) chkMachineSegmentationHeadGlandsCavities.Value, chkMachineSegmentationHeadGlandsCavities, 'uni', true ), true);
        
                            if isempty(adOffset)
                                set(chkMachineSegmentationHeadGlandsCavitiesAll, 'Value', false);
                            else
                                set(chkMachineSegmentationHeadGlandsCavitiesAll, 'Value', true);
                            end
                        end
                    end

                    % Head Muscles

                    if CLASSES_CT == true

                        if isfield(stMachineLearning, 'headMuscles')
    
                            for ee=1:numel(stMachineLearning.headMuscles.field)
        
                                dOffset = find(strcmpi(asHeadMusclesName, stMachineLearning.headMuscles.field{1, ee}.fieldName.Text), 1);
        
                                if ~isempty(dOffset)
                                    set(chkMachineSegmentationHeadMuscles{dOffset}, 'Value', str2double(stMachineLearning.headMuscles.field{1, ee}.fieldValue.Text));
                                end
                            end
        
                            % Verify if at least 1 object is active
        
                            adOffset = find(cellfun( @(chkMachineSegmentationHeadMuscles) chkMachineSegmentationHeadMuscles.Value, chkMachineSegmentationHeadMuscles, 'uni', true ), true);
        
                            if isempty(adOffset)
                                set(chkMachineSegmentationHeadMusclesAll, 'Value', false);
                            else
                                set(chkMachineSegmentationHeadMusclesAll, 'Value', true);
                            end
                        end
                    end

                    % Headneck Bones Vessels

                    if CLASSES_CT == true

                        if isfield(stMachineLearning, 'headneckBonesVessels')
    
                            for ee=1:numel(stMachineLearning.headneckBonesVessels.field)
        
                                dOffset = find(strcmpi(asHeadneckBonesVesselsName, stMachineLearning.headneckBonesVessels.field{1, ee}.fieldName.Text), 1);
        
                                if ~isempty(dOffset)
                                    set(chkMachineSegmentationHeadneckBonesVessels{dOffset}, 'Value', str2double(stMachineLearning.headneckBonesVessels.field{1, ee}.fieldValue.Text));
                                end
                            end
        
                            % Verify if at least 1 object is active
        
                            adOffset = find(cellfun( @(chkMachineSegmentationHeadneckBonesVessels) chkMachineSegmentationHeadneckBonesVessels.Value, chkMachineSegmentationHeadneckBonesVessels, 'uni', true ), true);
        
                            if isempty(adOffset)
                                set(chkMachineSegmentationHeadneckBonesVesselsAll, 'Value', false);
                            else
                                set(chkMachineSegmentationHeadneckBonesVesselsAll, 'Value', true);
                            end
                        end
                    end

                    % Headneck Muscles

                    if CLASSES_CT == true

                        if isfield(stMachineLearning, 'headneckMuscles')
    
                            for ee=1:numel(stMachineLearning.headneckMuscles.field)
        
                                dOffset = find(strcmpi(asHeadneckMusclesName, stMachineLearning.headneckMuscles.field{1, ee}.fieldName.Text), 1);
        
                                if ~isempty(dOffset)
                                    set(chkMachineSegmentationHeadneckMuscles{dOffset}, 'Value', str2double(stMachineLearning.headneckMuscles.field{1, ee}.fieldValue.Text));
                                end
                            end
        
                            % Verify if at least 1 object is active
        
                            adOffset = find(cellfun( @(chkMachineSegmentationHeadneckMuscles) chkMachineSegmentationHeadneckMuscles.Value, chkMachineSegmentationHeadneckMuscles, 'uni', true ), true);
        
                            if isempty(adOffset)
                                set(chkMachineSegmentationHeadneckMusclesAll, 'Value', false);
                            else
                                set(chkMachineSegmentationHeadneckMusclesAll, 'Value', true);
                            end
                        end
                    end

                    % Liver Vessels

                    if CLASSES_CT == true

                        if isfield(stMachineLearning, 'liverVessels')
    
                            for ee=1:numel(stMachineLearning.liverVessels.field)
        
                                dOffset = find(strcmpi(asLiverVesselsName, stMachineLearning.liverVessels.field{1, ee}.fieldName.Text), 1);
        
                                if ~isempty(dOffset)
                                    set(chkMachineSegmentationLiverVessels{dOffset}, 'Value', str2double(stMachineLearning.liverVessels.field{1, ee}.fieldValue.Text));
                                end
                            end
        
                            % Verify if at least 1 object is active
        
                            adOffset = find(cellfun( @(chkMachineSegmentationLiverVessels) chkMachineSegmentationLiverVessels.Value, chkMachineSegmentationLiverVessels, 'uni', true ), true);
        
                            if isempty(adOffset)
                                set(chkMachineSegmentationLiverVesselsAll, 'Value', false);
                            else
                                set(chkMachineSegmentationLiverVesselsAll, 'Value', true);
                            end
                        end
                    end

                    % Liver Segments

                    if isfield(stMachineLearning, 'liverSegments')

                        for ee=1:numel(stMachineLearning.liverSegments.field)
    
                            dOffset = find(strcmpi(asLiverSegmentsName, stMachineLearning.liverSegments.field{1, ee}.fieldName.Text), 1);
    
                            if ~isempty(dOffset)
                                set(chkMachineSegmentationLiverSegments{dOffset}, 'Value', str2double(stMachineLearning.liverSegments.field{1, ee}.fieldValue.Text));
                            end
                        end
    
                        % Verify if at least 1 object is active
    
                        adOffset = find(cellfun( @(chkMachineSegmentationLiverSegments) chkMachineSegmentationLiverSegments.Value, chkMachineSegmentationLiverSegments, 'uni', true ), true);
    
                        if isempty(adOffset)
                            set(chkMachineSegmentationLiverSegmentsAll, 'Value', false);
                        else
                            set(chkMachineSegmentationLiverSegmentsAll, 'Value', true);
                        end
                    end

                    % Brain Structures

                    if CLASSES_CT == true

                        if isfield(stMachineLearning, 'brainStructures')
    
                            for ee=1:numel(stMachineLearning.brainStructures.field)
        
                                dOffset = find(strcmpi(asBrainStructuresName, stMachineLearning.brainStructures.field{1, ee}.fieldName.Text), 1);
        
                                if ~isempty(dOffset)
                                    set(chkMachineSegmentationBrainStructures{dOffset}, 'Value', str2double(stMachineLearning.brainStructures.field{1, ee}.fieldValue.Text));
                                end
                            end
        
                            % Verify if at least 1 object is active
        
                            adOffset = find(cellfun( @(chkMachineSegmentationBrainStructures) chkMachineSegmentationBrainStructures.Value, chkMachineSegmentationBrainStructures, 'uni', true ), true);
        
                            if isempty(adOffset)
                                set(chkMachineSegmentationBrainStructuresAll, 'Value', false);
                            else
                                set(chkMachineSegmentationBrainStructuresAll, 'Value', true);
                            end
                        end
                    end
                    
                    % Body 

                    if CLASSES_CT == true

                        if isfield(stMachineLearning, 'body')
    
                            for ee=1:numel(stMachineLearning.body.field)
        
                                dOffset = find(strcmpi(asBodyName, stMachineLearning.body.field{1, ee}.fieldName.Text), 1);
        
                                if ~isempty(dOffset)
                                    set(chkMachineSegmentationBody{dOffset}, 'Value', str2double(stMachineLearning.body.field{1, ee}.fieldValue.Text));
                                end
                            end
        
                            % Verify if at least 1 object is active
        
                            adOffset = find(cellfun( @(chkMachineSegmentationBody) chkMachineSegmentationBody.Value, chkMachineSegmentationBody, 'uni', true ), true);
        
                            if isempty(adOffset)
                                set(chkMachineSegmentationBodyAll, 'Value', false);
                            else
                                set(chkMachineSegmentationBodyAll, 'Value', true);
                            end
                        end
                    end

                    % LungVessels 

                    if CLASSES_CT == true

                        if isfield(stMachineLearning, 'lungVessels')
    
                            for ee=1:numel(stMachineLearning.lungVessels.field)
        
                                dOffset = find(strcmpi(asLungVesselsName, stMachineLearning.lungVessels.field{1, ee}.fieldName.Text), 1);
        
                                if ~isempty(dOffset)
                                    set(chkMachineSegmentationLungVessels{dOffset}, 'Value', str2double(stMachineLearning.lungVessels.field{1, ee}.fieldValue.Text));
                                end
                            end
        
                            % Verify if at least 1 object is active
        
                            adOffset = find(cellfun( @(chkMachineSegmentationLungVessels) chkMachineSegmentationLungVessels.Value, chkMachineSegmentationLungVessels, 'uni', true ), true);
        
                            if isempty(adOffset)
                                set(chkMachineSegmentationLungVesselsAll, 'Value', false);
                            else
                                set(chkMachineSegmentationLungVesselsAll, 'Value', true);
                            end
                        end
                    end

                    % Cerebral Bleed

                    if CLASSES_CT == true

                        if isfield(stMachineLearning, 'cerebralBleed')
    
                            for ee=1:numel(stMachineLearning.cerebralBleed.field)
        
                                if isscalar(stMachineLearning.cerebralBleed.field)
                                    dOffset = find(strcmpi(asCerebralBleedName, stMachineLearning.cerebralBleed.field.fieldName.Text), 1);
                                else
                                    dOffset = find(strcmpi(asCerebralBleedName, stMachineLearning.cerebralBleed.field{1, ee}.fieldName.Text), 1);
                                end
        
                                if ~isempty(dOffset)
                                    if isscalar(stMachineLearning.cerebralBleed.field)
                                        set(chkMachineSegmentationCerebralBleed{dOffset}, 'Value', str2double(stMachineLearning.cerebralBleed.field.fieldValue.Text));
                                    else
                                        set(chkMachineSegmentationCerebralBleed{dOffset}, 'Value', str2double(stMachineLearning.cerebralBleed.field{1, ee}.fieldValue.Text));
                                    end
                                end
                            end
        
                            % Verify if at least 1 object is active
        
                            adOffset = find(cellfun( @(chkMachineSegmentationCerebralBleed) chkMachineSegmentationCerebralBleed.Value, chkMachineSegmentationCerebralBleed, 'uni', true ), true);
        
                            if isempty(adOffset)
                                set(chkMachineSegmentationCerebralBleedAll, 'Value', false);
                            else
                                set(chkMachineSegmentationCerebralBleedAll, 'Value', true);
                            end
                        end
                    end

                    % Hip Implant

                    if CLASSES_CT == true

                        if isfield(stMachineLearning, 'hipImplant')
    
                            for ee=1:numel(stMachineLearning.hipImplant.field)
        
                                if isscalar(stMachineLearning.hipImplant.field)
                                    dOffset = find(strcmpi(asHipImplantName, stMachineLearning.hipImplant.field.fieldName.Text), 1);
                                else
                                    dOffset = find(strcmpi(asHipImplantName, stMachineLearning.hipImplant.field{1, ee}.fieldName.Text), 1);
                                end
        
                                if ~isempty(dOffset)
                                    if isscalar(stMachineLearning.hipImplant.field)
                                        set(chkMachineSegmentationHipImplant{dOffset}, 'Value', str2double(stMachineLearning.hipImplant.field.fieldValue.Text));
                                    else
                                        set(chkMachineSegmentationHipImplant{dOffset}, 'Value', str2double(stMachineLearning.hipImplant.field{1, ee}.fieldValue.Text));
                                    end
                                end
                            end
        
                            % Verify if at least 1 object is active
        
                            adOffset = find(cellfun( @(chkMachineSegmentationHipImplant) chkMachineSegmentationHipImplant.Value, chkMachineSegmentationHipImplant, 'uni', true ), true);
        
                            if isempty(adOffset)
                                set(chkMachineSegmentationHipImplantAll, 'Value', false);
                            else
                                set(chkMachineSegmentationHipImplantAll, 'Value', true);
                            end
                        end
                    end

                    % Coronary Arteries

                    if CLASSES_CT == true

                        if isfield(stMachineLearning, 'coronaryArteries')
    
                            for ee=1:numel(stMachineLearning.coronaryArteries.field)
        
                                if isscalar(stMachineLearning.coronaryArteries.field)
                                    dOffset = find(strcmpi(asCoronaryArteriesName, stMachineLearning.coronaryArteries.field.fieldName.Text), 1);
                                else
                                    dOffset = find(strcmpi(asCoronaryArteriesName, stMachineLearning.coronaryArteries.field{1, ee}.fieldName.Text), 1);
                                end
        
                                if ~isempty(dOffset)
                                    if isscalar(stMachineLearning.coronaryArteries.field)
                                        set(chkMachineSegmentationCoronaryArteries{dOffset}, 'Value', str2double(stMachineLearning.coronaryArteries.field.fieldValue.Text));
                                    else
                                        set(chkMachineSegmentationCoronaryArteries{dOffset}, 'Value', str2double(stMachineLearning.coronaryArteries.field{1, ee}.fieldValue.Text));
                                    end
                                end
                            end
        
                            % Verify if at least 1 object is active
        
                            adOffset = find(cellfun( @(chkMachineSegmentationCoronaryArteries) chkMachineSegmentationCoronaryArteries.Value, chkMachineSegmentationCoronaryArteries, 'uni', true ), true);
        
                            if isempty(adOffset)
                                set(chkMachineSegmentationCoronaryArteriesAll, 'Value', false);
                            else
                                set(chkMachineSegmentationCoronaryArteriesAll, 'Value', true);
                            end
                        end
                    end

                    % Heartchambers Highres

                    if CLASSES_CT == true

                        if isfield(stMachineLearning, 'heartchambersHighres')
    
                            for ee=1:numel(stMachineLearning.heartchambersHighres.field)
        
                                if isscalar(stMachineLearning.heartchambersHighres.field)
                                    dOffset = find(strcmpi(asHeartchambersHighresName, stMachineLearning.heartchambersHighres.field.fieldName.Text), 1);
                                else
                                    dOffset = find(strcmpi(asHeartchambersHighresName, stMachineLearning.heartchambersHighres.field{1, ee}.fieldName.Text), 1);
                                end
        
                                if ~isempty(dOffset)
                                    if isscalar(stMachineLearning.heartchambersHighres.field)
                                        set(chkMachineSegmentationHeartchambersHighres{dOffset}, 'Value', str2double(stMachineLearning.heartchambersHighres.field.fieldValue.Text));
                                    else
                                        set(chkMachineSegmentationHeartchambersHighres{dOffset}, 'Value', str2double(stMachineLearning.heartchambersHighres.field{1, ee}.fieldValue.Text));
                                    end
                                end
                            end
        
                            % Verify if at least 1 object is active
        
                            adOffset = find(cellfun( @(chkMachineSegmentationHeartchambersHighres) chkMachineSegmentationHeartchambersHighres.Value, chkMachineSegmentationHeartchambersHighres, 'uni', true ), true);
        
                            if isempty(adOffset)
                                set(chkMachineSegmentationHeartchambersHighresAll, 'Value', false);
                            else
                                set(chkMachineSegmentationHeartchambersHighresAll, 'Value', true);
                            end
                        end
                    end

                    % Appendicular Bones

                    if CLASSES_CT == true

                        if isfield(stMachineLearning, 'appendicularBones')
    
                            for ee=1:numel(stMachineLearning.appendicularBones.field)
        
                                if isscalar(stMachineLearning.appendicularBones.field)
                                    dOffset = find(strcmpi(asAppendicularBonesName, stMachineLearning.appendicularBones.field.fieldName.Text), 1);
                                else
                                    dOffset = find(strcmpi(asAppendicularBonesName, stMachineLearning.appendicularBones.field{1, ee}.fieldName.Text), 1);
                                end
        
                                if ~isempty(dOffset)
                                    if isscalar(stMachineLearning.appendicularBones.field)
                                        set(chkMachineSegmentationAppendicularBones{dOffset}, 'Value', str2double(stMachineLearning.appendicularBones.field.fieldValue.Text));
                                    else
                                        set(chkMachineSegmentationAppendicularBones{dOffset}, 'Value', str2double(stMachineLearning.appendicularBones.field{1, ee}.fieldValue.Text));
                                    end
                                end
                            end
        
                            % Verify if at least 1 object is active
        
                            adOffset = find(cellfun( @(chkMachineSegmentationAppendicularBones) chkMachineSegmentationAppendicularBones.Value, chkMachineSegmentationAppendicularBones, 'uni', true ), true);
        
                            if isempty(adOffset)
                                set(chkMachineSegmentationAppendicularBonesAll, 'Value', false);
                            else
                                set(chkMachineSegmentationAppendicularBonesAll, 'Value', true);
                            end
                        end
                    end

                    % Pleural Pericard Effusion

                    if CLASSES_CT == true

                        if isfield(stMachineLearning, 'pleuralPericardEffusion')
    
                            for ee=1:numel(stMachineLearning.pleuralPericardEffusion.field)
        
                                if isscalar(stMachineLearning.pleuralPericardEffusion.field)
                                    dOffset = find(strcmpi(asPleuralPericardEffusionName, stMachineLearning.pleuralPericardEffusion.field.fieldName.Text), 1);
                                else
                                    dOffset = find(strcmpi(asPleuralPericardEffusionName, stMachineLearning.pleuralPericardEffusion.field{1, ee}.fieldName.Text), 1);
                                end
        
                                if ~isempty(dOffset)
                                    if isscalar(stMachineLearning.pleuralPericardEffusion.field)
                                        set(chkMachineSegmentationPleuralPericardEffusion{dOffset}, 'Value', str2double(stMachineLearning.pleuralPericardEffusion.field.fieldValue.Text));
                                    else
                                        set(chkMachineSegmentationPleuralPericardEffusion{dOffset}, 'Value', str2double(stMachineLearning.pleuralPericardEffusion.field{1, ee}.fieldValue.Text));
                                    end
                                end
                            end
        
                            % Verify if at least 1 object is active
        
                            adOffset = find(cellfun( @(chkMachineSegmentationPleuralPericardEffusion) chkMachineSegmentationPleuralPericardEffusion.Value, chkMachineSegmentationPleuralPericardEffusion, 'uni', true ), true);
        
                            if isempty(adOffset)
                                set(chkMachineSegmentationPleuralPericardEffusionAll, 'Value', false);
                            else
                                set(chkMachineSegmentationPleuralPericardEffusionAll, 'Value', true);
                            end
                        end
                    end

                end
            end
        end
    end

    % Save

    function saveMachineSegmentationProtocolCallback(~, ~)

        DLG_PROTOCOL_NAME_X = 380;
        DLG_PROTOCOL_NAME_Y = 100;

        if viewerUIFigure('get') == true
    
            dlgProtocolName = ...
                uifigure('Position', [(getMainWindowPosition('xpos')+(getMainWindowSize('xsize')/2)-DLG_PROTOCOL_NAME_X/2) ...
                                    (getMainWindowPosition('ypos')+(getMainWindowSize('ysize')/2)-DLG_PROTOCOL_NAME_Y/2) ...
                                    DLG_PROTOCOL_NAME_X ...
                                    DLG_PROTOCOL_NAME_Y ...
                                    ],...
                       'Resize'     , 'off', ...
                       'Color'      , viewerBackgroundColor('get'),...
                       'WindowStyle', 'modal', ...
                       'Name'       , 'Protocol Name'...
                       );
        else
    
            dlgProtocolName = ...
                dialog('Position', [(getMainWindowPosition('xpos')+(getMainWindowSize('xsize')/2)-DLG_PROTOCOL_NAME_X/2) ...
                                    (getMainWindowPosition('ypos')+(getMainWindowSize('ysize')/2)-DLG_PROTOCOL_NAME_Y/2) ...
                                    DLG_PROTOCOL_NAME_X ...
                                    DLG_PROTOCOL_NAME_Y ...
                                    ],...
                       'MenuBar', 'none',...
                       'Resize', 'off', ...
                       'NumberTitle','off',...
                       'MenuBar', 'none',...
                       'Color', viewerBackgroundColor('get'), ...
                       'Name', 'Protocol Name',...
                       'Toolbar','none'...
                       );
        end

        setObjectIcon(dlgProtocolName);

        axeProtocolName = ...
            axes(dlgProtocolName, ...
                 'Units'   , 'pixels', ...
                 'Position', [0 0 DLG_PROTOCOL_NAME_X DLG_PROTOCOL_NAME_Y], ...
                 'Color'   , viewerBackgroundColor('get'),...
                 'XColor'  , viewerForegroundColor('get'),...
                 'YColor'  , viewerForegroundColor('get'),...
                 'ZColor'  , viewerForegroundColor('get'),...
                 'Visible' , 'off'...
                 );
        axeProtocolName.Interactions = [];
        deleteAxesToolbar(axeProtocolName);
        % axeProtocolName.Toolbar = [];

            uicontrol(dlgProtocolName,...
                      'style'   , 'text',...
                      'string'  , 'Protocol Name',...
                      'horizontalalignment', 'left',...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [20 55 150 20]...
                      );

        edtProtocolName = ...
            uicontrol(dlgProtocolName,...
                      'style'   , 'edit',...
                      'string'  , ' ',...
                      'horizontalalignment', 'left',...
                      'BackgroundColor', viewerBackgroundColor('get'), ...
                      'ForegroundColor', viewerForegroundColor('get'), ...
                      'position', [170 55 190 20]...
                      );

         % Cancel or Save

         uicontrol(dlgProtocolName,...
                   'String','Cancel',...
                   'Position',[285 7 75 25],...
                   'BackgroundColor', viewerBackgroundColor('get'), ...
                   'ForegroundColor', viewerForegroundColor('get'), ...
                   'Callback', @cancelSaveMachineSegmentationProtocol...
                   );

         uicontrol(dlgProtocolName,...
                  'String','Save',...
                  'Position',[200 7 75 25],...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'Callback', @saveMachineSegmentationProtocol...
                  );

        function cancelSaveMachineSegmentationProtocol(~, ~)

            delete(dlgProtocolName);
        end

        function saveMachineSegmentationProtocol(~, ~)

            asProtocolList = strtrim(get(popMachineSegmentationProtocol, 'String'));

            for nn=1:numel(asProtocolList)

                if strcmpi(asProtocolList{nn}, strtrim(get(edtProtocolName, 'String')))

%                     progressBar('Error: Protocol name invalid or exist, please use a valid name!');
%                     errordlg('Protocol name invalid or exist, please use a valid name!', 'Protocol Name Validation');
%                     return;

                end
            end

            st.machineLearning.guiName.Text = 'Machine Learning';
            st.machineLearning.defaultProtocol.Text = '1';
            st.machineLearning.Attributes.version = '1.0';

            sRootPath = viewerRootPath('get');
            sProtocolPath = sprintf('%s/protocol/', sRootPath);

            f = java.io.File(char(sProtocolPath));
            asListing = f.listFiles();

            sXmlProtocolFileName = '';

            for kk=1:numel(asListing) % If file exist
                if contains(char(asListing(kk)), 'machineLearning.xml')
                    sXmlProtocolFileName = char(asListing(kk));
                    break;
                end
            end

            if isempty(sXmlProtocolFileName)
                dNbProtocol = 0;
                sXmlProtocolFileName = sprintf('%s/protocol/machineLearning.xml', sRootPath);
            else
                stOld = xml2struct(sXmlProtocolFileName);

                if isfield (stOld.machineLearning, 'protocol')

                    dNbProtocol = numel(stOld.machineLearning.protocol);

                    st.machineLearning.protocol = cell(1, dNbProtocol+1);

                    if dNbProtocol > 1
                        for pp=1:dNbProtocol
                            st.machineLearning.protocol{1,pp} = stOld.machineLearning.protocol{1,pp};
                        end
                    else
                        st.machineLearning.protocol{1,1} = stOld.machineLearning.protocol;
                    end
                else
                    dNbProtocol = 0;
                end
            end

            dProtocolOffset = dNbProtocol+1;

            st.machineLearning.protocol{1,dProtocolOffset}.protocolName.Text = strtrim(get(edtProtocolName, 'String'));

            delete(dlgProtocolName);

            % Skeleton

            for aa=1:numel(asSkeletonName)
                st.machineLearning.protocol{1,dProtocolOffset}.skelton.field{1, aa}.fieldName.Text  = asSkeletonName{aa};
                st.machineLearning.protocol{1,dProtocolOffset}.skelton.field{1, aa}.fieldType.Text  = get(chkMachineSegmentationSkeleton{aa}, 'Style');
                st.machineLearning.protocol{1,dProtocolOffset}.skelton.field{1, aa}.fieldValue.Text = get(chkMachineSegmentationSkeleton{aa}, 'Value');

                if CLASSES_CT == true

                    if ~isempty(edtMachineSegmentationSkeleton{aa}) % Set Edit Box
                        asEdtStrValue = get(edtMachineSegmentationSkeleton{aa}, 'String');
                        st.machineLearning.protocol{1,dProtocolOffset}.skelton.field{1,aa}.field.fieldType.Text  = get(edtMachineSegmentationSkeleton{aa}, 'Style');
                        st.machineLearning.protocol{1,dProtocolOffset}.skelton.field{1,aa}.field.fieldValue.Text = char(asEdtStrValue);
                    end
                end
            end

            % Cardiovascular System

            for bb=1:numel(asCardiovascularName)
                st.machineLearning.protocol{1,dProtocolOffset}.cardiovascular.field{1, bb}.fieldName.Text  = asCardiovascularName{bb};
                st.machineLearning.protocol{1,dProtocolOffset}.cardiovascular.field{1, bb}.fieldType.Text  = get(chkMachineSegmentationCardiovascular{bb}, 'Style');
                st.machineLearning.protocol{1,dProtocolOffset}.cardiovascular.field{1, bb}.fieldValue.Text = get(chkMachineSegmentationCardiovascular{bb}, 'Value');
            end

            % Other Organs

            for cc=1:numel(asOtherOrgansName)
                st.machineLearning.protocol{1,dProtocolOffset}.otherOrgans.field{1, cc}.fieldName.Text  = asOtherOrgansName{cc};
                st.machineLearning.protocol{1,dProtocolOffset}.otherOrgans.field{1, cc}.fieldType.Text  = get(chkMachineSegmentationOtherOrgans{cc}, 'Style');
                st.machineLearning.protocol{1,dProtocolOffset}.otherOrgans.field{1, cc}.fieldValue.Text = get(chkMachineSegmentationOtherOrgans{cc}, 'Value');
            end

            % Gastrointestinal Tract

            if CLASSES_CT == true

                for dd=1:numel(asGastrointestinalTractName)
                    st.machineLearning.protocol{1,dProtocolOffset}.gastrointestinal.field{1, dd}.fieldName.Text  = asGastrointestinalTractName{dd};
                    st.machineLearning.protocol{1,dProtocolOffset}.gastrointestinal.field{1, dd}.fieldType.Text  = get(chkMachineSegmentationGastrointestinalTract{dd}, 'Style');
                    st.machineLearning.protocol{1,dProtocolOffset}.gastrointestinal.field{1, dd}.fieldValue.Text = get(chkMachineSegmentationGastrointestinalTract{dd}, 'Value');
                end
            end

            % Muscles

            if CLASSES_CT == true

                for ee=1:numel(asMusclesName)
                    st.machineLearning.protocol{1,dProtocolOffset}.muscles.field{1, ee}.fieldName.Text  = asMusclesName{ee};
                    st.machineLearning.protocol{1,dProtocolOffset}.muscles.field{1, ee}.fieldType.Text  = get(chkMachineSegmentationMuscles{ee}, 'Style');
                    st.machineLearning.protocol{1,dProtocolOffset}.muscles.field{1, ee}.fieldValue.Text = get(chkMachineSegmentationMuscles{ee}, 'Value');
                end
            end

            % Anonymization

            if CLASSES_CT == true

                for ee=1:numel(asAnonymizationName)
                    st.machineLearning.protocol{1,dProtocolOffset}.anonymization.field{1, ee}.fieldName.Text  = asAnonymizationName{ee};
                    st.machineLearning.protocol{1,dProtocolOffset}.anonymization.field{1, ee}.fieldType.Text  = get(chkMachineSegmentationAnonymization{ee}, 'Style');
                    st.machineLearning.protocol{1,dProtocolOffset}.anonymization.field{1, ee}.fieldValue.Text = get(chkMachineSegmentationAnonymization{ee}, 'Value');
                end
            end

            % Tissue Types

            for ff=1:numel(asTissueTypesName)
                st.machineLearning.protocol{1,dProtocolOffset}.tissueTypes.field{1, ff}.fieldName.Text  = asTissueTypesName{ff};
                st.machineLearning.protocol{1,dProtocolOffset}.tissueTypes.field{1, ff}.fieldType.Text  = get(chkMachineSegmentationTissueTypes{ff}, 'Style');
                st.machineLearning.protocol{1,dProtocolOffset}.tissueTypes.field{1, ff}.fieldValue.Text = get(chkMachineSegmentationTissueTypes{ff}, 'Value');
            end

            % Head Glands Cavities 

            if CLASSES_CT == true

                for ff=1:numel(asHeadGlandsCavitiesName)
                    st.machineLearning.protocol{1,dProtocolOffset}.headGlandsCavities.field{1, ff}.fieldName.Text  = asHeadGlandsCavitiesName{ff};
                    st.machineLearning.protocol{1,dProtocolOffset}.headGlandsCavities.field{1, ff}.fieldType.Text  = get(chkMachineSegmentationHeadGlandsCavities{ff}, 'Style');
                    st.machineLearning.protocol{1,dProtocolOffset}.headGlandsCavities.field{1, ff}.fieldValue.Text = get(chkMachineSegmentationHeadGlandsCavities{ff}, 'Value');
                end                
            end

            % Head Muscles

            if CLASSES_CT == true

                for ff=1:numel(asHeadMusclesName)
                    st.machineLearning.protocol{1,dProtocolOffset}.headMuscles.field{1, ff}.fieldName.Text  = asHeadMusclesName{ff};
                    st.machineLearning.protocol{1,dProtocolOffset}.headMuscles.field{1, ff}.fieldType.Text  = get(chkMachineSegmentationHeadMuscles{ff}, 'Style');
                    st.machineLearning.protocol{1,dProtocolOffset}.headMuscles.field{1, ff}.fieldValue.Text = get(chkMachineSegmentationHeadMuscles{ff}, 'Value');
                end                
            end

            % Headneck Bones Vessels

            if CLASSES_CT == true

                for ff=1:numel(asHeadneckBonesVesselsName)
                    st.machineLearning.protocol{1,dProtocolOffset}.headneckBonesVessels.field{1, ff}.fieldName.Text  = asHeadneckBonesVesselsName{ff};
                    st.machineLearning.protocol{1,dProtocolOffset}.headneckBonesVessels.field{1, ff}.fieldType.Text  = get(chkMachineSegmentationHeadneckBonesVessels{ff}, 'Style');
                    st.machineLearning.protocol{1,dProtocolOffset}.headneckBonesVessels.field{1, ff}.fieldValue.Text = get(chkMachineSegmentationHeadneckBonesVessels{ff}, 'Value');
                end                
            end

            % Headneck Muscles

            if CLASSES_CT == true

                for ff=1:numel(asHeadneckMusclesName)
                    st.machineLearning.protocol{1,dProtocolOffset}.headneckMuscles.field{1, ff}.fieldName.Text  = asHeadneckMusclesName{ff};
                    st.machineLearning.protocol{1,dProtocolOffset}.headneckMuscles.field{1, ff}.fieldType.Text  = get(chkMachineSegmentationHeadneckMuscles{ff}, 'Style');
                    st.machineLearning.protocol{1,dProtocolOffset}.headneckMuscles.field{1, ff}.fieldValue.Text = get(chkMachineSegmentationHeadneckMuscles{ff}, 'Value');
                end                
            end

            % Liver Vessels

            if CLASSES_CT == true

                for ff=1:numel(asLiverVesselsName)
                    st.machineLearning.protocol{1,dProtocolOffset}.liverVessels.field{1, ff}.fieldName.Text  = asLiverVesselsName{ff};
                    st.machineLearning.protocol{1,dProtocolOffset}.liverVessels.field{1, ff}.fieldType.Text  = get(chkMachineSegmentationLiverVessels{ff}, 'Style');
                    st.machineLearning.protocol{1,dProtocolOffset}.liverVessels.field{1, ff}.fieldValue.Text = get(chkMachineSegmentationLiverVessels{ff}, 'Value');
                end                
            end

            % Liver Segments
           
            for ff=1:numel(asLiverSegmentsName)
                st.machineLearning.protocol{1,dProtocolOffset}.liverSegments.field{1, ff}.fieldName.Text  = asLiverSegmentsName{ff};
                st.machineLearning.protocol{1,dProtocolOffset}.liverSegments.field{1, ff}.fieldType.Text  = get(chkMachineSegmentationLiverSegments{ff}, 'Style');
                st.machineLearning.protocol{1,dProtocolOffset}.liverSegments.field{1, ff}.fieldValue.Text = get(chkMachineSegmentationLiverSegments{ff}, 'Value');
            end 

            % Brain Structures

            if CLASSES_CT == true

                for ff=1:numel(asBrainStructuresName)
                    st.machineLearning.protocol{1,dProtocolOffset}.brainStructures.field{1, ff}.fieldName.Text  = asBrainStructuresName{ff};
                    st.machineLearning.protocol{1,dProtocolOffset}.brainStructures.field{1, ff}.fieldType.Text  = get(chkMachineSegmentationBrainStructures{ff}, 'Style');
                    st.machineLearning.protocol{1,dProtocolOffset}.brainStructures.field{1, ff}.fieldValue.Text = get(chkMachineSegmentationBrainStructures{ff}, 'Value');
                end                
            end

            % Body Mask

            if CLASSES_CT == true

                for ff=1:numel(asBodyName)
                    st.machineLearning.protocol{1,dProtocolOffset}.body.field{1, ff}.fieldName.Text  = asBodyName{ff};
                    st.machineLearning.protocol{1,dProtocolOffset}.body.field{1, ff}.fieldType.Text  = get(chkMachineSegmentationBody{ff}, 'Style');
                    st.machineLearning.protocol{1,dProtocolOffset}.body.field{1, ff}.fieldValue.Text = get(chkMachineSegmentationBody{ff}, 'Value');
                end                
            end

            % Lung Vessels Mask
            
            if CLASSES_CT == true

                for ff=1:numel(asLungVesselsName)
                    st.machineLearning.protocol{1,dProtocolOffset}.lungVessels.field{1, ff}.fieldName.Text  = asLungVesselsName{ff};
                    st.machineLearning.protocol{1,dProtocolOffset}.lungVessels.field{1, ff}.fieldType.Text  = get(chkMachineSegmentationLungVessels{ff}, 'Style');
                    st.machineLearning.protocol{1,dProtocolOffset}.lungVessels.field{1, ff}.fieldValue.Text = get(chkMachineSegmentationLungVessels{ff}, 'Value');
                end                
            end

            % Cerebral Bleed 

            if CLASSES_CT == true

                for ee=1:numel(asCerebralBleedName)
                    st.machineLearning.protocol{1,dProtocolOffset}.cerebralBleed.field{1, ee}.fieldName.Text  = asCerebralBleedName{ee};
                    st.machineLearning.protocol{1,dProtocolOffset}.cerebralBleed.field{1, ee}.fieldType.Text  = get(chkMachineSegmentationCerebralBleed{ee}, 'Style');
                    st.machineLearning.protocol{1,dProtocolOffset}.cerebralBleed.field{1, ee}.fieldValue.Text = get(chkMachineSegmentationCerebralBleed{ee}, 'Value');
                end
            end

            % Hip Implant

            if CLASSES_CT == true

                for ee=1:numel(asHipImplantName)
                    st.machineLearning.protocol{1,dProtocolOffset}.hipImplant.field{1, ee}.fieldName.Text  = asHipImplantName{ee};
                    st.machineLearning.protocol{1,dProtocolOffset}.hipImplant.field{1, ee}.fieldType.Text  = get(chkMachineSegmentationHipImplant{ee}, 'Style');
                    st.machineLearning.protocol{1,dProtocolOffset}.hipImplant.field{1, ee}.fieldValue.Text = get(chkMachineSegmentationHipImplant{ee}, 'Value');
                end
            end

            % Coronary Arteries

            if CLASSES_CT == true

                for ee=1:numel(asCoronaryArteriesName)
                    st.machineLearning.protocol{1,dProtocolOffset}.coronaryArteries.field{1, ee}.fieldName.Text  = asCoronaryArteriesName{ee};
                    st.machineLearning.protocol{1,dProtocolOffset}.coronaryArteries.field{1, ee}.fieldType.Text  = get(chkMachineSegmentationCoronaryArteries{ee}, 'Style');
                    st.machineLearning.protocol{1,dProtocolOffset}.coronaryArteries.field{1, ee}.fieldValue.Text = get(chkMachineSegmentationCoronaryArteries{ee}, 'Value');
                end
            end

            % Heartchambers Highres

            if CLASSES_CT == true

                for ee=1:numel(asHeartchambersHighresName)
                    st.machineLearning.protocol{1,dProtocolOffset}.heartchambersHighres.field{1, ee}.fieldName.Text  = asHeartchambersHighresName{ee};
                    st.machineLearning.protocol{1,dProtocolOffset}.heartchambersHighres.field{1, ee}.fieldType.Text  = get(chkMachineSegmentationHeartchambersHighres{ee}, 'Style');
                    st.machineLearning.protocol{1,dProtocolOffset}.heartchambersHighres.field{1, ee}.fieldValue.Text = get(chkMachineSegmentationHeartchambersHighres{ee}, 'Value');
                end
            end
            
            % Appendicular Bones

            if CLASSES_CT == true

                for ee=1:numel(asAppendicularBonesName)
                    st.machineLearning.protocol{1,dProtocolOffset}.appendicularBones.field{1, ee}.fieldName.Text  = asAppendicularBonesName{ee};
                    st.machineLearning.protocol{1,dProtocolOffset}.appendicularBones.field{1, ee}.fieldType.Text  = get(chkMachineSegmentationAppendicularBones{ee}, 'Style');
                    st.machineLearning.protocol{1,dProtocolOffset}.appendicularBones.field{1, ee}.fieldValue.Text = get(chkMachineSegmentationAppendicularBones{ee}, 'Value');
                end
            end

            % Pleural Pericard Effusion

            if CLASSES_CT == true

                for ee=1:numel(asPleuralPericardEffusionName)
                    st.machineLearning.protocol{1,dProtocolOffset}.pleuralPericardEffusion.field{1, ee}.fieldName.Text  = asPleuralPericardEffusionName{ee};
                    st.machineLearning.protocol{1,dProtocolOffset}.pleuralPericardEffusion.field{1, ee}.fieldType.Text  = get(chkMachineSegmentationPleuralPericardEffusion{ee}, 'Style');
                    st.machineLearning.protocol{1,dProtocolOffset}.pleuralPericardEffusion.field{1, ee}.fieldValue.Text = get(chkMachineSegmentationPleuralPericardEffusion{ee}, 'Value');
                end
            end

            struct2xml(st, sXmlProtocolFileName);

            set(popMachineSegmentationProtocol, 'String', getMachineLearningProtocolName());

            if CLASSES_CT == true

                set(popMachineSegmentationProtocolNext      , 'String', getMachineLearningProtocolName());
                set(popMachineSegmentationProtocolSecondNext, 'String', getMachineLearningProtocolName());
            end
        end
    end

    function asMachineSegmentationProtocol = getMachineLearningProtocolName()

        sRootPath = viewerRootPath('get');
        sProtocolPath = sprintf('%s/protocol/', sRootPath);

        f = java.io.File(char(sProtocolPath));
        asListing = f.listFiles();

        sXmlProtocolFileName = '';

        for yy=1:numel(asListing) % If file exist
            if contains(char(asListing(yy)), 'machineLearning.xml')
                sXmlProtocolFileName = char(asListing(yy));
            end
        end

        if isempty(sXmlProtocolFileName)
            asMachineSegmentationProtocol{1} = ' ';
        else
            stXml = xml2struct(sXmlProtocolFileName);

            if isfield (stXml.machineLearning, 'protocol')
                dNbXmlProtocol = numel(stXml.machineLearning.protocol);
                if dNbXmlProtocol
                    if dNbXmlProtocol >1

                        asMachineSegmentationProtocol = cell(1, dNbXmlProtocol);
                        for zz=1:dNbXmlProtocol
                            asMachineSegmentationProtocol{zz}=stXml.machineLearning.protocol{1, zz}.protocolName.Text;
                        end
                    else
                        asMachineSegmentationProtocol{1} = stXml.machineLearning.protocol.protocolName.Text;
                    end
                else
                    asMachineSegmentationProtocol{1} = ' ';
                end
            else
                asMachineSegmentationProtocol{1} = ' ';
            end
        end
    end

    % Cancel

    function cancelMachineSegmentationCallback(~, ~)

        delete(dlgMachineSegmentation);
    end

    % Proceed

    function proceedMachineSegmentationCallback(~, ~)

         try

%          delete(dlgMachineSegmentation);

%          set(dlgMachineSegmentation, 'Position', [0 0 0 0]);

        set(dlgMachineSegmentation, 'Pointer', 'watch');
        drawnow;

        dSerieOffset = get(uiSeriesPtr('get'), 'Value');

        tInput = inputTemplate('get');

        % Modality validation

        if ~strcmpi(tInput(dSerieOffset).atDicomInfo{1}.Modality, 'ct') && ...
           ~strcmpi(tInput(dSerieOffset).atDicomInfo{1}.Modality, 'mr')

            progressBar(1, 'Error: Segmentation of classes require a CT or MR image!');
            errordlg('Segmentation of classes require a CT or MR image!', 'Modality Validation');
            return;
        end


        % Create an empty directory

        sNiiTmpDir = sprintf('%stemp_nii_%s/', viewerTempDirectory('get'), datetime('now','Format','MMMM-d-y-hhmmss'));
        if exist(char(sNiiTmpDir), 'dir')
            rmdir(char(sNiiTmpDir), 's');
        end
        mkdir(char(sNiiTmpDir));

        % Convert dicom to .nii

        progressBar(1/4, 'Convertion dicom to nii, please wait.');

        dSeriesOffset = get(uiSeriesPtr('get'), 'Value');

        bUseDisplayImage = false;

        if isfield(tInput(dSeriesOffset), 'tMovement')
            
            if tInput(dSeriesOffset).tMovement.bMovementApplied == true

                bUseDisplayImage = true;
            end
        end

        if isempty(tInput(dSerieOffset).asFilesList{1})

            bUseDisplayImage = true;
        end

        if bUseDisplayImage == true

            display2nii(dicomBuffer('get', [], dSeriesOffset), dicomMetaData('get', [], dSeriesOffset), sNiiTmpDir, 1);
        else
            % Get DICOM directory directory

            [sFilePath, ~, ~] = fileparts(char(tInput(dSerieOffset).asFilesList{1}));

            dicm2nii(sFilePath, sNiiTmpDir, 1);
        end

        sNiiFullFileName = '';

        f = java.io.File(char(sNiiTmpDir)); % Get .nii file name
        dinfo = f.listFiles();
        for K = 1 : 1 : numel(dinfo)
            if ~(dinfo(K).isDirectory)
                if contains(sprintf('%s%s', sNiiTmpDir, dinfo(K).getName()), '.nii.gz')
                    sNiiFullFileName = sprintf('%s%s', sNiiTmpDir, dinfo(K).getName());
                    break;
                end
            end
        end

        % if isempty(sNiiFullFileName) && ... % If it fails to use the DICOM file, 
        %    bUseDisplayImage == false        % it will try using the display image
        % 
        %     display2nii(dicomBuffer('get', [], dSeriesOffset), dicomMetaData('get', [], dSeriesOffset), sNiiTmpDir, 1);
        % 
        %     sNiiFullFileName = '';
        % 
        %     f = java.io.File(char(sNiiTmpDir)); % Get .nii file name
        %     dinfo = f.listFiles();
        %     for K = 1 : 1 : numel(dinfo)
        %         if ~(dinfo(K).isDirectory)
        %             if contains(sprintf('%s%s', sNiiTmpDir, dinfo(K).getName()), '.nii.gz')
        %                 sNiiFullFileName = sprintf('%s%s', sNiiTmpDir, dinfo(K).getName());
        %                 break;
        %             end
        %         end
        %     end
        % end

        if isempty(sNiiFullFileName)

            progressBar(1, 'Error: nii file not found!');
            errordlg('nii file not found!!', '.nii file Validation');
        else
            progressBar(2/4, 'Segmentation in progress, this might take several minutes, please be patient.');

            sSegmentationFolderName = sprintf('%stemp_seg_%s/', viewerTempDirectory('get'), datetime('now','Format','MMMM-d-y-hhmmss'));

            if exist(char(sSegmentationFolderName), 'dir')

                rmdir(char(sSegmentationFolderName), 's');
            end

            mkdir(char(sSegmentationFolderName));

            if ispc % Windows

                % Skeleton
                
                bSkeleton = false;

                adOffset = cellfun( @(chkMachineSegmentationSkeleton) chkMachineSegmentationSkeleton.Value, chkMachineSegmentationSkeleton, 'uni', true );
        
                if ~isempty(find(adOffset, true))
                    bSkeleton = true;
                end
		
                % Cardiovascular System

                bCardiovascularSystem = false;

                adOffset = cellfun( @(chkMachineSegmentationCardiovascular) chkMachineSegmentationCardiovascular.Value, chkMachineSegmentationCardiovascular, 'uni', true );
        
                if ~isempty(find(adOffset, true))
		            bCardiovascularSystem = true;
                end

                % Other Organs
        
                bOtherOrgans = false;

                adOffset = cellfun( @(chkMachineSegmentationOtherOrgans) chkMachineSegmentationOtherOrgans.Value, chkMachineSegmentationOtherOrgans, 'uni', true );
        
                if ~isempty(find(adOffset, true))
		            bOtherOrgans = true;
                end

                % Gastrointestinal Tract
                 
                bGastrointestinalTract = false;

                if CLASSES_CT == true
                    
                    adOffset = cellfun( @(chkMachineSegmentationGastrointestinalTract) chkMachineSegmentationGastrointestinalTract.Value, chkMachineSegmentationGastrointestinalTract, 'uni', true );
            
                    if ~isempty(find(adOffset, true))
                        bGastrointestinalTract = true;
                    end
                end

                % Muscles

                bMuscles = false;    

                if CLASSES_CT == true
                    
                    adOffset = cellfun( @(chkMachineSegmentationMuscles) chkMachineSegmentationMuscles.Value, chkMachineSegmentationMuscles, 'uni', true );
            
                    if ~isempty(find(adOffset, true))
                        bMuscles = true;    
                    end
                end

                bAnonymization = false;    

                if CLASSES_CT == true
                    
                    adOffset = cellfun( @(chkMachineSegmentationAnonymization) chkMachineSegmentationAnonymization.Value, chkMachineSegmentationAnonymization, 'uni', true );
            
                    if ~isempty(find(adOffset, true))
                        bAnonymization = true;    
                    end
                end

                % Tissue Types
        
                bTissueTypes = false;
        
                adOffset = cellfun( @(chkMachineSegmentationTissueTypes) chkMachineSegmentationTissueTypes.Value, chkMachineSegmentationTissueTypes, 'uni', true );
        
                if ~isempty(find(adOffset, true))
                    bTissueTypes = true;
                end

	            % Head Glands Cavities
        
                bHeadGlandsCavities = false;
        
                if CLASSES_CT == true
  
                    adOffset = cellfun( @(chkMachineSegmentationHeadGlandsCavities) chkMachineSegmentationHeadGlandsCavities.Value, chkMachineSegmentationHeadGlandsCavities, 'uni', true );
            
                    if ~isempty(find(adOffset, true))
                        bHeadGlandsCavities = true;
                    end          
                end

	            % Head Muscles
        
                bHeadMuscles = false;
        
                if CLASSES_CT == true
  
                    adOffset = cellfun( @(chkMachineSegmentationHeadMuscles) chkMachineSegmentationHeadMuscles.Value, chkMachineSegmentationHeadMuscles, 'uni', true );
            
                    if ~isempty(find(adOffset, true))
                        bHeadMuscles = true;
                    end          
                end

	            % Headneck Bones Vessels

                bHeadneckBonesVessels = false;
        
                if CLASSES_CT == true
  
                    adOffset = cellfun( @(chkMachineSegmentationHeadneckBonesVessels) chkMachineSegmentationHeadneckBonesVessels.Value, chkMachineSegmentationHeadneckBonesVessels, 'uni', true );
            
                    if ~isempty(find(adOffset, true))
                        bHeadneckBonesVessels = true;
                    end          
                end

	            % Headneck Muscles

                bHeadneckMuscles = false;
        
                if CLASSES_CT == true
  
                    adOffset = cellfun( @(chkMachineSegmentationHeadneckMuscles) chkMachineSegmentationHeadneckMuscles.Value, chkMachineSegmentationHeadneckMuscles, 'uni', true );
            
                    if ~isempty(find(adOffset, true))
                        bHeadneckMuscles = true;
                    end          
                end

	            % Liver Vessels
        
                bLiverVessels = false;
        
                if CLASSES_CT == true
  
                    adOffset = cellfun( @(chkMachineSegmentationLiverVessels) chkMachineSegmentationLiverVessels.Value, chkMachineSegmentationLiverVessels, 'uni', true );
            
                    if ~isempty(find(adOffset, true))
                        bLiverVessels = true;
                    end          
                end

                % Liver Segments
                
                bLiverSegments = false;

                adOffset = cellfun( @(chkMachineSegmentationLiverSegments) chkMachineSegmentationLiverSegments.Value, chkMachineSegmentationLiverSegments, 'uni', true );

                if ~isempty(find(adOffset, true))
                    bLiverSegments = true;
                end   

	            % Brain Structures
        
                bBrainStructures = false;
        
                if CLASSES_CT == true
  
                    adOffset = cellfun( @(chkMachineSegmentationBrainStructures) chkMachineSegmentationBrainStructures.Value, chkMachineSegmentationBrainStructures, 'uni', true );
            
                    if ~isempty(find(adOffset, true))
                        bBrainStructures = true;
                    end          
                end

	            % Body Mask
        
                bBody = false;
        
                if CLASSES_CT == true
  
                    adOffset = cellfun( @(chkMachineSegmentationBody) chkMachineSegmentationBody.Value, chkMachineSegmentationBody, 'uni', true );
            
                    if ~isempty(find(adOffset, true))
                        bBody = true;
                    end          
                end

	            % Lung Vessels Mask
        
                bLungVessels = false;
        
                if CLASSES_CT == true
  
                    adOffset = cellfun( @(chkMachineSegmentationLungVessels) chkMachineSegmentationLungVessels.Value, chkMachineSegmentationLungVessels, 'uni', true );
            
                    if ~isempty(find(adOffset, true))
                        bLungVessels = true;
                    end          
                end

	            % Cerebral Bleed 
        
                bCerebralBleed = false;
        
                if CLASSES_CT == true
  
                    adOffset = cellfun( @(chkMachineSegmentationCerebralBleed) chkMachineSegmentationCerebralBleed.Value, chkMachineSegmentationCerebralBleed, 'uni', true );
            
                    if ~isempty(find(adOffset, true))
                        bCerebralBleed = true;
                    end          
                end

	            % Hip Implant 
        
                bHipImplant = false;
        
                if CLASSES_CT == true
  
                    adOffset = cellfun( @(chkMachineSegmentationHipImplant) chkMachineSegmentationHipImplant.Value, chkMachineSegmentationHipImplant, 'uni', true );
            
                    if ~isempty(find(adOffset, true))
                        bHipImplant = true;
                    end          
                end

	            % Coronary Arteries
        
                bCoronaryArteries = false;
        
                if CLASSES_CT == true
  
                    adOffset = cellfun( @(chkMachineSegmentationCoronaryArteries) chkMachineSegmentationCoronaryArteries.Value, chkMachineSegmentationCoronaryArteries, 'uni', true );
            
                    if ~isempty(find(adOffset, true))
                        bCoronaryArteries = true;
                    end          
                end

	            % Heartchambers Highres
        
                bHeartchambersHighres = false;
        
                if CLASSES_CT == true
  
                    adOffset = cellfun( @(chkMachineSegmentationHeartchambersHighres) chkMachineSegmentationHeartchambersHighres.Value, chkMachineSegmentationHeartchambersHighres, 'uni', true );
            
                    if ~isempty(find(adOffset, true))
                        bHeartchambersHighres = true;
                    end          
                end

	            % Appendicular Bones
        
                bAppendicularBones = false;
        
                if CLASSES_CT == true
  
                    adOffset = cellfun( @(chkMachineSegmentationAppendicularBones) chkMachineSegmentationAppendicularBones.Value, chkMachineSegmentationAppendicularBones, 'uni', true );
            
                    if ~isempty(find(adOffset, true))
                        bAppendicularBones = true;
                    end          
                end

	            % Pleural Pericard Effusion
        
                bPleuralPericardEffusion = false;
        
                if CLASSES_CT == true
  
                    adOffset = cellfun( @(chkMachineSegmentationPleuralPericardEffusion) chkMachineSegmentationPleuralPericardEffusion.Value, chkMachineSegmentationPleuralPericardEffusion, 'uni', true );
            
                    if ~isempty(find(adOffset, true))
                        bPleuralPericardEffusion = true;
                    end          
                end

                if CLASSES_CT == true

                    if bAnonymization == true
        
                        sOption = '';
                        if forceSplitMachineLearningDialog('get') == true
                            sOption = sprintf('%s --force_split', sOption);
                        end

                        sCommandLine = sprintf('cmd.exe /c python.exe %s -i %s -o %s %s -ta face', sSegmentatorScript, sNiiFullFileName, sSegmentationFolderName, sOption);

                        [bStatus, sCmdout] = system(sCommandLine);
                 
                        if bStatus
                            progressBar( 1, 'Error: An error occur during machine learning segmentation!');
                            errordlg(sprintf('An error occur during machine learning segmentation: %s', sCmdout), 'Segmentation Error');
                        end                      
                    end

                    if bTissueTypes == true
        
                        sOption = '';
                        if forceSplitMachineLearningDialog('get') == true
                            sOption = sprintf('%s --force_split', sOption);
                        end

                        sCommandLine = sprintf('cmd.exe /c python.exe %s -i %s -o %s %s -ta tissue_types', sSegmentatorScript, sNiiFullFileName, sSegmentationFolderName, sOption);

                        [bStatus, sCmdout] = system(sCommandLine);
                 
                        if bStatus
                            progressBar( 1, 'Error: An error occur during machine learning segmentation!');
                            errordlg(sprintf('An error occur during machine learning segmentation: %s', sCmdout), 'Segmentation Error');
                        end                      
                    end

                    if bHeadGlandsCavities == true

                        sOption = '';
                        if forceSplitMachineLearningDialog('get') == true
                            sOption = sprintf('%s --force_split', sOption);
                        end
                       
                        sCommandLine = sprintf('cmd.exe /c python.exe %s -i %s -o %s %s -ta head_glands_cavities', sSegmentatorScript, sNiiFullFileName, sSegmentationFolderName, sOption);

                        [bStatus, sCmdout] = system(sCommandLine);
                 
                        if bStatus
                            progressBar( 1, 'Error: An error occur during machine learning segmentation!');
                            errordlg(sprintf('An error occur during machine learning segmentation: %s', sCmdout), 'Segmentation Error');
                        end                        
                    end

                   if bHeadMuscles == true

                        sOption = '';
                        if forceSplitMachineLearningDialog('get') == true
                            sOption = sprintf('%s --force_split', sOption);
                        end
                       
                        sCommandLine = sprintf('cmd.exe /c python.exe %s -i %s -o %s %s -ta head_muscles', sSegmentatorScript, sNiiFullFileName, sSegmentationFolderName, sOption);

                        [bStatus, sCmdout] = system(sCommandLine);
                 
                        if bStatus
                            progressBar( 1, 'Error: An error occur during machine learning segmentation!');
                            errordlg(sprintf('An error occur during machine learning segmentation: %s', sCmdout), 'Segmentation Error');
                        end                        
                   end

                   if bHeadneckBonesVessels == true

                        sOption = '';
                        if forceSplitMachineLearningDialog('get') == true
                            sOption = sprintf('%s --force_split', sOption);
                        end
                       
                        sCommandLine = sprintf('cmd.exe /c python.exe %s -i %s -o %s %s -ta headneck_bones_vessels', sSegmentatorScript, sNiiFullFileName, sSegmentationFolderName, sOption);

                        [bStatus, sCmdout] = system(sCommandLine);
                 
                        if bStatus
                            progressBar( 1, 'Error: An error occur during machine learning segmentation!');
                            errordlg(sprintf('An error occur during machine learning segmentation: %s', sCmdout), 'Segmentation Error');
                        end                        
                   end

                   if bHeadneckMuscles == true

                        sOption = '';
                        if forceSplitMachineLearningDialog('get') == true
                            sOption = sprintf('%s --force_split', sOption);
                        end
                       
                        sCommandLine = sprintf('cmd.exe /c python.exe %s -i %s -o %s %s -ta headneck_muscles', sSegmentatorScript, sNiiFullFileName, sSegmentationFolderName, sOption);

                        [bStatus, sCmdout] = system(sCommandLine);
                 
                        if bStatus
                            progressBar( 1, 'Error: An error occur during machine learning segmentation!');
                            errordlg(sprintf('An error occur during machine learning segmentation: %s', sCmdout), 'Segmentation Error');
                        end                        
                   end

                   if bLiverVessels == true

                        sOption = '';
                        if forceSplitMachineLearningDialog('get') == true
                            sOption = sprintf('%s --force_split', sOption);
                        end
                       
                        sCommandLine = sprintf('cmd.exe /c python.exe %s -i %s -o %s %s -ta liver_vessels', sSegmentatorScript, sNiiFullFileName, sSegmentationFolderName, sOption);

                        [bStatus, sCmdout] = system(sCommandLine);
                 
                        if bStatus
                            progressBar( 1, 'Error: An error occur during machine learning segmentation!');
                            errordlg(sprintf('An error occur during machine learning segmentation: %s', sCmdout), 'Segmentation Error');
                        end                        
                   end

                   if bLiverSegments == true

                        sOption = '';
                        if forceSplitMachineLearningDialog('get') == true
                            sOption = sprintf('%s --force_split', sOption);
                        end
                       
                        sCommandLine = sprintf('cmd.exe /c python.exe %s -i %s -o %s %s -ta liver_segments', sSegmentatorScript, sNiiFullFileName, sSegmentationFolderName, sOption);

                        [bStatus, sCmdout] = system(sCommandLine);
                 
                        if bStatus
                            progressBar( 1, 'Error: An error occur during machine learning segmentation!');
                            errordlg(sprintf('An error occur during machine learning segmentation: %s', sCmdout), 'Segmentation Error');
                        end                         
                   end

                   if bBrainStructures == true

                        sOption = '';
                        if forceSplitMachineLearningDialog('get') == true
                            sOption = sprintf('%s --force_split', sOption);
                        end
                       
                        sCommandLine = sprintf('cmd.exe /c python.exe %s -i %s -o %s %s -ta brain_structures', sSegmentatorScript, sNiiFullFileName, sSegmentationFolderName, sOption);

                        [bStatus, sCmdout] = system(sCommandLine);
                 
                        if bStatus
                            progressBar( 1, 'Error: An error occur during machine learning segmentation!');
                            errordlg(sprintf('An error occur during machine learning segmentation: %s', sCmdout), 'Segmentation Error');
                        end                        
                   end

                   if bBody == true

                        sOption = '';
                        if forceSplitMachineLearningDialog('get') == true
                            sOption = sprintf('%s --force_split', sOption);
                        end
                       
                        sCommandLine = sprintf('cmd.exe /c python.exe %s -i %s -o %s %s -ta body', sSegmentatorScript, sNiiFullFileName, sSegmentationFolderName, sOption);

                        [bStatus, sCmdout] = system(sCommandLine);
                 
                        if bStatus
                            progressBar( 1, 'Error: An error occur during machine learning segmentation!');
                            errordlg(sprintf('An error occur during machine learning segmentation: %s', sCmdout), 'Segmentation Error');
                        end                        
                   end

                   if bLungVessels == true

                        sOption = '';
                        if forceSplitMachineLearningDialog('get') == true
                            sOption = sprintf('%s --force_split', sOption);
                        end
                       
                        sCommandLine = sprintf('cmd.exe /c python.exe %s -i %s -o %s %s -ta lung_vessels', sSegmentatorScript, sNiiFullFileName, sSegmentationFolderName, sOption);

                        [bStatus, sCmdout] = system(sCommandLine);
                 
                        if bStatus
                            progressBar( 1, 'Error: An error occur during machine learning segmentation!');
                            errordlg(sprintf('An error occur during machine learning segmentation: %s', sCmdout), 'Segmentation Error');
                        end                        
                   end

                   if bCerebralBleed == true

                        sOption = '';
%                         if forceSplitMachineLearningDialog('get') == true
%                             sOption = sprintf('%s --force_split', sOption);
%                         end
                       
                        sCommandLine = sprintf('cmd.exe /c python.exe %s -i %s -o %s %s -ta cerebral_bleed', sSegmentatorScript, sNiiFullFileName, sSegmentationFolderName, sOption);

                        [bStatus, sCmdout] = system(sCommandLine);
                 
                        if bStatus
                            progressBar( 1, 'Error: An error occur during machine learning segmentation!');
                            errordlg(sprintf('An error occur during machine learning segmentation: %s', sCmdout), 'Segmentation Error');
                        end                        
                   end

                   if bHipImplant == true

                        sOption = '';
                        if forceSplitMachineLearningDialog('get') == true
                            sOption = sprintf('%s --force_split', sOption);
                        end
                       
                        sCommandLine = sprintf('cmd.exe /c python.exe %s -i %s -o %s %s -ta hip_implant', sSegmentatorScript, sNiiFullFileName, sSegmentationFolderName, sOption);

                        [bStatus, sCmdout] = system(sCommandLine);
                 
                        if bStatus
                            progressBar( 1, 'Error: An error occur during machine learning segmentation!');
                            errordlg(sprintf('An error occur during machine learning segmentation: %s', sCmdout), 'Segmentation Error');
                        end                        
                   end

                   if bCoronaryArteries == true

                        sOption = '';
%                         if forceSplitMachineLearningDialog('get') == true
%                             sOption = sprintf('%s --force_split', sOption);
%                         end
                       
                        sCommandLine = sprintf('cmd.exe /c python.exe %s -i %s -o %s %s -ta coronary_arteries', sSegmentatorScript, sNiiFullFileName, sSegmentationFolderName, sOption);

                        [bStatus, sCmdout] = system(sCommandLine);
                 
                        if bStatus
                            progressBar( 1, 'Error: An error occur during machine learning segmentation!');
                            errordlg(sprintf('An error occur during machine learning segmentation: %s', sCmdout), 'Segmentation Error');
                        end                        
                   end

                   if bHeartchambersHighres == true

                        sOption = '';
%                         if forceSplitMachineLearningDialog('get') == true
%                             sOption = sprintf('%s --force_split', sOption);
%                         end
                       
                        sCommandLine = sprintf('cmd.exe /c python.exe %s -i %s -o %s %s -ta heartchambers_highres', sSegmentatorScript, sNiiFullFileName, sSegmentationFolderName, sOption);

                        [bStatus, sCmdout] = system(sCommandLine);
                 
                        if bStatus
                            progressBar( 1, 'Error: An error occur during machine learning segmentation!');
                            errordlg(sprintf('An error occur during machine learning segmentation: %s', sCmdout), 'Segmentation Error');
                        end                        
                   end

                   if bAppendicularBones == true

                        sOption = '';
                        if forceSplitMachineLearningDialog('get') == true
                            sOption = sprintf('%s --force_split', sOption);
                        end
                       
                        sCommandLine = sprintf('cmd.exe /c python.exe %s -i %s -o %s %s -ta appendicular_bones', sSegmentatorScript, sNiiFullFileName, sSegmentationFolderName, sOption);

                        [bStatus, sCmdout] = system(sCommandLine);
                 
                        if bStatus
                            progressBar( 1, 'Error: An error occur during machine learning segmentation!');
                            errordlg(sprintf('An error occur during machine learning segmentation: %s', sCmdout), 'Segmentation Error');
                        end                        
                   end

                   if bPleuralPericardEffusion == true

                        sOption = '';
                        if forceSplitMachineLearningDialog('get') == true
                            sOption = sprintf('%s --force_split', sOption);
                        end
                       
                        sCommandLine = sprintf('cmd.exe /c python.exe %s -i %s -o %s %s -ta pleural_pericard_effusion', sSegmentatorScript, sNiiFullFileName, sSegmentationFolderName, sOption);

                        [bStatus, sCmdout] = system(sCommandLine);
                 
                        if bStatus
                            progressBar( 1, 'Error: An error occur during machine learning segmentation!');
                            errordlg(sprintf('An error occur during machine learning segmentation: %s', sCmdout), 'Segmentation Error');
                        end                        
                   end

                   if bSkeleton == true || ...
                      bCardiovascularSystem == true || ...
                      bOtherOrgans == true || ...               
                      bGastrointestinalTract == true || ...
                      bMuscles == true 

                        sOption = '';
                        if fastMachineLearningDialog('get') == true

                            sOption = sprintf('%s --fast', sOption);
                        end
        
                        if forceSplitMachineLearningDialog('get') == true

                            sOption = sprintf('%s --force_split', sOption);
                        end
        
                        if bodySegMachineLearningDialog('get') == true 

                            sOption = sprintf('%s --body_seg', sOption);
                        end

                        sCommandLine = sprintf('cmd.exe /c python.exe %s -i %s -o %s %s', sSegmentatorScript, sNiiFullFileName, sSegmentationFolderName, sOption);

                        [bStatus, sCmdout] = system(sCommandLine);
                 
                        if bStatus
                            progressBar( 1, 'Error: An error occur during machine learning segmentation!');
                            errordlg(sprintf('An error occur during machine learning segmentation: %s', sCmdout), 'Segmentation Error');
                        end
                   end
                else % MR
                    
                    if bTissueTypes == true

                        sOption = '';
                        if forceSplitMachineLearningDialog('get') == true
                            sOption = sprintf('%s --force_split', sOption);
                        end

                        sCommandLine = sprintf('cmd.exe /c python.exe %s -i %s -o %s %s -ta tissue_types_mr', sSegmentatorScript, sNiiFullFileName, sSegmentationFolderName, sOption);

                        [bStatus, sCmdout] = system(sCommandLine);
                 
                        if bStatus
                            progressBar( 1, 'Error: An error occur during machine learning segmentation!');
                            errordlg(sprintf('An error occur during machine learning segmentation: %s', sCmdout), 'Segmentation Error');
                        end                       
                    end

                    if bSkeleton == true || ...
                       bCardiovascularSystem == true || ...
                       bOtherOrgans == true 

                        sOption = '';
                        if fastMachineLearningDialog('get') == true
                            sOption = sprintf('%s --fast', sOption);
                        end
        
                        if forceSplitMachineLearningDialog('get') == true
                            sOption = sprintf('%s --force_split', sOption);
                        end

                        sCommandLine = sprintf('cmd.exe /c python.exe %s -i %s -o %s %s -ta total_mr', sSegmentatorScript, sNiiFullFileName, sSegmentationFolderName, sOption);

                        [bStatus, sCmdout] = system(sCommandLine);
                 
                        if bStatus
                            progressBar( 1, 'Error: An error occur during machine learning segmentation!');
                            errordlg(sprintf('An error occur during machine learning segmentation: %s', sCmdout), 'Segmentation Error');
                        end                        
                    end
                end
     %           else
     %               sCommandLine = sprintf('cmd.exe /c python.exe %sTotalSegmentator -i %s -o %s --force_split --body_seg', sSegmentatorPath, sNiiFullFileName, sSegmentationFolderName);
     %           end
    
                progressBar(3/4, 'Importing mask, please wait.');
    
                nii2voiMask(sSegmentationFolderName);
               

            elseif isunix % Linux is not yet supported

                progressBar( 1, 'Error: Machine Learning under Linux is not supported');
                errordlg('Machine Learning under Linux is not supported', 'Machine Learning Validation');

            else % Mac is not yet supported

                progressBar( 1, 'Error: Machine Learning under Mac is not supported');
                errordlg('Machine Learning under Mac is not supported', 'Machine Learning Validation');
            end

        end

        % Delete .nii folder

        if exist(char(sNiiTmpDir), 'dir')
            rmdir(char(sNiiTmpDir), 's');
        end

        progressBar(1, 'Ready');

         catch ME
            logErrorToFile(ME);  
            progressBar(1, 'Error: proceedMachineSegmentationCallback()!');

        end

        delete(dlgMachineSegmentation);
%
%         set(fiMainWindowPtr('get'), 'Pointer', 'default');
%         drawnow;

        refreshImages();

    end

    function nii2voiMask(sSegmentationFolderName)

        dSerieOffset = get(uiSeriesPtr('get'), 'Value');

        % Skeleton

        progressBar(3.2/5, 'Scanning skeleton masks');

        adOffset = cellfun( @(chkMachineSegmentationSkeleton) chkMachineSegmentationSkeleton.Value, chkMachineSegmentationSkeleton, 'uni', true );

        if ~isempty(find(adOffset, true))

            for aa=1:numel(adOffset)

                if adOffset(aa) == true

                    progressBar(aa/(numel(adOffset)-0.009), sprintf('Importing skeleton mask %d/%d', aa, numel(adOffset) ));

                    sObjectName = lower(asSkeletonName{aa});

                    switch lower(sObjectName)

                        case 'rib left [1-12]'

                            csEditValue = get(edtMachineSegmentationSkeleton{aa}, 'string');

                            dObjectFrom = str2double(extractBefore(csEditValue,'-'));
                            dObjectTo   = str2double(extractAfter (csEditValue,'-'));

                            for jj=dObjectFrom:dObjectTo

                                progressBar(jj/dObjectTo-0.009, sprintf('Importing rib left %d/%d', jj, dObjectTo ));


                                sNiiFileName = sprintf('rib_left_%d', jj);
                                sNiiFileName = sprintf('%s%s.nii.gz', sSegmentationFolderName, sNiiFileName);

                                if exist(sNiiFileName, 'file')

                                    % xmin=0.5;
                                    % xmax=1;
                                    % aColor=xmin+rand(1,3)*(xmax-xmin);
                                    aColor = generateUniqueColor(false);

                                    nii = nii_tool('load', sNiiFileName);
                                    aMask = imrotate3(nii.img, 90, [0 0 1], 'nearest');
                                    aMask = aMask(:,:,end:-1:1);

                                    maskToVoi(aMask, sprintf('Rib Left %d', jj), 'Bone', aColor, 'axial', dSerieOffset, pixelEdge('get'));
                                end
                            end

                        case 'rib right [1-12]'

                            csEditValue = get(edtMachineSegmentationSkeleton{aa}, 'string');

                            dObjectFrom = str2double(extractBefore(csEditValue,'-'));
                            dObjectTo   = str2double(extractAfter (csEditValue,'-'));

                            for jj=dObjectFrom:dObjectTo

                                progressBar(jj/dObjectTo-0.009, sprintf('Importing rib right %d/%d', jj, dObjectTo ));

                                sNiiFileName = sprintf('rib_right_%d', jj);
                                sNiiFileName = sprintf('%s%s.nii.gz', sSegmentationFolderName, sNiiFileName);

                                if exist(sNiiFileName, 'file')

                                    % xmin=0.5;
                                    % xmax=1;
                                    % aColor=xmin+rand(1,3)*(xmax-xmin);
                                    aColor = generateUniqueColor(false);

                                    nii = nii_tool('load', sNiiFileName);
                                    aMask = imrotate3(nii.img, 90, [0 0 1], 'nearest');
                                    aMask = aMask(:,:,end:-1:1);

                                    maskToVoi(aMask, sprintf('Rib Right %d', jj), 'Bone', aColor, 'axial', dSerieOffset, pixelEdge('get'));
                                end
                            end

                        case 'vertebrae c[1-7]'

                            csEditValue = get(edtMachineSegmentationSkeleton{aa}, 'string');

                            dObjectFrom = str2double(extractBefore(csEditValue,'-'));
                            dObjectTo   = str2double(extractAfter (csEditValue,'-'));

                            for jj=dObjectFrom:dObjectTo

                                progressBar(jj/dObjectTo-0.009, sprintf('Importing vertebrae C %d/%d', jj, dObjectTo ));

                                sNiiFileName = sprintf('vertebrae_C%d', jj);
                                sNiiFileName = sprintf('%s%s.nii.gz', sSegmentationFolderName, sNiiFileName);

                                if exist(sNiiFileName, 'file')

                                    % xmin=0.5;
                                    % xmax=1;
                                    % aColor=xmin+rand(1,3)*(xmax-xmin);
                                    aColor = generateUniqueColor(false);

                                    nii = nii_tool('load', sNiiFileName);
                                    aMask = imrotate3(nii.img, 90, [0 0 1], 'nearest');
                                    aMask = aMask(:,:,end:-1:1);

                                    maskToVoi(aMask, sprintf('Vertebrae C%d', jj), 'Bone', aColor, 'axial', dSerieOffset, pixelEdge('get'));
                                end
                            end

                        case 'vertebrae t[1-12]'

                            csEditValue = get(edtMachineSegmentationSkeleton{aa}, 'string');

                            dObjectFrom = str2double(extractBefore(csEditValue,'-'));
                            dObjectTo   = str2double(extractAfter (csEditValue,'-'));

                            for jj=dObjectFrom:dObjectTo

                                progressBar(jj/dObjectTo-0.009, sprintf('Importing vertebrae T %d/%d', jj, dObjectTo ));

                                sNiiFileName = sprintf('vertebrae_T%d', jj);
                                sNiiFileName = sprintf('%s%s.nii.gz', sSegmentationFolderName, sNiiFileName);

                                if exist(sNiiFileName, 'file')

                                    % xmin=0.5;
                                    % xmax=1;
                                    % aColor=xmin+rand(1,3)*(xmax-xmin);
                                    aColor = generateUniqueColor(false);

                                    nii = nii_tool('load', sNiiFileName);
                                    aMask = imrotate3(nii.img, 90, [0 0 1], 'nearest');
                                    aMask = aMask(:,:,end:-1:1);

                                    maskToVoi(aMask, sprintf('Vertebrae T%d', jj), 'Bone', aColor, 'axial', dSerieOffset, pixelEdge('get'));
                                end
                            end

                        case 'vertebrae l[1-5]'

                            csEditValue = get(edtMachineSegmentationSkeleton{aa}, 'string');

                            dObjectFrom = str2double(extractBefore(csEditValue,'-'));
                            dObjectTo   = str2double(extractAfter (csEditValue,'-'));

                            for jj=dObjectFrom:dObjectTo

                                progressBar(jj/dObjectTo-0.009, sprintf('Importing vertebrae L %d/%d', jj, dObjectTo ));

                                sNiiFileName = sprintf('vertebrae_L%d', jj);
                                sNiiFileName = sprintf('%s%s.nii.gz', sSegmentationFolderName, sNiiFileName);

                                if exist(sNiiFileName, 'file')

                                    % xmin=0.5;
                                    % xmax=1;
                                    % aColor=xmin+rand(1,3)*(xmax-xmin);
                                    aColor = generateUniqueColor(false);

                                    nii = nii_tool('load', sNiiFileName);
                                    aMask = imrotate3(nii.img, 90, [0 0 1], 'nearest');
                                    aMask = aMask(:,:,end:-1:1);

                                    maskToVoi(aMask, sprintf('Vertebrae L%d', jj), 'Bone', aColor, 'axial', dSerieOffset, pixelEdge('get'));
                                end
                            end

                        case 'ribs' % ribs need to be combined

                            % xmin=0.5;
                            % xmax=1;
                            % aColor=xmin+rand(1,3)*(xmax-xmin);
                            aColor = generateUniqueColor(false);

                            if CLASSES_CT == true

                                sNiiFileName = 'combined_ribs.nii.gz';
    
                                sCommandLine = sprintf('cmd.exe /c python.exe %s -i %s -o %s%s -m ribs', sSegmentatorCombineMasks, sSegmentationFolderName, sSegmentationFolderName, sNiiFileName);
    
                                [bStatus, sCmdout] = system(sCommandLine);
    
                                if bStatus
                                    progressBar( 1, 'Error: An error occur during ribs combine mask!');
                                    errordlg(sprintf('An error occur during ribs combine mask: %s', sCmdout), 'Segmentation Error');
                                else % Process succeed
    
                                    sNiiFileName = sprintf('%s%s', sSegmentationFolderName, sNiiFileName);
    
                                    if exist(sNiiFileName, 'file')
                                        nii = nii_tool('load', sNiiFileName);
                                        aMask = imrotate3(nii.img, 90, [0 0 1], 'nearest');
                                        aMask = aMask(:,:,end:-1:1);
    
                                        maskToVoi(aMask, asSkeletonName{aa}, 'Bone', aColor, 'axial', dSerieOffset, pixelEdge('get'));
                                   end

                                end

                            else

                                sNiiFileName = replace(lower(sObjectName), ' ', '_');
                                sNiiFileName = sprintf('%s%s.nii.gz', sSegmentationFolderName, sNiiFileName);
    
                                if exist(sNiiFileName, 'file')
    
                                    nii = nii_tool('load', sNiiFileName);
                                    aMask = imrotate3(nii.img, 90, [0 0 1], 'nearest');
                                    aMask = aMask(:,:,end:-1:1);
    
                                    maskToVoi(aMask, asSkeletonName{aa}, 'Bone', aColor, 'axial', dSerieOffset, pixelEdge('get'));
                                end
                            end

                        case 'vertebrae' % vertebrae need to be combined
                            % 
                            % xmin=0.5;
                            % xmax=1;
                            % aColor=xmin+rand(1,3)*(xmax-xmin);
                            aColor = generateUniqueColor(false);

                            if CLASSES_CT == true

                                sNiiFileName = 'combined_vertebrae.nii.gz';
    
                                sCommandLine = sprintf('cmd.exe /c python.exe %s -i %s -o %s%s -m vertebrae', sSegmentatorCombineMasks, sSegmentationFolderName, sSegmentationFolderName, sNiiFileName);
    
                                [bStatus, sCmdout] = system(sCommandLine);
    
                                if bStatus
                                    progressBar( 1, 'Error: An error occur during vertebrae combine mask!');
                                    errordlg(sprintf('An error occur during vertebrae combine mask: %s', sCmdout), 'Segmentation Error');
                                else % Process succeed
    
                                    sNiiFileName = sprintf('%s%s', sSegmentationFolderName, sNiiFileName);
    
                                    if exist(sNiiFileName, 'file')
                                        nii = nii_tool('load', sNiiFileName);
                                        aMask = imrotate3(nii.img, 90, [0 0 1], 'nearest');
                                        aMask = aMask(:,:,end:-1:1);
    
                                        maskToVoi(aMask, asSkeletonName{aa}, 'Bone', aColor, 'axial', dSerieOffset, pixelEdge('get'));
                                   end
    
                                end
                            else

                                sNiiFileName = replace(lower(sObjectName), ' ', '_');
                                sNiiFileName = sprintf('%s%s.nii.gz', sSegmentationFolderName, sNiiFileName);
    
                                if exist(sNiiFileName, 'file')
    
                                    nii = nii_tool('load', sNiiFileName);
                                    aMask = imrotate3(nii.img, 90, [0 0 1], 'nearest');
                                    aMask = aMask(:,:,end:-1:1);
    
                                    maskToVoi(aMask, asSkeletonName{aa}, 'Bone', aColor, 'axial', dSerieOffset, pixelEdge('get'));
                                end
                            end
                            
                        case 'vertebrae ribs' % vertebrae need to be combined

                            % xmin=0.5;
                            % xmax=1;
                            % aColor=xmin+rand(1,3)*(xmax-xmin);
                            aColor = generateUniqueColor(false);

                            sNiiFileName = 'combined_vertebrae.nii.gz';

                            sCommandLine = sprintf('cmd.exe /c python.exe %s -i %s -o %s%s -m vertebrae_ribs', sSegmentatorCombineMasks, sSegmentationFolderName, sSegmentationFolderName, sNiiFileName);

                            [bStatus, sCmdout] = system(sCommandLine);

                            if bStatus
                                progressBar( 1, 'Error: An error occur during vertebrae ribs combine mask!');
                                errordlg(sprintf('An error occur during vertebrae ribs combine mask: %s', sCmdout), 'Segmentation Error');
                            else % Process succeed

                                sNiiFileName = sprintf('%s%s', sSegmentationFolderName, sNiiFileName);

                                if exist(sNiiFileName, 'file')
                                    nii = nii_tool('load', sNiiFileName);
                                    aMask = imrotate3(nii.img, 90, [0 0 1], 'nearest');
                                    aMask = aMask(:,:,end:-1:1);

                                    maskToVoi(aMask, asSkeletonName{aa}, 'Bone', aColor, 'axial', dSerieOffset, pixelEdge('get'));
                               end

                            end

                        otherwise

                            % xmin=0.5;
                            % xmax=1;
                            % aColor=xmin+rand(1,3)*(xmax-xmin);
                            aColor = generateUniqueColor(false);

                            sNiiFileName = replace(lower(sObjectName), ' ', '_');
                            sNiiFileName = sprintf('%s%s.nii.gz', sSegmentationFolderName, sNiiFileName);

                            if exist(sNiiFileName, 'file')

                                nii = nii_tool('load', sNiiFileName);
                                aMask = imrotate3(nii.img, 90, [0 0 1], 'nearest');
                                aMask = aMask(:,:,end:-1:1);

                                maskToVoi(aMask, asSkeletonName{aa}, 'Bone', aColor, 'axial', dSerieOffset, pixelEdge('get'));
                           end
                    end

                end
            end

            if exist('aMask', 'var')
                clear aMask;
            end
        end

        % Cardiovascular System

        progressBar(3.3/4, 'Scanning cardiovascular system masks');

        adOffset = cellfun( @(chkMachineSegmentationCardiovascular) chkMachineSegmentationCardiovascular.Value, chkMachineSegmentationCardiovascular, 'uni', true );

        if ~isempty(find(adOffset, true))

            for bb=1:numel(adOffset)

                if adOffset(bb) == true

                    progressBar(bb/(numel(adOffset)-0.009), sprintf('Importing cardiovascular system mask %d/%d', bb, numel(adOffset) ));

                    sObjectName = lower(asCardiovascularName{bb});

                    switch lower(sObjectName)

                        case 'heart' % heart exist

                            % xmin=0.5;
                            % xmax=1;
                            % aColor=xmin+rand(1,3)*(xmax-xmin);
                            aColor = generateUniqueColor(false);

                            sNiiFileName = 'heart.nii.gz';
                            sNiiFileName = sprintf('%s%s', sSegmentationFolderName, sNiiFileName);

                            if exist(sNiiFileName, 'file')

                                nii = nii_tool('load', sNiiFileName);
                                aMask = imrotate3(nii.img, 90, [0 0 1], 'nearest');
                                aMask = aMask(:,:,end:-1:1);

                                maskToVoi(aMask, asCardiovascularName{bb}, 'Unspecified', aColor, 'axial', dSerieOffset, pixelEdge('get'));

                            else % heart need to be combined

                                if CLASSES_CT == true

                                    sNiiFileName = 'combined_heart.nii.gz';
    
                                    sCommandLine = sprintf('cmd.exe /c python.exe %s -i %s -o %s%s -m heart', sSegmentatorCombineMasks, sSegmentationFolderName, sSegmentationFolderName, sNiiFileName);
    
                                    [bStatus, sCmdout] = system(sCommandLine);
    
                                    if bStatus
                                        progressBar( 1, 'Error: An error occur during heart combine mask!');
                                        errordlg(sprintf('An error occur during heart combine mask: %s', sCmdout), 'Segmentation Error');
                                    else % Process succeed
    
                                        sNiiFileName = sprintf('%s%s', sSegmentationFolderName, sNiiFileName);
    
                                        if exist(sNiiFileName, 'file')
                                            nii = nii_tool('load', sNiiFileName);
                                            aMask = imrotate3(nii.img, 90, [0 0 1], 'nearest');
                                            aMask = aMask(:,:,end:-1:1);
    
                                            maskToVoi(aMask, asCardiovascularName{bb}, 'Unspecified', aColor, 'axial', dSerieOffset, pixelEdge('get'));
                                       end
    
                                    end
                                end
                            end

                        otherwise

                            % xmin=0.5;
                            % xmax=1;
                            % aColor=xmin+rand(1,3)*(xmax-xmin);
                            aColor = generateUniqueColor(false);

                            switch lower(sObjectName)
                                case 'atrium left' % heart need to be added
                                    sNiiFileName = replace(lower(sObjectName), ' ', '_');
                                    sNiiFileName = sprintf('%sheart_%s.nii.gz', sSegmentationFolderName, sNiiFileName);

                                case 'atrium right' % heart need to be added
                                    sNiiFileName = replace(lower(sObjectName), ' ', '_');
                                    sNiiFileName = sprintf('%sheart_%s.nii.gz', sSegmentationFolderName, sNiiFileName);

                                case 'myocardium' % heart need to be added
                                    sNiiFileName = replace(lower(sObjectName), ' ', '_');
                                    sNiiFileName = sprintf('%sheart_%s.nii.gz', sSegmentationFolderName, sNiiFileName);

                                case 'ventricle left' % heart need to be added
                                    sNiiFileName = replace(lower(sObjectName), ' ', '_');
                                    sNiiFileName = sprintf('%sheart_%s.nii.gz', sSegmentationFolderName, sNiiFileName);

                                case 'ventricle right' % heart need to be added
                                    sNiiFileName = replace(lower(sObjectName), ' ', '_');
                                    sNiiFileName = sprintf('%sheart_%s.nii.gz', sSegmentationFolderName, sNiiFileName);

                                case 'portal & splenic vein'
                                    sNiiFileName = sprintf('%sportal_vein_and_splenic_vein.nii.gz', sSegmentationFolderName);

                                otherwise
                                    sNiiFileName = replace(lower(sObjectName), ' ', '_');
                                    sNiiFileName = sprintf('%s%s.nii.gz', sSegmentationFolderName, sNiiFileName);
                            end

                            if exist(sNiiFileName, 'file')

                                nii = nii_tool('load', sNiiFileName);
                                aMask = imrotate3(nii.img, 90, [0 0 1], 'nearest');
                                aMask = aMask(:,:,end:-1:1);

                                maskToVoi(aMask, asCardiovascularName{bb}, 'Unspecified', aColor, 'axial', dSerieOffset, pixelEdge('get'));
                            end
                    end

                end
            end

            if exist('aMask', 'var')
                clear aMask;
            end
        end

        % Other Organs

        progressBar(3.4/4, 'Scanning other organs masks');

        adOffset = cellfun( @(chkMachineSegmentationOtherOrgans) chkMachineSegmentationOtherOrgans.Value, chkMachineSegmentationOtherOrgans, 'uni', true );

        if ~isempty(find(adOffset, true))

            for cc=1:numel(adOffset)

                if adOffset(cc) == true

                    progressBar(cc/(numel(adOffset)-0.009), sprintf('Importing other organ mask %d/%d', cc, numel(adOffset) ));

                    sObjectName = lower(asOtherOrgansName{cc});

                    switch lower(sObjectName)

                        case 'lungs' % Lung need to be combined

                            aColor=[1 0.5 1]; % Pink

                            sNiiFileName = 'combined_lungs.nii.gz';

                            sCommandLine = sprintf('cmd.exe /c python.exe %s -i %s -o %s%s -m lung', sSegmentatorCombineMasks, sSegmentationFolderName, sSegmentationFolderName, sNiiFileName);

                            [bStatus, sCmdout] = system(sCommandLine);

                            if bStatus
                                progressBar( 1, 'Error: An error occur during lung combine mask!');
                                errordlg(sprintf('An error occur during lung combine mask: %s', sCmdout), 'Segmentation Error');
                            else % Process succeed

                                sNiiFileName = sprintf('%s%s', sSegmentationFolderName, sNiiFileName);

                                if exist(sNiiFileName, 'file')
                                    nii = nii_tool('load', sNiiFileName);
                                    aMask = imrotate3(nii.img, 90, [0 0 1], 'nearest');
                                    aMask = aMask(:,:,end:-1:1);

                                    maskToVoi(aMask, asOtherOrgansName{cc}, 'Lung', aColor, 'axial', dSerieOffset, pixelEdge('get'));
                               end

                            end

                        case 'lung left' % Lung left need to be combined
                         
                            aColor=[0.7 1 0.7]; % Light green

                            if CLASSES_CT == true
 
                                sNiiFileName = 'combined_lung_left.nii.gz';
    
                                sCommandLine = sprintf('cmd.exe /c python.exe %s -i %s -o %s%s -m lung_left', sSegmentatorCombineMasks, sSegmentationFolderName, sSegmentationFolderName, sNiiFileName);
    
                                [bStatus, sCmdout] = system(sCommandLine);
    
                                if bStatus
                                    progressBar( 1, 'Error: An error occur during lung left combine mask!');
                                    errordlg(sprintf('An error occur during lung left combine mask: %s', sCmdout), 'Segmentation Error');
                                else % Process succeed
    
                                    sNiiFileName = sprintf('%s%s', sSegmentationFolderName, sNiiFileName);
    
                                    if exist(sNiiFileName, 'file')
                                        nii = nii_tool('load', sNiiFileName);
                                        aMask = imrotate3(nii.img, 90, [0 0 1], 'nearest');
                                        aMask = aMask(:,:,end:-1:1);
    
                                        maskToVoi(aMask, asOtherOrgansName{cc}, 'Lung', aColor, 'axial', dSerieOffset, pixelEdge('get'));
                                   end
    
                                end
                            else
                                sNiiFileName = replace(lower(sObjectName), ' ', '_');
                                sNiiFileName = sprintf('%s%s.nii.gz', sSegmentationFolderName, sNiiFileName);
    
                                if exist(sNiiFileName, 'file')
    
                                    nii = nii_tool('load', sNiiFileName);
                                    aMask = imrotate3(nii.img, 90, [0 0 1], 'nearest');
                                    aMask = aMask(:,:,end:-1:1);
    
                                    maskToVoi(aMask, asOtherOrgansName{cc}, 'Lung', aColor, 'axial', dSerieOffset, pixelEdge('get'));
                                end                              
                            end

                        case 'lung right' % Lung right need to be combined

                            aColor=[0.67 0 1]; % Violet

                            if CLASSES_CT == true

                                sNiiFileName = 'combined_lung_right.nii.gz';
    
                                sCommandLine = sprintf('cmd.exe /c python.exe %s -i %s -o %s%s -m lung_right', sSegmentatorCombineMasks, sSegmentationFolderName, sSegmentationFolderName, sNiiFileName);
    
                                [bStatus, sCmdout] = system(sCommandLine);
    
                                if bStatus
                                    progressBar( 1, 'Error: An error occur during lung right combine mask!');
                                    errordlg(sprintf('An error occur during lung right combine mask: %s', sCmdout), 'Segmentation Error');
                                else % Process succeed
    
                                    sNiiFileName = sprintf('%s%s', sSegmentationFolderName, sNiiFileName);
    
                                    if exist(sNiiFileName, 'file')
                                        nii = nii_tool('load', sNiiFileName);
                                        aMask = imrotate3(nii.img, 90, [0 0 1], 'nearest');
                                        aMask = aMask(:,:,end:-1:1);
    
                                        maskToVoi(aMask, asOtherOrgansName{cc}, 'Lung', aColor, 'axial', dSerieOffset, pixelEdge('get'));
                                   end
    
                                end
                            else
                                sNiiFileName = replace(lower(sObjectName), ' ', '_');
                                sNiiFileName = sprintf('%s%s.nii.gz', sSegmentationFolderName, sNiiFileName);
    
                                if exist(sNiiFileName, 'file')
    
                                    nii = nii_tool('load', sNiiFileName);
                                    aMask = imrotate3(nii.img, 90, [0 0 1], 'nearest');
                                    aMask = aMask(:,:,end:-1:1);
    
                                    maskToVoi(aMask, asOtherOrgansName{cc}, 'Lung', aColor, 'axial', dSerieOffset, pixelEdge('get'));
                                end                              
                            end

                        otherwise

                            switch lower(sObjectName)

                                case 'liver'
                                    aColor=[1 0.41 0.16]; % Orange
                                    sLesionType = 'Liver';

                                case 'lung upper lobe left'
                                    aColor=[0 1 1]; % Cyan
                                    sLesionType = 'Lung';

                                case 'lung upper lobe right'
                                    aColor=[0 1 0]; % Green
                                    sLesionType = 'Lung';

                                case 'lung middle lobe right'
                                    aColor=[1 1 0]; % Yellow
                                    sLesionType = 'Lung';

                                case 'lung lower lobe left'
                                    aColor=[1 0 0]; % Red
                                    sLesionType = 'Lung';

                                case 'lung lower lobe right'
                                    aColor=[0 0.5 1]; % Blue
                                    sLesionType = 'Lung';

                                otherwise % Random
                                    % xmin=0.5;
                                    % xmax=1;
                                    % aColor=xmin+rand(1,3)*(xmax-xmin);
                                   aColor = generateUniqueColor(false);
                                   sLesionType = 'Unspecified';
                            end

                            sNiiFileName = replace(lower(sObjectName), ' ', '_');
                            sNiiFileName = sprintf('%s%s.nii.gz', sSegmentationFolderName, sNiiFileName);

                            if exist(sNiiFileName, 'file')

                                nii = nii_tool('load', sNiiFileName);
                                aMask = imrotate3(nii.img, 90, [0 0 1], 'nearest');
                                aMask = aMask(:,:,end:-1:1);

                                maskToVoi(aMask, asOtherOrgansName{cc}, sLesionType, aColor, 'axial', dSerieOffset, pixelEdge('get'));
                            end
                    end

                end
            end

            if exist('aMask', 'var')
                clear aMask;
            end
        end

        % Gastrointestinal Tract

        if CLASSES_CT == true

            progressBar(3.5/4, 'Scanning gastrointestinal tract masks');
    
            adOffset = cellfun( @(chkMachineSegmentationGastrointestinalTract) chkMachineSegmentationGastrointestinalTract.Value, chkMachineSegmentationGastrointestinalTract, 'uni', true );
    
            if ~isempty(find(adOffset, true))
    
                for dd=1:numel(adOffset)
    
                    if adOffset(dd) == true
    
                        progressBar(dd/(numel(adOffset)-0.009), sprintf('Importing gastrointestinal tract mask %d/%d', dd, numel(adOffset) ));
    
                        sObjectName = lower(asGastrointestinalTractName{dd});
    
                        % xmin=0.5;
                        % xmax=1;
                        % aColor=xmin+rand(1,3)*(xmax-xmin);
                        aColor = generateUniqueColor(false);
    
                        sNiiFileName = replace(lower(sObjectName), ' ', '_');
                        sNiiFileName = sprintf('%s%s.nii.gz', sSegmentationFolderName, sNiiFileName);
    
                        if exist(sNiiFileName, 'file')
    
                            nii = nii_tool('load', sNiiFileName);
                            aMask = imrotate3(nii.img, 90, [0 0 1], 'nearest');
                            aMask = aMask(:,:,end:-1:1);
    
                            maskToVoi(aMask, asGastrointestinalTractName{dd}, 'Unspecified', aColor, 'axial', dSerieOffset, pixelEdge('get'));
                        end
    
                    end
                end
    
                if exist('aMask', 'var')
                    clear aMask;
                end
            end
        end
        
        % Muscles

        if CLASSES_CT == true

            progressBar(3.6/4, 'Scanning muscles masks');
    
            adOffset = cellfun( @(chkMachineSegmentationMuscles) chkMachineSegmentationMuscles.Value, chkMachineSegmentationMuscles, 'uni', true );
    
            if ~isempty(find(adOffset, true))
    
                for ee=1:numel(adOffset)
    
                    if adOffset(ee) == true
    
                        progressBar(ee/(numel(adOffset)-0.009), sprintf('Importing muscles mask %d/%d', ee, numel(adOffset) ));
    
                        sObjectName = lower(asMusclesName{ee});
    
                        % xmin=0.5;
                        % xmax=1;
                        % aColor=xmin+rand(1,3)*(xmax-xmin);
                        aColor = generateUniqueColor(false);
    
                        sNiiFileName = replace(lower(sObjectName), ' ', '_');
                        sNiiFileName = sprintf('%s%s.nii.gz', sSegmentationFolderName, sNiiFileName);
    
                        if exist(sNiiFileName, 'file')
    
                            nii = nii_tool('load', sNiiFileName);
                            aMask = imrotate3(nii.img, 90, [0 0 1],'nearest');
                            aMask = aMask(:,:,end:-1:1);
    
                            maskToVoi(aMask, asMusclesName{ee}, 'Unspecified', aColor, 'axial', dSerieOffset, pixelEdge('get'));
                        end
    
                    end
                end
    
                if exist('aMask', 'var')
                    clear aMask;
                end
            end
        end

        % Anonymization

        if CLASSES_CT == true

            progressBar(3.7/4, 'Scanning anonymization masks');
    
            adOffset = cellfun( @(chkMachineSegmentationAnonymization) chkMachineSegmentationAnonymization.Value, chkMachineSegmentationAnonymization, 'uni', true );
    
            if ~isempty(find(adOffset, true))
    
                for ee=1:numel(adOffset)
    
                    if adOffset(ee) == true
    
                        progressBar(ee/(numel(adOffset)-0.009), sprintf('Importing anonymization mask %d/%d', ee, numel(adOffset) ));
    
                        sObjectName = lower(asAnonymizationName{ee});
    
                        % xmin=0.5;
                        % xmax=1;
                        % aColor=xmin+rand(1,3)*(xmax-xmin);
                        aColor = generateUniqueColor(false);
    
                        sNiiFileName = replace(lower(sObjectName), ' ', '_');
                        sNiiFileName = sprintf('%s%s.nii.gz', sSegmentationFolderName, sNiiFileName);
    
                        if exist(sNiiFileName, 'file')
    
                            nii = nii_tool('load', sNiiFileName);
                            aMask = imrotate3(nii.img, 90, [0 0 1],'nearest');
                            aMask = aMask(:,:,end:-1:1);
    
                            maskToVoi(aMask, asAnonymizationName{ee}, 'Unspecified', aColor, 'axial', dSerieOffset, pixelEdge('get'));
                        end
    
                    end
                end
    
                if exist('aMask', 'var')
                    clear aMask;
                end
            end
        end

        % Tissue Types

        progressBar(3.8/4, 'Scanning tissue types masks');

        adOffset = cellfun( @(chkMachineSegmentationTissueTypes) chkMachineSegmentationTissueTypes.Value, chkMachineSegmentationTissueTypes, 'uni', true );

        if ~isempty(find(adOffset, true))

            for ee=1:numel(adOffset)

                if adOffset(ee) == true

                    progressBar(ee/(numel(adOffset)-0.009), sprintf('Importing tissue types mask %d/%d', ee, numel(adOffset) ));

                    sObjectName = lower(asTissueTypesName{ee});

%                         xmin=0.5;
%                         xmax=1;
%                         aColor=xmin+rand(1,3)*(xmax-xmin);

                    sNiiFileName = replace(lower(sObjectName), ' ', '_');
                    sNiiFileName = sprintf('%s%s.nii.gz', sSegmentationFolderName, sNiiFileName);

                    if exist(sNiiFileName, 'file')

                        nii = nii_tool('load', sNiiFileName);
                        aMask = imrotate3(nii.img, 90, [0 0 1],'nearest');
                        aMask = aMask(:,:,end:-1:1);

%                             maskToVoi(aMask, asTissueTypesName{ee}, 'Unspecified', aColor, 'axial', dSerieOffset, pixelEdge('get'), 'holes');

                        addSeriesMask(aMask, asTissueTypesName{ee}, dSerieOffset);

                    end

                end
            end

            if exist('aMask', 'var')
                clear aMask;
            end
                       
        end

        % Head Glands Cavities
    
        if CLASSES_CT == true

            progressBar(3.9/4, 'Scanning head glands cavities masks');
    
            adOffset = cellfun( @(chkMachineSegmentationHeadGlandsCavities) chkMachineSegmentationHeadGlandsCavities.Value, chkMachineSegmentationHeadGlandsCavities, 'uni', true );
    
            if ~isempty(find(adOffset, true))
    
                for ee=1:numel(adOffset)
    
                    if adOffset(ee) == true
    
                        progressBar(ee/(numel(adOffset)-0.009), sprintf('Importing head glands cavities mask %d/%d', ee, numel(adOffset) ));
    
                        sObjectName = lower(asHeadGlandsCavitiesName{ee});
    
                        % xmin=0.5;
                        % xmax=1;
                        % aColor=xmin+rand(1,3)*(xmax-xmin);
                        aColor = generateUniqueColor(false);
   
                        sNiiFileName = replace(lower(sObjectName), ' ', '_');
                        sNiiFileName = sprintf('%s%s.nii.gz', sSegmentationFolderName, sNiiFileName);
    
                        if exist(sNiiFileName, 'file')
    
                            nii = nii_tool('load', sNiiFileName);
                            aMask = imrotate3(nii.img, 90, [0 0 1],'nearest');
                            aMask = aMask(:,:,end:-1:1);
    
                            maskToVoi(aMask, asHeadGlandsCavitiesName{ee}, 'Unspecified', aColor, 'axial', dSerieOffset, pixelEdge('get'), 'noholes');  
    
                        end
    
                    end
                end
    
                if exist('aMask', 'var')
                    clear aMask;
                end
                           
            end
        end

        % Head Muscles
    
        if CLASSES_CT == true

            progressBar(3.91/4, 'Scanning head muscles masks');
    
            adOffset = cellfun( @(chkMachineSegmentationHeadMuscles) chkMachineSegmentationHeadMuscles.Value, chkMachineSegmentationHeadMuscles, 'uni', true );
    
            if ~isempty(find(adOffset, true))
    
                for ee=1:numel(adOffset)
    
                    if adOffset(ee) == true
    
                        progressBar(ee/(numel(adOffset)-0.009), sprintf('Importing head muscles mask %d/%d', ee, numel(adOffset) ));
    
                        sObjectName = lower(asHeadMusclesName{ee});
    
                        % xmin=0.5;
                        % xmax=1;
                        % aColor=xmin+rand(1,3)*(xmax-xmin);
                        aColor = generateUniqueColor(false);
   
                        sNiiFileName = replace(lower(sObjectName), ' ', '_');
                        sNiiFileName = sprintf('%s%s.nii.gz', sSegmentationFolderName, sNiiFileName);
    
                        if exist(sNiiFileName, 'file')
    
                            nii = nii_tool('load', sNiiFileName);
                            aMask = imrotate3(nii.img, 90, [0 0 1],'nearest');
                            aMask = aMask(:,:,end:-1:1);
    
                            maskToVoi(aMask, asHeadMusclesName{ee}, 'Unspecified', aColor, 'axial', dSerieOffset, pixelEdge('get'), 'noholes');  
    
                        end
    
                    end
                end
    
                if exist('aMask', 'var')
                    clear aMask;
                end
                           
            end
        end

        % Headneck Bones Vessels
    
        if CLASSES_CT == true

            progressBar(3.92/4, 'Scanning headneck bones vessels masks');
    
            adOffset = cellfun( @(chkMachineSegmentationHeadneckBonesVessels) chkMachineSegmentationHeadneckBonesVessels.Value, chkMachineSegmentationHeadneckBonesVessels, 'uni', true );
    
            if ~isempty(find(adOffset, true))
    
                for ee=1:numel(adOffset)
    
                    if adOffset(ee) == true
    
                        progressBar(ee/(numel(adOffset)-0.009), sprintf('Importing headneck bones vessels mask %d/%d', ee, numel(adOffset) ));
    
                        sObjectName = lower(asHeadneckBonesVesselsName{ee});
    
                        % xmin=0.5;
                        % xmax=1;
                        % aColor=xmin+rand(1,3)*(xmax-xmin);
                        aColor = generateUniqueColor(false);
   
                        sNiiFileName = replace(lower(sObjectName), ' ', '_');
                        sNiiFileName = sprintf('%s%s.nii.gz', sSegmentationFolderName, sNiiFileName);
    
                        if exist(sNiiFileName, 'file')
    
                            nii = nii_tool('load', sNiiFileName);
                            aMask = imrotate3(nii.img, 90, [0 0 1],'nearest');
                            aMask = aMask(:,:,end:-1:1);
    
                            maskToVoi(aMask, asHeadneckBonesVesselsName{ee}, 'Unspecified', aColor, 'axial', dSerieOffset, pixelEdge('get'), 'noholes');  
    
                        end
    
                    end
                end
    
                if exist('aMask', 'var')
                    clear aMask;
                end
                           
            end
        end

        % Headneck Muscles
    
        if CLASSES_CT == true

            progressBar(3.93/4, 'Scanning headneck muscles masks');
    
            adOffset = cellfun( @(chkMachineSegmentationHeadneckMuscles) chkMachineSegmentationHeadneckMuscles.Value, chkMachineSegmentationHeadneckMuscles, 'uni', true );
    
            if ~isempty(find(adOffset, true))
    
                for ee=1:numel(adOffset)
    
                    if adOffset(ee) == true
    
                        progressBar(ee/(numel(adOffset)-0.009), sprintf('Importing headneck muscles mask %d/%d', ee, numel(adOffset) ));
    
                        sObjectName = lower(asHeadneckMusclesName{ee});
    
                        % xmin=0.5;
                        % xmax=1;
                        % aColor=xmin+rand(1,3)*(xmax-xmin);
                        aColor = generateUniqueColor(false);
  
                        sNiiFileName = replace(lower(sObjectName), ' ', '_');
                        sNiiFileName = sprintf('%s%s.nii.gz', sSegmentationFolderName, sNiiFileName);
    
                        if exist(sNiiFileName, 'file')
    
                            nii = nii_tool('load', sNiiFileName);
                            aMask = imrotate3(nii.img, 90, [0 0 1],'nearest');
                            aMask = aMask(:,:,end:-1:1);
    
                            maskToVoi(aMask, asHeadneckMusclesName{ee}, 'Unspecified', aColor, 'axial', dSerieOffset, pixelEdge('get'), 'noholes');  
    
                        end
    
                    end
                end
    
                if exist('aMask', 'var')
                    clear aMask;
                end
                           
            end
        end

        % Liver Vessels
    
        if CLASSES_CT == true

            progressBar(3.94/4, 'Scanning liver vessels masks');
    
            adOffset = cellfun( @(chkMachineSegmentationLiverVessels) chkMachineSegmentationLiverVessels.Value, chkMachineSegmentationLiverVessels, 'uni', true );
    
            if ~isempty(find(adOffset, true))
    
                for ee=1:numel(adOffset)
    
                    if adOffset(ee) == true
    
                        progressBar(ee/(numel(adOffset)-0.009), sprintf('Importing liver vessels mask %d/%d', ee, numel(adOffset) ));
    
                        sObjectName = lower(asLiverVesselsName{ee});
    
                        % xmin=0.5;
                        % xmax=1;
                        % aColor=xmin+rand(1,3)*(xmax-xmin);
                        aColor = generateUniqueColor(false);
    
                        sNiiFileName = replace(lower(sObjectName), ' ', '_');
                        sNiiFileName = sprintf('%s%s.nii.gz', sSegmentationFolderName, sNiiFileName);
    
                        if exist(sNiiFileName, 'file')
    
                            nii = nii_tool('load', sNiiFileName);
                            aMask = imrotate3(nii.img, 90, [0 0 1],'nearest');
                            aMask = aMask(:,:,end:-1:1);
    
                            if strcmpi(sObjectName, 'Liver Tumor')
                                aMask(aMask~=0)=3;
                                maskImageToVoi(aMask, dSerieOffset, aMask, true, pixelEdge('get'), 0);                      
                            else
                               maskToVoi(aMask, asLiverVesselsName{ee}, 'Liver', aColor, 'axial', dSerieOffset, pixelEdge('get'), 'noholes');  
                            end
                        end
    
                    end
                end
    
                if exist('aMask', 'var')
                    clear aMask;
                end
                           
            end
        end

        % Liver Segments
    
        progressBar(3.95/4, 'Scanning liver segments masks');

        adOffset = cellfun( @(chkMachineSegmentationLiverSegments) chkMachineSegmentationLiverSegments.Value, chkMachineSegmentationLiverSegments, 'uni', true );

        if ~isempty(find(adOffset, true))

            for ee=1:numel(adOffset)

                if adOffset(ee) == true

                    progressBar(ee/(numel(adOffset)-0.009), sprintf('Importing liver Segments mask %d/%d', ee, numel(adOffset) ));

                    sObjectName = lower(asLiverSegmentsName{ee});

                    % xmin=0.5;
                    % xmax=1;
                    % aColor=xmin+rand(1,3)*(xmax-xmin);
                    aColor = generateUniqueColor(false);

                    sNiiFileName = replace(lower(sObjectName), ' ', '_');
                    sNiiFileName = sprintf('%s%s.nii.gz', sSegmentationFolderName, sNiiFileName);

                    if exist(sNiiFileName, 'file')

                        nii = nii_tool('load', sNiiFileName);
                        aMask = imrotate3(nii.img, 90, [0 0 1],'nearest');
                        aMask = aMask(:,:,end:-1:1);

                        maskToVoi(aMask, asLiverSegmentsName{ee}, 'Liver', aColor, 'axial', dSerieOffset, pixelEdge('get'), 'noholes');  
                        
                    end
                end
            end

            if exist('aMask', 'var')
                clear aMask;
            end
                       
        end

        % Brain Structures
    
        if CLASSES_CT == true

            progressBar(3.96/4, 'Scanning brain structures masks');
    
            adOffset = cellfun( @(chkMachineSegmentationBrainStructures) chkMachineSegmentationBrainStructures.Value, chkMachineSegmentationBrainStructures, 'uni', true );
    
            if ~isempty(find(adOffset, true))
    
                for ee=1:numel(adOffset)
    
                    if adOffset(ee) == true
    
                        progressBar(ee/(numel(adOffset)-0.009), sprintf('Importing brain structures mask %d/%d', ee, numel(adOffset) ));
    
                        sObjectName = lower(asBrainStructuresName{ee});
    
                        % xmin=0.5;
                        % xmax=1;
                        % aColor=xmin+rand(1,3)*(xmax-xmin);
                        aColor = generateUniqueColor(false);
    
                        sNiiFileName = replace(lower(sObjectName), ' ', '_');
                        sNiiFileName = sprintf('%s%s.nii.gz', sSegmentationFolderName, sNiiFileName);
    
                        if exist(sNiiFileName, 'file')
    
                            nii = nii_tool('load', sNiiFileName);
                            aMask = imrotate3(nii.img, 90, [0 0 1],'nearest');
                            aMask = aMask(:,:,end:-1:1);
    
                            maskToVoi(aMask, asBrainStructuresName{ee}, 'Unspecified', aColor, 'axial', dSerieOffset, pixelEdge('get'), 'noholes');  
    
                        end
    
                    end
                end
    
                if exist('aMask', 'var')
                    clear aMask;
                end
                           
            end
        end

        % Body Mask

        if CLASSES_CT == true

            progressBar(3.97/4, 'Scanning body masks');
    
            adOffset = cellfun( @(chkMachineSegmentationBody) chkMachineSegmentationBody.Value, chkMachineSegmentationBody, 'uni', true );
    
            if ~isempty(find(adOffset, true))
    
                for ee=1:numel(adOffset)
    
                    if adOffset(ee) == true
    
                        progressBar(ee/(numel(adOffset)-0.009), sprintf('Importing body mask %d/%d', ee, numel(adOffset) ));
    
                        sObjectName = lower(asBodyName{ee});
    
    %                         xmin=0.5;
    %                         xmax=1;
    %                         aColor=xmin+rand(1,3)*(xmax-xmin);
    
                        sNiiFileName = replace(lower(sObjectName), ' ', '_');
                        sNiiFileName = sprintf('%s%s.nii.gz', sSegmentationFolderName, sNiiFileName);
    
                        if exist(sNiiFileName, 'file')
    
                            nii = nii_tool('load', sNiiFileName);
                            aMask = imrotate3(nii.img, 90, [0 0 1],'nearest');
                            aMask = aMask(:,:,end:-1:1);
    
    %                             maskToVoi(aMask, asBodyName{ee}, 'Unspecified', aColor, 'axial', dSerieOffset, pixelEdge('get'), 'holes');
    
                            addSeriesMask(aMask, asBodyName{ee}, dSerieOffset);
    
                        end
    
                    end
                end
    
                if exist('aMask', 'var')
                    clear aMask;
                end
                           
            end

        end

        % Lung Vessels Mask

        if CLASSES_CT == true

            progressBar(3.98/4, 'Scanning lung vessels masks');
    
            adOffset = cellfun( @(chkMachineSegmentationLungVessels) chkMachineSegmentationLungVessels.Value, chkMachineSegmentationLungVessels, 'uni', true );
    
            if ~isempty(find(adOffset, true))
    
                for ee=1:numel(adOffset)
    
                    if adOffset(ee) == true
    
                        progressBar(ee/(numel(adOffset)-0.009), sprintf('Importing lung vessels mask %d/%d', ee, numel(adOffset) ));
    
                        sObjectName = lower(asLungVesselsName{ee});
    
    %                         xmin=0.5;
    %                         xmax=1;
    %                         aColor=xmin+rand(1,3)*(xmax-xmin);
    
                        sNiiFileName = replace(lower(sObjectName), ' ', '_');
                        sNiiFileName = sprintf('%s%s.nii.gz', sSegmentationFolderName, sNiiFileName);
    
                        if exist(sNiiFileName, 'file')
    
                            nii = nii_tool('load', sNiiFileName);
                            aMask = imrotate3(nii.img, 90, [0 0 1],'nearest');
                            aMask = aMask(:,:,end:-1:1);
    
    %                             maskToVoi(aMask, asLungVesselsName{ee}, 'Lung', aColor, 'axial', dSerieOffset, pixelEdge('get'), 'holes');
    
                            addSeriesMask(aMask, asLungVesselsName{ee}, dSerieOffset);
    
                        end
    
                    end
                end
    
                if exist('aMask', 'var')
                    clear aMask;
                end            
            end
        end

        % Cerebral Bleed 

        if CLASSES_CT == true

            progressBar(3.99/4, 'Scanning cerebral bleed masks');
    
            adOffset = cellfun( @(chkMachineSegmentationCerebralBleed) chkMachineSegmentationCerebralBleed.Value, chkMachineSegmentationCerebralBleed, 'uni', true );
    
            if ~isempty(find(adOffset, true))
    
                for ee=1:numel(adOffset)
    
                    if adOffset(ee) == true
    
                        progressBar(ee/(numel(adOffset)-0.009), sprintf('Importing cerebral bleed mask %d/%d', ee, numel(adOffset) ));
    
                        sObjectName = lower(asCerebralBleedName{ee});
    
                        % xmin=0.5;
                        % xmax=1;
                        % aColor=xmin+rand(1,3)*(xmax-xmin);
                        aColor = generateUniqueColor(false);
    
                        sNiiFileName = replace(lower(sObjectName), ' ', '_');
                        sNiiFileName = sprintf('%s%s.nii.gz', sSegmentationFolderName, sNiiFileName);
    
                        if exist(sNiiFileName, 'file')
    
                            nii = nii_tool('load', sNiiFileName);
                            aMask = imrotate3(nii.img, 90, [0 0 1],'nearest');
                            aMask = aMask(:,:,end:-1:1);
    
                            maskToVoi(aMask, asCerebralBleedName{ee}, 'Unspecified', aColor, 'axial', dSerieOffset, pixelEdge('get'), 'noholes');
    
 %                           addSeriesMask(aMask, asCerebralBleedName{ee}, dSerieOffset);
    
                        end
    
                    end
                end
    
                if exist('aMask', 'var')
                    clear aMask;
                end            
            end
        end

        % Hip Implant 

        if CLASSES_CT == true

            progressBar(3.991/4, 'Scanning hip implant masks');
    
            adOffset = cellfun( @(chkMachineSegmentationHipImplant) chkMachineSegmentationHipImplant.Value, chkMachineSegmentationHipImplant, 'uni', true );
    
            if ~isempty(find(adOffset, true))
    
                for ee=1:numel(adOffset)
    
                    if adOffset(ee) == true
    
                        progressBar(ee/(numel(adOffset)-0.009), sprintf('Importing hip implant mask %d/%d', ee, numel(adOffset) ));
    
                        sObjectName = lower(asHipImplantName{ee});
    
                        % xmin=0.5;
                        % xmax=1;
                        % aColor=xmin+rand(1,3)*(xmax-xmin);
                        aColor = generateUniqueColor(false);
    
                        sNiiFileName = replace(lower(sObjectName), ' ', '_');
                        sNiiFileName = sprintf('%s%s.nii.gz', sSegmentationFolderName, sNiiFileName);
    
                        if exist(sNiiFileName, 'file')
    
                            nii = nii_tool('load', sNiiFileName);
                            aMask = imrotate3(nii.img, 90, [0 0 1],'nearest');
                            aMask = aMask(:,:,end:-1:1);
    
                            maskToVoi(aMask, asHipImplantName{ee}, 'Unspecified', aColor, 'axial', dSerieOffset, pixelEdge('get'), 'noholes');
    
%                             addSeriesMask(aMask, asHipImplantName{ee}, dSerieOffset);
    
                        end
    
                    end
                end
    
                if exist('aMask', 'var')
                    clear aMask;
                end            
            end
        end

        % Coronary Arteries

        if CLASSES_CT == true

            progressBar(3.992/4, 'Scanning coronary arteries masks');
    
            adOffset = cellfun( @(chkMachineSegmentationCoronaryArteries) chkMachineSegmentationCoronaryArteries.Value, chkMachineSegmentationCoronaryArteries, 'uni', true );
    
            if ~isempty(find(adOffset, true))
    
                for ee=1:numel(adOffset)
    
                    if adOffset(ee) == true
    
                        progressBar(ee/(numel(adOffset)-0.009), sprintf('Importing coronary arteries mask %d/%d', ee, numel(adOffset) ));
    
                        sObjectName = lower(asCoronaryArteriesName{ee});
    
                        % xmin=0.5;
                        % xmax=1;
                        % aColor=xmin+rand(1,3)*(xmax-xmin);
                        aColor = generateUniqueColor(false);
    
                        sNiiFileName = replace(lower(sObjectName), ' ', '_');
                        sNiiFileName = sprintf('%s%s.nii.gz', sSegmentationFolderName, sNiiFileName);
    
                        if exist(sNiiFileName, 'file')
    
                            nii = nii_tool('load', sNiiFileName);
                            aMask = imrotate3(nii.img, 90, [0 0 1],'nearest');
                            aMask = aMask(:,:,end:-1:1);
    
                            maskToVoi(aMask, asCoronaryArteriesName{ee}, 'Unspecified', aColor, 'axial', dSerieOffset, pixelEdge('get'), 'noholes');
    
%                             addSeriesMask(aMask, asCoronaryArteriesName{ee}, dSerieOffset);
    
                        end
    
                    end
                end
    
                if exist('aMask', 'var')
                    clear aMask;
                end            
            end
        end

        % Heartchambers Highres

        if CLASSES_CT == true

            progressBar(3.993/4, 'Scanning heart chambers highres masks');
    
            adOffset = cellfun( @(chkMachineSegmentationHeartchambersHighres) chkMachineSegmentationHeartchambersHighres.Value, chkMachineSegmentationHeartchambersHighres, 'uni', true );
    
            if ~isempty(find(adOffset, true))
    
                for ee=1:numel(adOffset)
    
                    if adOffset(ee) == true
    
                        progressBar(ee/(numel(adOffset)-0.009), sprintf('Importing heart chambers highres mask %d/%d', ee, numel(adOffset) ));
    
                        sObjectName = lower(asHeartchambersHighresName{ee});
    
                        % xmin=0.5;
                        % xmax=1;
                        % aColor=xmin+rand(1,3)*(xmax-xmin);
                        aColor = generateUniqueColor(false);
    
                        sNiiFileName = replace(lower(sObjectName), ' ', '_');
                        sNiiFileName = sprintf('%s%s.nii.gz', sSegmentationFolderName, sNiiFileName);
    
                        if exist(sNiiFileName, 'file')
    
                            nii = nii_tool('load', sNiiFileName);
                            aMask = imrotate3(nii.img, 90, [0 0 1],'nearest');
                            aMask = aMask(:,:,end:-1:1);
    
                            maskToVoi(aMask, asHeartchambersHighresName{ee}, 'Unspecified', aColor, 'axial', dSerieOffset, pixelEdge('get'), 'noholes');
    
%                             addSeriesMask(aMask, asHeartchambersHighresName{ee}, dSerieOffset);
    
                        end
    
                    end
                end
    
                if exist('aMask', 'var')
                    clear aMask;
                end            
            end
        end

        % Appendicular Bones

        if CLASSES_CT == true

            progressBar(3.994/4, 'Scanning appendicular bones masks');
    
            adOffset = cellfun( @(chkMachineSegmentationAppendicularBones) chkMachineSegmentationAppendicularBones.Value, chkMachineSegmentationAppendicularBones, 'uni', true );
    
            if ~isempty(find(adOffset, true))
    
                for ee=1:numel(adOffset)
    
                    if adOffset(ee) == true
    
                        progressBar(ee/(numel(adOffset)-0.009), sprintf('Importing appendicular bones mask %d/%d', ee, numel(adOffset) ));
    
                        sObjectName = lower(asAppendicularBonesName{ee});
    
                        % xmin=0.5;
                        % xmax=1;
                        % aColor=xmin+rand(1,3)*(xmax-xmin);
                        aColor = generateUniqueColor(false);
   
                        sNiiFileName = replace(lower(sObjectName), ' ', '_');
                        sNiiFileName = sprintf('%s%s.nii.gz', sSegmentationFolderName, sNiiFileName);
    
                        if exist(sNiiFileName, 'file')
    
                            nii = nii_tool('load', sNiiFileName);
                            aMask = imrotate3(nii.img, 90, [0 0 1],'nearest');
                            aMask = aMask(:,:,end:-1:1);
    
                            maskToVoi(aMask, asAppendicularBonesName{ee}, 'Bone', aColor, 'axial', dSerieOffset, pixelEdge('get'), 'noholes');
    
%                             addSeriesMask(aMask, asAppendicularBonesName{ee}, dSerieOffset);
    
                        end
    
                    end
                end
    
                if exist('aMask', 'var')
                    clear aMask;
                end            
            end
        end

        % Pleural Pericard Effusion

        if CLASSES_CT == true

            progressBar(3.995/4, 'Scanning pleural pericard effusion masks');
    
            adOffset = cellfun( @(chkMachineSegmentationPleuralPericardEffusion) chkMachineSegmentationPleuralPericardEffusion.Value, chkMachineSegmentationPleuralPericardEffusion, 'uni', true );
    
            if ~isempty(find(adOffset, true))
    
                for ee=1:numel(adOffset)
    
                    if adOffset(ee) == true
    
                        progressBar(ee/(numel(adOffset)-0.009), sprintf('Importing pleural pericard effusion mask %d/%d', ee, numel(adOffset) ));
    
                        sObjectName = lower(asPleuralPericardEffusionName{ee});
    
%                         xmin=0.5;
%                         xmax=1;
%                         aColor=xmin+rand(1,3)*(xmax-xmin);
    
                        sNiiFileName = replace(lower(sObjectName), ' ', '_');
                        sNiiFileName = sprintf('%s%s.nii.gz', sSegmentationFolderName, sNiiFileName);
    
                        if exist(sNiiFileName, 'file')
    
                            nii = nii_tool('load', sNiiFileName);
                            aMask = imrotate3(nii.img, 90, [0 0 1],'nearest');
                            aMask = aMask(:,:,end:-1:1);
    
%                            maskToVoi(aMask, asPleuralPericardEffusionName{ee}, 'Unspecified', aColor, 'axial', dSerieOffset, pixelEdge('get'), 'holes');
    
                            addSeriesMask(aMask, asPleuralPericardEffusionName{ee}, dSerieOffset);
    
                        end
    
                    end
                end
    
                if exist('aMask', 'var')
                    clear aMask;
                end            
            end
        end

    end

    function uiMachineSegmentationSliderCallback(~, ~)

        val = get(uiMachineSegmentationSlider, 'Value');

        aPosition = get(uiMachineSegmentation, 'Position');

        dPanelOffset = -((1-val) * aPosition(4));

        set(uiMachineSegmentation, ...
            'Position', [aPosition(1) ...
                         0-dPanelOffset ...
                         aPosition(3) ...
                         aPosition(4) ...
                         ] ...
            );

        set(uiMachineSegmentationNext, ...
            'Position', [aPosition(1) ...
                         0-dPanelOffset ...
                         aPosition(3) ...
                         aPosition(4) ...
                         ] ...
            );
    end

    nestedLoad    = @loadMachineSegmentationProtocolCallback;
    nestedDelete  = @deleteMachineSegmentationProtocolCallback;
    nestedCancel  = @cancelMachineSegmentationCallback;
    nestedProceed = @proceedMachineSegmentationCallback;

    function addSeriesMask(aMask, sSeriesDescription, dSerieOffset)

        atInput = inputTemplate('get');

        aImage = dicomBuffer('get');

        sCurrentDate = datestr(now, 'yyyymmdd');  % Format: 'yyyyMMdd'
        sCurrentTime = datestr(now, 'HHMMSS');    % Format: 'HHmmss'

        if isempty(atInput(dSerieOffset).asFilesList)
            atMetaData = dicomMetaData('get', [], dSerieOffset);
        else
            dNbFiles = numel(atInput(dSerieOffset).asFilesList);
            atMetaData = cell(dNbFiles, 1);

            for jj=1:numel(atInput(dSerieOffset).asFilesList)

                atMetaData{jj} = dicominfo(atInput(dSerieOffset).asFilesList{jj});
            end

            atMetaData = flip(atMetaData);

        end

        dSOPInstanceUID = dicomuid;


        for jj=1:numel(atMetaData)

            atMetaData{jj}.Modality = 'OT';

            atMetaData{jj}.SeriesDescription = sSeriesDescription;

            atMetaData{jj}.InstanceCreationTime = sCurrentTime;
            atMetaData{jj}.InstanceCreationDate = sCurrentDate;

            atMetaData{jj}.ContentTime = sCurrentTime;
            atMetaData{jj}.ContentDate = sCurrentDate;

            % Series MediaStorageSOPClassUID             
    
            if isfield(atMetaData{jj}, 'MediaStorageSOPClassUID')
    
                if isempty(atMetaData{jj}.MediaStorageSOPClassUID)
    
                    if isfield(atMetaData{jj}, 'Modality')
    
                        switch lower(atMetaData{jj}.Modality)
                            case 'ct'
                                atMetaData{jj}.MediaStorageSOPClassUID = '1.2.840.10008.5.1.4.1.1.2'; % CT
                            case 'mr'
                                atMetaData{jj}.MediaStorageSOPClassUID = '1.2.840.10008.5.1.4.1.1.4'; % MR
                            case 'pt'
                                atMetaData{jj}.MediaStorageSOPClassUID = '1.2.840.10008.5.1.4.1.1.128'; % PT
                            case 'nm'
                                atMetaData{jj}.MediaStorageSOPClassUID = '1.2.840.10008.5.1.4.1.1.20'; % NM
                            case 'rtdose'
                                atMetaData{jj}.MediaStorageSOPClassUID = '1.2.840.10008.5.1.4.1.1.481.2'; % RTDOSE
                           otherwise
                                atMetaData{jj}.MediaStorageSOPClassUID = '1.2.840.10008.5.1.4.1.1.7'; % Secondary Capture
                              
                        end        
                    else
                        atMetaData{jj}.MediaStorageSOPClassUID = '1.2.840.10008.5.1.4.1.1.7'; % Secondary Capture
                    end
                end
            else
                if isfield(atMetaData{jj}, 'Modality')
                    
                    switch lower(atMetaData{jj}.Modality)
                        case 'ct'
                            atMetaData{jj}.MediaStorageSOPClassUID = '1.2.840.10008.5.1.4.1.1.2'; % CT
                        case 'mr'
                            atMetaData{jj}.MediaStorageSOPClassUID = '1.2.840.10008.5.1.4.1.1.4'; % MR
                        case 'pt'
                            atMetaData{jj}.MediaStorageSOPClassUID = '1.2.840.10008.5.1.4.1.1.128'; % PT
                        case 'nm'
                            atMetaData{jj}.MediaStorageSOPClassUID = '1.2.840.10008.5.1.4.1.1.20'; % NM
                        case 'rtdose'
                            atMetaData{jj}.MediaStorageSOPClassUID = '1.2.840.10008.5.1.4.1.1.481.2'; % RTDOSE
                        otherwise
                            atMetaData{jj}.MediaStorageSOPClassUID = '1.2.840.10008.5.1.4.1.1.7'; % Secondary Capture
                          
                    end        
                else
                    atMetaData{jj}.MediaStorageSOPClassUID = '1.2.840.10008.5.1.4.1.1.7'; % Secondary Capture
                end
            end
    
            % MediaStorageSOPInstanceUID
    
            if isfield(atMetaData{jj}, 'MediaStorageSOPInstanceUID')
    
                if isempty(atMetaData{jj}.MediaStorageSOPInstanceUID)
    
                    atMetaData{jj}.MediaStorageSOPInstanceUID = dSOPInstanceUID;
                end
            else
                atMetaData{jj}.MediaStorageSOPInstanceUID = dSOPInstanceUID;
            end
           
            % SOPClassUID
             
            if isfield(atMetaData{jj}, 'SOPClassUID')
    
                if isempty(atMetaData{jj}.SOPClassUID)
        
                    atMetaData{jj}.SOPClassUID  = atMetaData{jj}.MediaStorageSOPClassUID;
                end
            else
                atMetaData{jj}.SOPClassUID  = atMetaData{jj}.MediaStorageSOPClassUID;
            end

            if ~isfield(atMetaData{jj}, 'Units')

                atMetaData{jj}.Units = [];
            end

        end

        dNewSeriesOffset = numel(atInput)+1;
    
        atInput(dNewSeriesOffset).asFilesList    = [];
        atInput(dNewSeriesOffset).asFilesList{1} = [];
        
        atInput(dNewSeriesOffset).sOrientationView    = 'Axial';

        atInput(dNewSeriesOffset).bEdgeDetection      = false;
        atInput(dNewSeriesOffset).bFlipLeftRight      = false;
        atInput(dNewSeriesOffset).bFlipAntPost        = false;
        atInput(dNewSeriesOffset).bFlipHeadFeet       = false;
        atInput(dNewSeriesOffset).bDoseKernel         = false;
        atInput(dNewSeriesOffset).bMathApplied        = false;
        atInput(dNewSeriesOffset).bFusedDoseKernel    = false;
        atInput(dNewSeriesOffset).bFusedEdgeDetection = false;
        
        atInput(dNewSeriesOffset).tMovement = [];
        
        atInput(dNewSeriesOffset).tMovement.bMovementApplied = false;
        atInput(dNewSeriesOffset).tMovement.aGeomtform       = [];
        
        atInput(dNewSeriesOffset).tMovement.atSeq{1}.sAxe         = [];
        atInput(dNewSeriesOffset).tMovement.atSeq{1}.aTranslation = [];
        atInput(dNewSeriesOffset).tMovement.atSeq{1}.dRotation    = [];  

        atInput(dNewSeriesOffset).aDicomBuffer = [];

        imageOrientation('set', 'axial');

%         sDateTime = datestr(now, 'yyyymmddHHMMSS');
%         sDateTime = datetime(sDateTime, 'InputFormat', 'yyyyMMddHHmmss');

        sDateTime = datetime([sCurrentDate sCurrentTime],'InputFormat','yyyyMMddHHmmss');

        asSeriesDescription = seriesDescription('get');
        asSeriesDescription{numel(asSeriesDescription)+1} = sprintf('%s %s', sSeriesDescription, sDateTime);
        seriesDescription('set', asSeriesDescription);

        atInput(dNewSeriesOffset).atDicomInfo = atMetaData;
              
        inputTemplate('set', atInput);
    
        aImage(aMask==0) = min(aImage, [], 'all');

        aInputBuffer = inputBuffer('get');        
        aInputBuffer{numel(aInputBuffer)+1} = aImage;    
        inputBuffer('set', aInputBuffer);
    
        clear aInputBuffer;

        asSeries = get(uiSeriesPtr('get'), 'String');   
        asSeries{numel(asSeries)+1} = sprintf('%s %s', sSeriesDescription, sDateTime);  

        set(uiSeriesPtr('get'), 'String', asSeries);
        set(uiFusedSeriesPtr('get'), 'String', asSeries);
        
        dicomMetaData('set', atInput(dNewSeriesOffset).atDicomInfo, dNewSeriesOffset);
        dicomBuffer('set', aImage, dNewSeriesOffset);

        setQuantification(dNewSeriesOffset);
        
        tQuant = quantificationTemplate('get');
        atInput(dNewSeriesOffset).tQuant = tQuant;

        aMip = computeMIP(aImage);
        mipBuffer('set', aMip, dNewSeriesOffset) ;
        atInput(dNewSeriesOffset).aMip = aMip;   

        inputTemplate('set', atInput);  

        clear aImage;
    end
end
