function importRawCallback(~, ~)
%function importRawCallback()
%Import .raw file tyoe to TriDFusion.
%See TriDFuison.doc (or pdf) for more information about options.
%
%Note: option settings must fit on one line and can contain one semicolon at most.
%Options can be strings, cell arrays of strings, or numerical arrays.
%
%Author: Daniel Lafontaine, lafontad@mskcc.org
%
%Last specifications modified:
%
% Copyright 2020, Daniel Lafontaine, on behalf of the TriDFusion development team.
%
% This file is part of The Triple Dimention Fusion (TriDFusion).
%
% TriDFusion development has been led by: Daniel Lafontaine
%
% TriDFusion is distributed under the terms of the Lesser GNU Public License.
%
%     This version of TriDFusion is free software: you can redistribute it and/or modify
%     it under the terms of the GNU General Public License as published by
%     the Free Software Foundation, either version 3 of the License, or
%     (at your option) any later version.
%
% TriDFusion is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
% without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
% See the GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with TriDFusion.  If not, see <http://www.gnu.org/licenses/>.

     if switchTo3DMode('get')     == true ||  ...
        switchToIsoSurface('get') == true || ...
        switchToMIPMode('get')    == true

         return;
     end     
        
     filter = {'*.raw'};

     sCurrentDir  = viewerRootPath('get');

     sMatFile = [sCurrentDir '/' 'importRawLastUsedDir.mat'];
     % load last data directory
     if exist(sMatFile, 'file')
                                % lastDirMat mat file exists, load it
        load('-mat', sMatFile);
        if exist('importRawLastUsedDir', 'var')
            sCurrentDir = importRawLastUsedDir;
        end
        if sCurrentDir == 0
            sCurrentDir = pwd;
        end
     end

     [sFileName, sPathName] = uigetfile(sprintf('%s%s', char(sCurrentDir), char(filter)), 'Import .raw file');
     if sFileName ~= 0

        try
            importRawLastUsedDir = sPathName;
            save(sMatFile, 'importRawLastUsedDir');
        catch ME
            logErrorToFile(ME);
            progressBar(1 , sprintf('Warning: Cant save file %s', sMatFile));
%            h = msgbox(sprintf('Warning: Cant save file %s', sMatFile), 'Warning');
%                if integrateToBrowser('get') == true
%                    sLogo = './TriDFusion/logo.png';
%                else
%                    sLogo = './logo.png';
%                end

%                javaFrame = get(h, 'JavaFrame');
%                javaFrame.setFigureIcon(javax.swing.ImageIcon(sLogo));
        end        
        
%        mainDir('set', sPathName);
       
        tFileInfo = dir(sprintf('%s/%s', sPathName, sFileName));
        dFileNbBytes = tFileInfo.bytes;
        
        xSize = 1;
        ySize = 1;
        zSize = 1;        
 
        dNbBytesOffset = 0;
        dNbBytesInUse   = 0;
        dNbBytesRemaining = dFileNbBytes-dNbBytesInUse;
        
         if viewerUIFigure('get') == true

            dlgRawSize = ...
                uifigure('Position', [(getMainWindowPosition('xpos')+(getMainWindowSize('xsize')/2)-400/2) ...
                                (getMainWindowPosition('ypos')+(getMainWindowSize('ysize')/2)-340/2) ...
                                400 ...
                                340 ...
                                ],...
                       'Resize', 'off', ...
                       'Color', viewerBackgroundColor('get'),...
                       'WindowStyle', 'modal', ...
                       'Name' , 'Import .raw file'...
                       );
        else
            dlgRawSize = ...
                dialog('Position', [(getMainWindowPosition('xpos')+(getMainWindowSize('xsize')/2)-400/2) ...
                                (getMainWindowPosition('ypos')+(getMainWindowSize('ysize')/2)-340/2) ...
                                400 ...
                                340 ...
                                ],...
                      'MenuBar', 'none',...
                      'Resize', 'off', ...
                      'NumberTitle','off',...
                      'MenuBar', 'none',...
                      'Color', viewerBackgroundColor('get'), ...
                      'Name', 'Import .raw file',...
                      'Toolbar','none'...
                       );
         end

         setObjectIcon(dlgRawSize);

         axeRawSize = ...             
            axes(dlgRawSize, ...
                 'Units'   , 'pixels', ...
                 'Position', get(dlgRawSize, 'Position'), ...
                 'Color'   , viewerBackgroundColor('get'),...
                 'XColor'  , viewerForegroundColor('get'),...
                 'YColor'  , viewerForegroundColor('get'),...
                 'ZColor'  , viewerForegroundColor('get'),...             
                 'Visible' , 'off'...             
                 ); 
        axeRawSize.Interactions = [];
        deleteAxesToolbar(axeRawSize); 

           uicontrol(dlgRawSize,...
                  'style'   , 'text',...
                  'enable'  , 'On',...
                  'string'  , sprintf('File size: %d bytes', dFileNbBytes),...
                  'horizontalAlignment', 'left',...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...                     
                  'position', [20 290 200 20]...
                  );
              
        txtNbBytesInUse = ...
          uicontrol(dlgRawSize,...
                  'style'   , 'text',...
                  'enable'  , 'On',...
                  'string'  , sprintf('Nb bytes in use: %d bytes', dNbBytesInUse),...
                  'horizontalAlignment', 'left',...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...                     
                  'position', [20 265 200 20]...
                  );
              
        txtNbBytesRemaining = ...
          uicontrol(dlgRawSize,...
                  'style'   , 'text',...
                  'enable'  , 'On',...
                  'string'  , sprintf('Nb bytes remaining: %d bytes', dNbBytesRemaining),...
                  'horizontalAlignment', 'left',...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...                     
                  'position', [20 240 200 20]...
                  );
              
         uicontrol(dlgRawSize,...
                   'String','Add',...
                   'Position',[20 215 80 20],...
                   'BackgroundColor', viewerBackgroundColor('get'), ...
                   'ForegroundColor', viewerForegroundColor('get'), ...                  
                   'Callback', @computeNbBytesCallback...
                   );
               
          uicontrol(dlgRawSize,...
                  'style'   , 'text',...
                  'enable'  , 'On',...
                  'string'  , 'remaining bytes to offset',...
                  'horizontalAlignment', 'left',...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...                     
                  'position', [105 215 200 20]...
                  );
              
          uicontrol(dlgRawSize,...
                  'style'   , 'text',...
                  'enable'  , 'On',...
                  'string'  , 'Offset (bytes)',...
                  'horizontalAlignment', 'left',...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...                     
                  'position', [20 162 200 20]...
                  );
              
                
        edtImageOffset = ...
            uicontrol(dlgRawSize,...
                     'enable'    , 'on',...
                     'style'     , 'edit',...
                     'Background', 'white',...
                     'string'    , num2str(dNbBytesOffset),...
                     'BackgroundColor', viewerBackgroundColor('get'), ...
                     'ForegroundColor', viewerForegroundColor('get'), ...                    
                     'position'  , [130 165 80 20],...
                     'Callback', @setUicontrolNbBytesCallback...
                     );                 
               
          uicontrol(dlgRawSize,...
                  'style'   , 'text',...
                  'enable'  , 'On',...
                  'string'  , 'Image Size',...
                  'horizontalAlignment', 'left',...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...                     
                  'position', [20 137 200 20]...
                  );              
                
        edtImageSizeX = ...
            uicontrol(dlgRawSize,...
                     'enable'    , 'on',...
                     'style'     , 'edit',...
                     'Background', 'white',...
                     'string'    , num2str(xSize),...
                     'BackgroundColor', viewerBackgroundColor('get'), ...
                     'ForegroundColor', viewerForegroundColor('get'), ...                    
                     'position'  , [130 140 80 20], ...
                     'Callback', @setUicontrolNbBytesCallback...
                     );

        edtImageSizeY = ...
            uicontrol(dlgRawSize,...
                     'enable'    , 'on',...
                     'style'     , 'edit',...
                     'Background', 'white',...
                     'string'    , num2str(ySize),...
                     'BackgroundColor', viewerBackgroundColor('get'), ...
                     'ForegroundColor', viewerForegroundColor('get'), ...                    
                     'position'  , [215 140 80 20],...
                     'Callback', @setUicontrolNbBytesCallback...
                     );

        edtImageSizeZ = ...
            uicontrol(dlgRawSize,...
                     'enable'    , 'on',...
                     'style'     , 'edit',...
                     'Background', 'white',...
                     'string'    , num2str(zSize),...
                     'BackgroundColor', viewerBackgroundColor('get'), ...
                     'ForegroundColor', viewerForegroundColor('get'), ...                    
                     'position'  , [300 140 80 20],...
                     'Callback', @setUicontrolNbBytesCallback...
                     );
                 
         uicontrol(dlgRawSize,...
                  'style'   , 'text',...
                  'enable'  , 'On',...
                  'string'  , 'Voxel Size',...
                  'horizontalAlignment', 'left',...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...                     
                  'position', [20 112 200 20]...
                  );              
                
        edtVoxelSizeX = ...
            uicontrol(dlgRawSize,...
                     'enable'    , 'on',...
                     'style'     , 'edit',...
                     'Background', 'white',...
                     'string'    , num2str(xSize),...
                     'BackgroundColor', viewerBackgroundColor('get'), ...
                     'ForegroundColor', viewerForegroundColor('get'), ...                    
                     'position'  , [130 115 80 20]...
                     );

        edtVoxelSizeY = ...
            uicontrol(dlgRawSize,...
                     'enable'    , 'on',...
                     'style'     , 'edit',...
                     'Background', 'white',...
                     'string'    , num2str(ySize),...
                     'BackgroundColor', viewerBackgroundColor('get'), ...
                     'ForegroundColor', viewerForegroundColor('get'), ...                    
                     'position'  , [215 115 80 20]...
                     );

        edtVoxelSizeZ = ...
            uicontrol(dlgRawSize,...
                     'enable'    , 'on',...
                     'style'     , 'edit',...
                     'Background', 'white',...
                     'string'    , num2str(zSize),...
                     'BackgroundColor', viewerBackgroundColor('get'), ...
                     'ForegroundColor', viewerForegroundColor('get'), ...                    
                     'position'  , [300 115 80 20]...
                     );
                 
         uicontrol(dlgRawSize,...
                  'style'   , 'text',...
                  'enable'  , 'On',...
                  'string'  , 'Unit Type',...
                  'horizontalAlignment', 'left',...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...                     
                  'position', [20 87 200 20]...
                  );
              
        asType={'8 bit, unsigned (uchar)', '8 bit, signed (char)', '16 bit, unsigned (uchort)', '16 bit, signed (short)', '32 bit, unsigned (uint)', '32 bit, signed (int)', '32 bit, floating point (float)', '64 bit, floating point (double)'};
                 
        popUnitType = ...
            uicontrol(dlgRawSize,...
                     'enable'    , 'on',...
                     'style'     , 'popup',...
                     'Background', 'white',...
                     'string'    , asType,...
                     'value'     , 3,...
                     'BackgroundColor', viewerBackgroundColor('get'), ...
                     'ForegroundColor', viewerForegroundColor('get'), ...                    
                     'position'  , [130 90 170 20], ...
                     'Callback', @setUicontrolNbBytesCallback...
                     );

         uicontrol(dlgRawSize,...
                  'style'   , 'text',...
                  'enable'  , 'On',...
                  'string'  , 'Byte Order',...
                  'horizontalAlignment', 'left',...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...                     
                  'position', [20 62 200 20]...
                  );

        asAligment = {'Big-endian', 'Little-endian', 'Big-endian 64', 'Little-endian 64'};
        
        popMachinefmt = ...
            uicontrol(dlgRawSize,...
                     'enable'    , 'on',...
                     'style'     , 'popup',...
                     'Background', 'white',...
                     'string'    , asAligment,...
                     'value'     , 1,...
                     'BackgroundColor', viewerBackgroundColor('get'), ...
                     'ForegroundColor', viewerForegroundColor('get'), ...                    
                     'position'  , [130 65 170 20]...
                     );
        
         % Cancel or Proceed

         uicontrol(dlgRawSize,...
                   'String','Cancel',...
                   'Position',[305 7 75 25],...
                   'BackgroundColor', viewerBackgroundColor('get'), ...
                   'ForegroundColor', viewerForegroundColor('get'), ...                  
                   'Callback', @cancelImportRawCallback...
                   );

        uiProceed = ...
         uicontrol(dlgRawSize,...
                  'String','Proceed',...
                  'Position',[220 7 75 25],...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...                 
                  'Callback', @okImportRawCallback...
                  );               
              
        setUicontrolNbBytesCallback();
        
     end
     
     function computeNbBytesCallback(~, ~)
         
        dImageOffset = str2double(get(edtImageOffset, 'String'));
        
        xImageSize = str2double(get(edtImageSizeX, 'String'));
        yImageSize = str2double(get(edtImageSizeY, 'String'));
        zImageSize = str2double(get(edtImageSizeZ, 'String'));
        
        asType       = get(popUnitType, 'String');
        dTypeOffset  = get(popUnitType, 'Value');
        
        dNbBytesInUse = computeNbBytesInUse(asType{dTypeOffset}, xImageSize, yImageSize, zImageSize, dImageOffset);   
        dNbBytesRemaining = dFileNbBytes-dNbBytesInUse; 
        
        set(edtImageOffset, 'String', num2str(dNbBytesRemaining+dImageOffset));
        
        setUicontrolNbBytesCallback();
     end
 
     function setUicontrolNbBytesCallback(~, ~)
         
        dImageOffset = str2double(get(edtImageOffset, 'String'));
        
        xImageSize = str2double(get(edtImageSizeX, 'String'));
        yImageSize = str2double(get(edtImageSizeY, 'String'));
        zImageSize = str2double(get(edtImageSizeZ, 'String'));
        
        asType       = get(popUnitType, 'String');
        dTypeOffset  = get(popUnitType, 'Value');
        
        dNbBytesInUse = computeNbBytesInUse(asType{dTypeOffset}, xImageSize, yImageSize, zImageSize, dImageOffset);   
        dNbBytesRemaining = dFileNbBytes-dNbBytesInUse;
         
        set(txtNbBytesRemaining, ...
            'String', sprintf('Nb bytes remaining: %d bytes', dNbBytesRemaining));
            
        set(txtNbBytesInUse, ...
            'String', sprintf('Nb bytes in use: %d bytes', dNbBytesInUse));                           

        if dNbBytesRemaining < 0
            set(txtNbBytesRemaining,  'ForegroundColor', 'red');
            set(uiProceed,  'Enable', 'off');
        else
            set(txtNbBytesRemaining,  'ForegroundColor', viewerForegroundColor('get'));
            set(uiProceed,  'Enable', 'on');
       end
        
     end
     
     function dNbBytesInUse = computeNbBytesInUse(sUnitType, xSize, ySize, zSize, dOffset)
        
         switch(sUnitType)
            case '8 bit, unsigned (uchar)'
                dNBits = 8;
            case '8 bit, signed (char)'
                dNBits = 8;
            case '16 bit, unsigned (uchort)'
                dNBits = 16;
            case '16 bit, signed (short)'
                dNBits = 16;
            case '32 bit, unsigned (uint)'
                dNBits = 32;
            case '32 bit, signed (int)'
                dNBits = 32;
            case '32 bit, floating point (float)'
                dNBits = 32;
            case '64 bit, floating point (double)'    
                dNBits = 64;
            otherwise
                dNBits = 1;
         end 
        
        dNbBytesInUse = (dNBits/8)*xSize*ySize*zSize+dOffset;
      
     end
 

     
     function cancelImportRawCallback(~, ~)  

        delete(dlgRawSize);
     end

     function okImportRawCallback(~, ~)   

        if isFusion('get') == true % Deactivate fusion
             setFusionCallback();
        end
        
        xImageSize = str2double(get(edtImageSizeX, 'String'));
        yImageSize = str2double(get(edtImageSizeY, 'String'));
        zImageSize = str2double(get(edtImageSizeZ, 'String'));
        
        xVoxelSize = str2double(get(edtVoxelSizeX, 'String'));
        yVoxelSize = str2double(get(edtVoxelSizeY, 'String'));
        zVoxelSize = str2double(get(edtVoxelSizeZ, 'String'));
        
        asType       = get(popUnitType, 'String');
        dTypeOffset  = get(popUnitType, 'Value');
        
        asMachinefmt       = get(popMachinefmt, 'String');
        dMachinefmtOffset  = get(popMachinefmt, 'Value');        
        
        dImageOffset       = str2double(get(edtImageOffset, 'String'));
         
        switch(asType{dTypeOffset})
            case '8 bit, unsigned (uchar)'
                sUnitType = 'uint8';
            case '8 bit, signed (char)'
                sUnitType = 'int8';
            case '16 bit, unsigned (uchort)'
                sUnitType = 'uint16';
            case '16 bit, signed (short)'
                sUnitType = 'int16';
            case '32 bit, unsigned (uint)'
                sUnitType = 'uint32';
            case '32 bit, signed (int)'
                sUnitType = 'int32';
            case '32 bit, floating point (float)'
                sUnitType = 'single';
            case '64 bit, floating point (double)'    
                sUnitType = 'double';
            otherwise
                sUnitType = 'uint16';
        end   
             
        dNbBytesInUse = computeNbBytesInUse(asType{dTypeOffset}, xImageSize, yImageSize, zImageSize, dImageOffset);   
        dNbBytesRemaining = dFileNbBytes-dNbBytesInUse;
         
        set(txtNbBytesRemaining, ...
            'String', sprintf('Nb bytes remaining: %d bytes', dNbBytesRemaining));
            
        set(txtNbBytesInUse, ...
            'String', sprintf('Nb bytes in use: %d bytes', dNbBytesInUse));                           

        if dNbBytesRemaining < 0
            set(txtNbBytesRemaining,  'ForegroundColor', 'red');
            set(uiProceed,  'Enable', 'off');
        else      
            if isVsplash('get') == true
    
                setVsplashCallback();
            end
    
            if size(dicomBuffer('get', [], get(uiSeriesPtr('get'), 'Value')), 3) ~= 1
                
                link2DMip('set', true);
    
                set(btnLinkMipPtr('get'), 'BackgroundColor', viewerButtonPushedBackgroundColor('get'));
                set(btnLinkMipPtr('get'), 'ForegroundColor', viewerButtonPushedForegroundColor('get')); 
                % set(btnLinkMipPtr('get'), 'FontWeight', 'bold');            
                set(btnLinkMipPtr('get'), 'CData', resizeTopBarIcon('link_mip_white.png'));
           end   
            
            loadRawFile( sPathName, sFileName, xImageSize, yImageSize, zImageSize, xVoxelSize, yVoxelSize, zVoxelSize, dImageOffset, sUnitType, asMachinefmt{dMachinefmtOffset});
            delete(dlgRawSize);
        end

     end
end
