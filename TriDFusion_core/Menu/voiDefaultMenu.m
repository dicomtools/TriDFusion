function voiDefaultMenu(ptrObject)
%function voiDefaultMenu(ptrObject)
%Add VOI default right click menu.
%See TriDFuison.doc (or pdf) for more information about options.
%
%Author: Daniel Lafontaine, lafontad@mskcc.org
%
%Last specifications modified:
%
% Copyright 2022, Daniel Lafontaine, on behalf of the TriDFusion development team.
%
% This file is part of The Triple Dimention Fusion (TriDFusion).
%
% TriDFusion development has been led by:  Daniel Lafontaine
%
% TriDFusion is distributed under the terms of the Lesser GNU Public License.
%
%     This version of TriDFusion is free software: you can redistribute it and/or modify
%     it under the terms of the GNU General Public License as published by
%     the Free Software Foundation, either version 3 of the License, or
%     (at your option) any later version.
%
% TriDFusion is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
% without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
% See the GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with TriDFusion.  If not, see <http://www.gnu.org/licenses/>.  

    if strcmpi(ptrObject.Type, 'uimenu')
        mUIContextMenu = ptrObject;
        ptrRoi = ptrObject.UserData;
    else
        mUIContextMenu = ptrObject.UIContextMenu;
        ptrRoi = ptrObject;
    end

    if strcmpi(ptrRoi.UserData, 'voi-roi')

        sVisible = 'on';
    else
        sVisible = 'off';
    end

    % Create the main Volume-of-interest menu
    mVoiFolder = uimenu(mUIContextMenu, ...
        'Label', 'Volume-of-interest', ...
        'UserData', ptrRoi, ...
        'Visible', sVisible, ...
        'HitTest', 'off', ...
        'Separator', 'off');

    % Add Select menu item
    uimenu(mVoiFolder, ...
        'Label', 'Select for Contour Review (Ctrl + S)', ...
        'UserData', ptrRoi, ...
        'Visible', sVisible, ...
        'HitTest', 'off', ...
        'Callback', @selectForContourReviewCallback);

    % Add Edit Label menu item
    uimenu(mVoiFolder, ...
        'Label', 'Edit Label', ...
        'UserData', ptrRoi, ...
        'Separator', 'on', ...
        'Visible', sVisible, ...
        'HitTest', 'off', ...
        'Callback', @editVoiLabelCallback);

    % Get predefined labels
    aList = getRoiLabelList();

    mPredefinedLabels = uimenu(mVoiFolder, 'Label', 'Predefined Label');

    numLabels = numel(aList);  % Get the number of labels

    for i = 1:numLabels
        uimenu(mPredefinedLabels, ...
            'Text'           , aList{i}, ...
            'Visible'        , sVisible, ...
            'HitTest'        , 'off', ...
            'UserData'       , ptrRoi, ...
            'MenuSelectedFcn', @predefinedVoiLabelCallback);
    end

    % Get lesion types

    [~, asLesionList] = getLesionType('');

    if ~isempty(asLesionList)
        % Create Edit Location submenu
        mEditLocation = uimenu(mVoiFolder, ...
            'Label', 'Edit Site', ...
            'UserData', ptrRoi, ...
            'Visible', sVisible, ...
            'HitTest', 'off', ...
            'MenuSelectedFcn', @refreshVoiMenuLocationCallback);

        numLesionTypes = numel(asLesionList);  % Get the number of lesion types

        for i = 1:numLesionTypes
            uimenu(mEditLocation, ...
                'Text', asLesionList{i}, ...
                'UserData', ptrRoi, ...
                'Visible', sVisible, ...
                'HitTest', 'off', ...
                'MenuSelectedFcn', @editVoiLesionTypeCallback);
        end
    end

    % Add other menu items
    uimenu(mVoiFolder, ...
        'Label'   , 'Edit Color', ...
        'UserData', ptrRoi, ...
        'Visible' , sVisible, ...
        'HitTest' , 'off', ...
        'Callback', @editVoiColorCallback);
    
    uimenu(mVoiFolder, ...
        'Label'   , 'Hide/View Face Alpha', ...
        'UserData', ptrRoi, ...
        'Visible' , sVisible, ...
        'HitTest' , 'off', ...
        'Callback', @hideViewVoiFaceAlhaCallback);
    
    % Create the Constraint submenu
    mVoiConstraint = uimenu(mVoiFolder, ...
        'Label'    , 'Constraint', ...
        'UserData' , ptrRoi, ...
        'Visible'  , sVisible, ...
        'HitTest'  , 'off', ...
        'Callback' , @setMenuConstraintCheckedCallback, ...
        'Separator', 'on');

    uimenu(mVoiConstraint, ...
        'Label'   , 'Inside This Contour', ...
        'UserData', ptrRoi, ...
        'Visible' , sVisible, ...
        'HitTest' , sVisible, ...
        'Callback', @constraintContourFromVoiMenuCallback);
    
    uimenu(mVoiConstraint, ...
        'Label'   , 'Invert Constraint', ...
        'Checked' , invertConstraint('get'), ...
        'Visible' , sVisible, ...
        'HitTest' , 'off', ...
        'Callback', @invertConstraintFromMenuCallback);

    mIncrement = uimenu(mVoiFolder,'Label', 'Increment', 'Separator', 'on');

    % Additional menu items

    uimenu(mIncrement, ...
        'Label'    , 'Adjust increment', ...
        'UserData' , ptrRoi, ...
        'Separator', 'on', ...
        'Visible'  , sVisible, ...
        'HitTest'  , 'off', ...
        'Callback' , @editIncrementRatioVoiPositionCallback);

    uimenu(mIncrement, ...
        'Label'   , 'Increase Contours (ctrl + +)', ...
        'UserData', ptrRoi, ...
        'Visible' , sVisible, ...
        'HitTest' , 'off', ...
        'Callback', @increaseVoiPositionCallback);

    mMargin = uimenu(mVoiFolder,'Label', 'Margin', 'Separator', 'on');

    uimenu(mMargin, ...
        'Label'    , 'Margin Adjustments', ...
        'UserData' , ptrRoi, ...
        'Visible'  , sVisible, ...
        'HitTest'  , 'off', ...
        'Callback' , @editContourMarginCallback);

    uimenu(mMargin, ...
        'Label'   , 'Create Margin Contours', ...
        'UserData', ptrRoi, ...
        'Visible' , sVisible, ...
        'HitTest' , 'off', ...
        'Callback', @createVoiMarginContoursCallback);

    % Create Mask submenu

    mVoiMask = uimenu(mVoiFolder, ...
        'Label'    , 'Mask', ...
        'UserData' , ptrRoi, ...
        'Visible'  , sVisible, ...
        'HitTest'  , 'off', ...
        'Separator', 'on');

    uimenu(mVoiMask, ...
        'Label'   , 'Inside This Contour', ...
        'UserData', ptrRoi, ...
        'Visible' , sVisible, ...
        'HitTest' , 'off', ...
        'Callback', @maskContourFromVoiMenuCallback);

    uimenu(mVoiMask, ...
        'Label'   , 'Outside This Contour', ...
        'UserData', ptrRoi, ...
        'Visible' , sVisible, ...
        'HitTest' , 'off', ...
        'Callback', @maskContourFromVoiMenuCallback);

    uimenu(mIncrement, ...
        'Label'   , 'Decrease Contours (ctrl + -)', ...
        'UserData', ptrRoi, ...
        'Visible' , sVisible, ...
        'HitTest' , 'off', ...
        'Callback', @decreaseVoiPositionCallback);

    function setMenuConstraintCheckedCallback(hObject, ~)
        
        dSeriesOffset = get(uiSeriesPtr('get'), 'Value');
     
        atVoiInput = voiTemplate('get', dSeriesOffset);
            
        dVoiTagOffset = find(cellfun(@(c) any(strcmp(c.RoisTag, hObject.UserData.Tag)), atVoiInput), 1);

        if ~isempty(dVoiTagOffset)

            % Check/uncheck the Invert Constraint option

            invertChecked = invertConstraint('get');
            invertItem = hObject.Children(strcmpi({hObject.Children.Label}, 'Invert Constraint'));
            set(invertItem, 'Checked', invertChecked);

            % Check/uncheck other constraints

            sConstraintTag = atVoiInput{dVoiTagOffset}.Tag;
            [asConstraintTagList, asConstraintTypeList] = roiConstraintList('get', dSeriesOffset);

            
            if isempty(asConstraintTagList) % Check if constraints exist

                set(hObject.Children, 'Checked', 'off');
            else

                activeIndex = strcmpi(asConstraintTagList, sConstraintTag);

                if any(activeIndex)
                    checkedType = asConstraintTypeList{activeIndex};
                    set(hObject.Children(strcmpi({hObject.Children.Label}, checkedType)), 'Checked', 'on');
                else
                    set(hObject.Children, 'Checked', 'off');
                end
            end
        end
    end

    function editIncrementRatioVoiPositionCallback(~, ~)

        DLG_INCREAMENT_X = 380;
        DLG_INCREAMENT_Y = 100;

        % Create dialog for increment ratio

        if viewerUIFigure('get') == true
    
            dlgIncrement = ...
                uifigure('Position', ...
                         [(getMainWindowPosition('xpos')+(getMainWindowSize('xsize')/2)-DLG_INCREAMENT_X/2) ...
                         (getMainWindowPosition('ypos')+(getMainWindowSize('ysize')/2)-DLG_INCREAMENT_Y/2) ...
                         DLG_INCREAMENT_X ...
                         DLG_INCREAMENT_Y], ...
                         'Resize'     , 'off', ...
                         'Color'      , viewerBackgroundColor('get'),...
                         'WindowStyle', 'modal', ...
                         'Name'       , 'Adjust Increment'...
                        );
         else
    
            dlgIncrement = ...
                dialog('Position', ...
                       [(getMainWindowPosition('xpos')+(getMainWindowSize('xsize')/2)-DLG_INCREAMENT_X/2) ...
                       (getMainWindowPosition('ypos')+(getMainWindowSize('ysize')/2)-DLG_INCREAMENT_Y/2) ...
                       DLG_INCREAMENT_X ...
                       DLG_INCREAMENT_Y], ...
                       'MenuBar'    , 'none', ...
                       'Resize'     , 'off', ...
                       'NumberTitle', 'off', ...
                       'Color'      , viewerBackgroundColor('get'), ...
                       'Name'       , 'Adjust Increment', ...
                       'HitTest'    , 'off', ...
                       'Toolbar'    , 'none');
        end

        setObjectIcon(dlgIncrement);

        % Create increment ratio input
        edtIncrementRatio = ...
            uicontrol(dlgIncrement, ...
            'style'          , 'edit', ...
            'Background'     , 'white', ...
            'string'         , num2str(voiIncrementRatio('get')), ...
            'position'       , [200 50 100 20], ...
            'BackgroundColor', viewerBackgroundColor('get'), ...
            'ForegroundColor', viewerForegroundColor('get'), ...
            'Callback'       , @editIncrementRatioCallback, ...
            'HitTest'        , 'off', ...
            'KeyPressFcn'    , @checkEditRatioKeyPress);

        % Create label for increment ratio
        uicontrol(dlgIncrement, ...
            'style'              , 'text', ...
            'string'             , 'Increment in mm', ...
            'horizontalalignment', 'left', ...
            'position'           , [20 47 180 20], ...
            'Enable'             , 'On', ...
            'HitTest'            , 'off', ...
            'BackgroundColor'    , viewerBackgroundColor('get'), ...
            'ForegroundColor'    , viewerForegroundColor('get'));

        % Cancel and Change buttons
        uicontrol(dlgIncrement, ...
            'String'         , 'Cancel', ...
            'Position'       , [285 7 75 25], ...
            'BackgroundColor', viewerBackgroundColor('get'), ...
            'ForegroundColor', viewerForegroundColor('get'), ...
            'HitTest'        , 'off', ...
            'Callback'       , @cancelEditIncrementRatioCallback);

        uicontrol(dlgIncrement, ...
            'String'         , 'Change', ...
            'Position'       , [200 7 75 25], ...
            'BackgroundColor', viewerBackgroundColor('get'), ...
            'ForegroundColor', viewerForegroundColor('get'), ...
            'HitTest'        , 'off', ...
            'Callback'       , @changeEditIncrementRatioCallback);

        function checkEditRatioKeyPress(~, event)

            if strcmp(event.Key, 'return')

                drawnow;
                changeEditIncrementRatioCallback();
            end
        end 

        function editIncrementRatioCallback(~, ~)

            dIncrement = str2double(get(edtIncrementRatio, 'String'));

            if dIncrement < 0
                set(edtIncrementRatio, 'String', '1');
            end
        end

        function changeEditIncrementRatioCallback(~, ~)

            dIncrement = str2double(get(edtIncrementRatio, 'String'));

            if dIncrement >= 0
                voiIncrementRatio('set', dIncrement);
                delete(dlgIncrement);
            else
                set(edtIncrementRatio, 'String', '1');
            end
        end

        function cancelEditIncrementRatioCallback(~, ~) 

            delete(dlgIncrement);
        end
    end

    function increaseVoiPositionCallback(hObject, ~)

        dSeriesOffset = get(uiSeriesPtr('get'), 'Value');

        atVoiInput = voiTemplate('get', dSeriesOffset);
            
        dVoiTagOffset = find(cellfun(@(c) any(strcmp(c.RoisTag, hObject.UserData.Tag)), atVoiInput), 1);
        
        if ~isempty(dVoiTagOffset)

            increaseVoiPosition(atVoiInput{dVoiTagOffset}.Tag, voiIncrementRatio('get'));
            plotRotatedRoiOnMip(axesMipPtr('get', [], dSeriesOffset), dicomBuffer('get', [], dSeriesOffset), mipAngle('get'));
        end
    end

    function decreaseVoiPositionCallback(hObject, ~)

        dSeriesOffset = get(uiSeriesPtr('get'), 'Value');

        atVoiInput = voiTemplate('get', dSeriesOffset);
            
        dVoiTagOffset = find(cellfun(@(c) any(strcmp(c.RoisTag, hObject.UserData.Tag)), atVoiInput), 1);
        
        if ~isempty(dVoiTagOffset)

            decreaseVoiPosition(atVoiInput{dVoiTagOffset}.Tag, voiIncrementRatio('get'));
            plotRotatedRoiOnMip(axesMipPtr('get', [], dSeriesOffset), dicomBuffer('get', [], dSeriesOffset), mipAngle('get'));
        end
    end

    function refreshVoiMenuLocationCallback(hObject, ~) 

        atVoiInput = voiTemplate('get', get(uiSeriesPtr('get'), 'Value'));
        
        dVoiTagOffset = find(cellfun(@(c) any(strcmp(c.RoisTag, hObject.UserData.Tag)), atVoiInput), 1);

        if ~isempty(dVoiTagOffset) % Tag is a VOI

            set(hObject.Children, 'Checked', 'off'); % Reset all
            set(hObject.Children(strcmpi({hObject.Children.Text}, atVoiInput{dVoiTagOffset}.LesionType)), 'Checked', 'on'); % Set checked for active type
        end
    end

    function createVoiMarginContoursCallback(hObject, ~)

        atVoiInput = voiTemplate('get', get(uiSeriesPtr('get'), 'Value'));

        dVoiTagOffset = find(cellfun(@(c) any(strcmp(c.RoisTag, hObject.UserData.Tag)), atVoiInput), 1);

        if ~isempty(dVoiTagOffset) % Found the tag

            createVoiMarginContours(contourMarginDistanceValue('get'), contourMarginJointType('get'), atVoiInput(dVoiTagOffset));
        end
    end

end
