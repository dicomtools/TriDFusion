function initDisplay(iMode)
%function initDisplay(iMode)
%Init Viewer Panel and Axes.
%See TriDFuison.doc (or pdf) for more information about options.
%
%Author: Daniel Lafontaine, lafontad@mskcc.org
%
%Last specifications modified:
%
% Copyright 2020, Daniel Lafontaine, on behalf of the TriDFusion development team.
%
% This file is part of The Triple Dimention Fusion (TriDFusion).
%
% TriDFusion development has been led by:  Daniel Lafontaine
%
% TriDFusion is distributed under the terms of the Lesser GNU Public License.
%
%     This version of TriDFusion is free software: you can redistribute it and/or modify
%     it under the terms of the GNU General Public License as published by
%     the Free Software Foundation, either version 3 of the License, or
%     (at your option) any later version.
%
% TriDFusion is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
% without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
% See the GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with TriDFusion.  If not, see <http://www.gnu.org/licenses/>.

    % Segmentation Panel

     uiSegMainPanel = ...
        uipanel(fiMainWindowPtr('get'),...
                'Units'   , 'pixels',...
                'Position', [0 ...
                             addOnWidth('get')+30 ...
                             300 ...
                             getMainWindowSize('ysize')-viewerToolbarHeight('get')-viewerTopBarHeight('get')-addOnWidth('get')-30 ...
                             ], ...
                'AutoResizeChildren', 'off', ...
                'BackgroundColor', viewerBackgroundColor('get'), ...
                'ForegroundColor', viewerForegroundColor('get'), ...
                'HitTest', 'off', ...
                'Visible', 'off'...
                );
     uiSegMainPanelPtr('set', uiSegMainPanel);

     uiSegPanel = ...
         uipanel(uiSegMainPanelPtr('get'),...
                 'Units'   , 'pixels',...
                 'Position', [0 ...
                              0 ...
                              280 ...
                              2000 ...
                              ],...
                 'AutoResizeChildren', 'off', ...
                 'BackgroundColor', viewerBackgroundColor('get'), ...
                 'ForegroundColor', viewerForegroundColor('get'), ...
                 'HitTest', 'off', ...
                 'Visible', 'on'...
                 );
    uiSegPanelPtr('set', uiSegPanel);

    aSegMainPanelPosition = get(uiSegMainPanelPtr('get'), 'Position');
    uiSegPanelSlider = ...
        uicontrol('Style'   , 'Slider', ...
                  'Parent'  , uiSegMainPanelPtr('get'),...
                  'Units'   , 'pixels',...
                  'Position', [280 ...
                               0 ...
                               20 ...
                               aSegMainPanelPosition(4) ...
                               ],...
                  'Value', 0, ...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'Callback',@uiSegPanelSliderCallback ...
                  );
    uiSegPanelSliderPtr('set', uiSegPanelSlider);
    % addlistener(uiSegPanelSlider, 'Value', 'PreSet', @uiSegPanelSliderCallback);
    addlistener(uiSegPanelSlider, 'ContinuousValueChange', @uiSegPanelSliderCallback);

    initSegPanel();

    % Kernel Panel

    uiKernelMainPanel = ...
        uipanel(fiMainWindowPtr('get'),...
                'Units'   , 'pixels',...
                'Position', [0 ...
                             addOnWidth('get')+30 ...
                             300 ...
                             getMainWindowSize('ysize')-viewerToolbarHeight('get')-viewerTopBarHeight('get')-addOnWidth('get')-30 ...
                             ],...
                'AutoResizeChildren', 'off', ...
                'HitTest', 'off', ...
                'BackgroundColor', viewerBackgroundColor('get'), ...
                'ForegroundColor', viewerForegroundColor('get'), ...
                'Visible', 'off'...
                );
    uiKernelMainPanelPtr('set', uiKernelMainPanel);

    uiKernelPanel = ...
        uipanel(uiKernelMainPanelPtr('get'),...
                'Units'   , 'pixels',...
                'Position', [0 ...
                             0 ...
                             280 ...
                             2000 ...
                             ],...
                'AutoResizeChildren', 'off', ...
                'HitTest', 'off', ...
                'BackgroundColor', viewerBackgroundColor('get'), ...
                'ForegroundColor', viewerForegroundColor('get'), ...
                'Visible', 'on'...
                );
    uiKernelPanelPtr('set', uiKernelPanel);

    aKernelMainPanelPosition = get(uiKernelMainPanelPtr('get'), 'Position');
    uiKernelPanelSlider = ...
        uicontrol('Style'   , 'Slider', ...
                  'Parent'  , uiKernelMainPanelPtr('get'),...
                  'Units'   , 'pixels',...
                  'Position', [280 ...
                               0 ...
                               20 ...
                               aKernelMainPanelPosition(4) ...
                               ],...
                  'Value'   , 0, ...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'Callback',@uiKernelPanelSliderCallback ...
                  );
    uiKernelPanelSliderPtr('set', uiKernelPanelSlider);
    % addlistener(uiKernelPanelSlider, 'Value', 'PreSet', @uiKernelPanelSliderCallback);
    addlistener(uiKernelPanelSlider, 'ContinuousValueChange', @uiKernelPanelSliderCallback);

    initKernelPanel();

    % Roi Panel

    uiRoiMainPanel = ...
        uipanel(fiMainWindowPtr('get'),...
                'Units'   , 'pixels',...
                'Position', [0 ...
                             addOnWidth('get')+30 ...
                             300 ...
                             getMainWindowSize('ysize')-viewerToolbarHeight('get')-viewerTopBarHeight('get')-addOnWidth('get')-30 ...
                             ],...
                'AutoResizeChildren', 'off', ...
                'HitTest', 'off', ...
                'BackgroundColor', viewerBackgroundColor('get'), ...
                'ForegroundColor', viewerForegroundColor('get'), ...
                'Visible', 'off'...
                );
    uiRoiMainPanelPtr('set', uiRoiMainPanel);

    uiRoiPanel = ...
        uipanel(uiRoiMainPanelPtr('get'),...
                'Units'   , 'pixels',...
                'Position', [0 ...
                             0 ...
                             280 ...
                             2000 ...
                             ],...
                'AutoResizeChildren', 'off', ...
                'HitTest', 'off', ...
                'BackgroundColor', viewerBackgroundColor('get'), ...
                'ForegroundColor', viewerForegroundColor('get'), ...
                'Visible', 'on'...
                );
    uiRoiPanelPtr('set', uiRoiPanel);

    aRoiMainPanelPosition = get(uiRoiMainPanelPtr('get'), 'Position');
    uiRoiPanelSlider = ...
        uicontrol('Style'   , 'Slider', ...
                  'Parent'  , uiRoiMainPanelPtr('get'),...
                  'Units'   , 'pixels',...
                  'Position', [280 ...
                               0 ...
                               20 ...
                               aRoiMainPanelPosition(4) ...
                               ],...
                  'Value'   , 0, ...
                  'BackgroundColor', viewerBackgroundColor('get'), ...
                  'ForegroundColor', viewerForegroundColor('get'), ...
                  'Callback',@uiRoiPanelSliderCallback ...
                  );
    uiRoiPanelSliderPtr('set', uiRoiPanelSlider);
    % addlistener(uiRoiPanelSlider, 'Value', 'PreSet', @uiRoiPanelSliderCallback);
    addlistener(uiRoiPanelSlider, 'ContinuousValueChange', @uiRoiPanelSliderCallback);

    % aRoiMainPanelPosition = get(uiRoiMainPanelPtr('get'), 'Position');
    % 
    % uiRoiPanelSlider = ...
    %     viewerSlider(uiRoiMainPanelPtr('get'), ...
    %                  [280 ...
    %                  0 ...
    %                  20 ...
    %                  aRoiMainPanelPosition(4) ...
    %                  ],...
    %                  viewerBackgroundColor('get'), ...  % color
    %                  [0.8 0.8 0.8], ...
    %                  [0.5 0.5 0.5], ...
    %                  [0.2 0.2 0.2], ...                    
    %                  0, 1, ...                          % min, max
    %                  0, ...                             % initial
    %                  @uiRoiPanelSliderCallback, ...     % callback
    %                  0.2, ...                           % very faint track
    %                  0.6 ...                            % semi-opaque thumb
    %                  ); 
    % 
    % uiRoiPanelSliderPtr('set', uiRoiPanelSlider);

    initRoiPanel();

    if size(dicomBuffer('get', [], get(uiSeriesPtr('get'), 'Value')), 3) == 1 || ...
       iMode == 1

        if switchTo3DMode('get')     == true || ...
           switchToIsoSurface('get') == true || ...
           switchToMIPMode('get')    == true

            if showBorder('get') == true
                sBorderType = 'line';
            else
                sBorderType = 'none';
            end

            uiOneWindow = ...
                uipanel(fiMainWindowPtr('get'),...
                        'Units'          , 'pixels',...
                        'BorderType'     , sBorderType, ...
                        'BackgroundColor', surfaceColor('get', background3DOffset('get')),...
                        'AutoResizeChildren', 'off', ...
                        'Position', [680 ...
                                     addOnWidth('get')+30 ...
                                     getMainWindowSize('xsize')-680 ...
                                     getMainWindowSize('ysize')-viewerToolbarHeight('get')-viewerTopBarHeight('get')-addOnWidth('get')-30 ...
                                     ]...
                        );
            uiOneWindowPtr('set', uiOneWindow);

            uiMain3DPanel = ...
                uipanel(fiMainWindowPtr('get'),...
                        'Units'   , 'pixels',...
                        'Position', [0 ...
                                     addOnWidth('get')+30 ...
                                     680 ...
                                     getMainWindowSize('ysize')-viewerToolbarHeight('get')-viewerTopBarHeight('get')-addOnWidth('get')-30 ...
                                    ],...
                        'AutoResizeChildren', 'off', ...
                        'HitTest', 'off', ...
                        'BackgroundColor', viewerBackgroundColor('get'), ...
                        'ForegroundColor', viewerForegroundColor('get') ...
                       );
            uiMain3DPanelPtr('set', uiMain3DPanel);

            ui3DPanel = ...
                uipanel(uiMain3DPanelPtr('get'),...
                        'Units'   , 'pixels',...
                        'Position', [0 ...
                                     0 ...
                                     660 ...
                                     2000 ...
                                     ], ...
                         'AutoResizeChildren', 'off', ...
                         'HitTest', 'off', ...
                         'BackgroundColor', viewerBackgroundColor('get'), ...
                         'ForegroundColor', viewerForegroundColor('get') ...
                         );
            ui3DPanelPtr('set', ui3DPanel);

            aMain3DPanelPosition = get(uiMain3DPanelPtr('get'), 'Position');
            ui3DPanelSlider = ...
                uicontrol('Style'   , 'Slider', ...
                          'Parent'  , uiMain3DPanelPtr('get'),...
                          'Units'   , 'pixels',...
                          'Position', [660 ...
                                       0 ...
                                       20 ...
                                       aMain3DPanelPosition(4) ...
                                       ],...
                          'Value', 0, ...
                          'BackgroundColor', viewerBackgroundColor('get'), ...
                          'ForegroundColor', viewerForegroundColor('get'), ...
                          'Callback',@ui3DPanelSliderCallback ...
                          );
            ui3DPanelSliderPtr('set', ui3DPanelSlider);
            % addlistener(ui3DPanelSlider,'Value','PreSet', @ui3DPanelSliderCallback);
            addlistener(ui3DPanelSlider, 'ContinuousValueChange', @ui3DPanelSliderCallback);

        else

            if showBorder('get') == true
                sBorderType = 'line';
            else
                sBorderType = 'none';
            end

            uiOneWindow = ...
                uipanel(fiMainWindowPtr('get'),...
                        'Units'          , 'pixels',...
                        'BorderType'     , sBorderType, ...
                        'AutoResizeChildren', 'off', ...
                        'BackgroundColor', backgroundColor('get'),...
                        'Position', [0 ...
                                     addOnWidth('get')+30 ...
                                     getMainWindowSize('xsize') ...
                                     getMainWindowSize('ysize')-viewerToolbarHeight('get')-viewerTopBarHeight('get')-addOnWidth('get')-30 ...
                                     ]...
                        );
           uiOneWindowPtr('set', uiOneWindow);
        end

        axef = ... % We need to keep the toolbar for 3D visualisation
            axes(uiOneWindowPtr('get'), ...
                 'Units'   , 'normalized', ...
                 'Ydir'    , 'reverse', ...
                 'Position', [0 0 1 1], ...
                 'Box'     , 'off', ...
                 'Tag'     , 'axef', ...
                 'Visible' , 'off'...
                 );
        axef.Interactions = [zoomInteraction regionZoomInteraction rulerPanInteraction];
        axef.Toolbar.Visible = 'off';         
        axefPtr('set', axef, get(uiFusedSeriesPtr('get'), 'Value'));
        disableDefaultInteractivity(axef);

        axefc = ...
            axes(uiOneWindowPtr('get'), ...
                 'Units'   ,'normalized', ...
                 'Ydir'    , 'reverse', ...
                 'Position', [0 0 1 1], ...
                 'Color'   ,'none',...
                 'Box'     , 'off', ...
                 'Tag'     , 'axefc', ...
                 'Visible' , 'off'...
                 );
        axefc.Interactions = [zoomInteraction regionZoomInteraction rulerPanInteraction];
        % axefc.Toolbar.Visible = 'off';         
        axefcPtr('set', axefc, get(uiFusedSeriesPtr('get'), 'Value'));
        disableDefaultInteractivity(axefc);
        deleteAxesToolbar(axefc);
      
%        axer = ...
%            axes(uiOneWindowPtr('get'), ...
%                 'Units'   , 'normalized', ...
%                 'Ydir'    , 'reverse', ...
%                 'Position', [0 0 1 1], ...
%                 'Visible' , 'off'...
%                 );
%        axis(axer, 'equal'); % Need equal axe for circle roi
%        axerPtr('set', axer, get(uiSeriesPtr('get'), 'Value'));

        axesColorbar = ...
            uiaxes(uiOneWindowPtr('get'), ...
                   'Units'   , 'pixels', ...
                   'Position', [0 0 1 1], ...
                   'Visible' , 'on', ...
                   'Ydir'    , 'normal', ...
                   'Tag'     , 'colorbar', ...   
                   'Box'     , 'off', ...
                   'XLim'    , [0 inf], ...
                   'YLim'    , [0 inf], ...
                   'CLim'    , [0 inf] ...
                 );
        axesColorbar.Interactions = [];
        % axesColorbar.Toolbar.Visible = 'off';           
        axesColorbarPtr('set', axesColorbar, get(uiSeriesPtr('get'), 'Value'));                               
        disableDefaultInteractivity(axesColorbar);
        deleteAxesToolbar(axesColorbar);

        axesFusionColorbar = ...
            uiaxes(uiOneWindowPtr('get'), ...
                   'Units'   , 'pixels', ...
                   'Position', [0 0 1 1], ...
                   'Visible' , 'on', ...
                   'Ydir'    , 'normal', ...
                   'Tag'     , 'fusion colorbar', ...   
                   'Box'     , 'off', ...
                   'XLim'    , [0 inf], ...
                   'YLim'    , [0 inf], ...
                   'CLim'    , [0 inf] ...
                 );
        axesFusionColorbar.Interactions = [];
        % axesFusionColorbar.Toolbar.Visible = 'off';           
        axesFusionColorbarPtr('set', axesFusionColorbar, get(uiSeriesPtr('get'), 'Value'));                               
        disableDefaultInteractivity(axesFusionColorbar);
        deleteAxesToolbar(axesFusionColorbar);

        axe = ... % We need to keep the toolbar for 3D visualisation
            axes(uiOneWindowPtr('get'), ...
                   'Units'   , 'normalized', ...
                   'Position', [0 0 1 1], ...
                   'Visible' , 'off', ...
                   'Ydir'    , 'reverse', ...
                   'Box'     , 'off', ...
                   'Tag'     , 'axe', ...   
                   'XLim'    , [0 inf], ...
                   'YLim'    , [0 inf], ...
                   'CLim'    , [0 inf] ...
                   );
        axe.Interactions = [zoomInteraction regionZoomInteraction rulerPanInteraction];
        axe.Toolbar.Visible = 'off';          
        axePtr('set', axe, get(uiSeriesPtr('get'), 'Value'));
        disableDefaultInteractivity(axe);

%        linkaxes([axe axer],'xy');                                
%        uistack(axer, 'top');            
    else

        aImageSize = size(dicomBuffer('get', [], get(uiSeriesPtr('get'), 'Value')));

        if showBorder('get') == true
            sBorderType = 'line';
        else
            sBorderType = 'none';
        end

        uiCorWindow = ...
            uipanel(fiMainWindowPtr('get'),...
                    'Units'          , 'pixels',...
                    'BorderType'     , sBorderType, ...
                    'AutoResizeChildren', 'off', ...
                    'BackgroundColor', backgroundColor('get'),...
                    'Position', [0 ...
                                 addOnWidth('get')+30+15 ...
                                 getMainWindowSize('xsize')/5 ...
                                 getMainWindowSize('ysize')-viewerToolbarHeight('get')-viewerTopBarHeight('get')-addOnWidth('get')-30-15 ...
                                 ]...
                    );
        uiCorWindowPtr('set', uiCorWindow);

        if isVsplash('get') == false
            
            aImgFullScreenIcon = getFullScreenIconImage(uiCorWindow, true);
                
            if ~isempty(aImgFullScreenIcon)

                aUiCorPosition = get(uiCorWindow ,'Position');
        
                btnUiCorWindowFullScreen = ...
                    uicontrol(uiCorWindow, ...
                             'Position'       , [aUiCorPosition(3)-20 10 20 20], ...
                             'Enable'         , 'on', ...
                             'HitTest', 'off', ...
                             'String'         , '',...
                             'BackgroundColor', backgroundColor('get'), ...
                             'ForegroundColor', overlayColor('get'), ...
                             'TooltipString'  , 'Full Screen (Ctrl + F)', ...
                             'HitTest', 'off', ...
                             'CData'          , aImgFullScreenIcon, ...
                             'CallBack'       , @btnUiCorWindowFullScreenCallback ...
                             );
    
                btnUiCorWindowFullScreenPtr('set', btnUiCorWindowFullScreen);
            else
                btnUiCorWindowFullScreenPtr('set', []);
            end

            if strcmpi(default2DPlaybackPlane('get'), 'coronal')

                bValue = true;
            else
                bValue = false;
            end

            chkUiCorWindowSelected = ...
                uicontrol(uiCorWindow,...
                          'style'   , 'checkbox',...
                          'enable'  , 'on',...
                          'value'   , bValue,...
                          'position', [aUiCorPosition(3)-40 10 20 20],...
                          'BackgroundColor', backgroundColor('get'), ...
                          'ForegroundColor', overlayColor('get'), ...
                          'TooltipString'  , 'Coronal Playback', ...
                          'CallBack'       , @chkUiCorWindowSelectedCallback ...
                          );
            chkUiCorWindowSelectedPtr('set', chkUiCorWindowSelected);
        end

        % uiSliderCor = ...
        %      uicontrol(fiMainWindowPtr('get'), ...
        %                'Style'   , 'Slider', ...
        %                'Position', [0 ...
        %                             addOnWidth('get')+30 ...
        %                             getMainWindowSize('xsize')/5 ...
        %                             20 ...
        %                             ], ...
        %                'Value'   , 0.5, ...
        %                'Enable'  , 'on', ...
        %                'BackgroundColor', viewerBackgroundColor('get'), ...
        %                'ForegroundColor', viewerForegroundColor('get'), ...
        %                'CallBack', @sliderCorCallback ...
        %                );
        %  uiSliderCorPtr('set', uiSliderCor);
        uiSliderCor = ...
            viewerSlider(fiMainWindowPtr('get'), ...
                         [0 ...
                          addOnWidth('get')+30 ...
                          getMainWindowSize('xsize')/5 ...
                          20 ...
                         ], ...
                         viewerBackgroundColor('get'), ...  % color
                         [0.8 0.8 0.8], ...
                         [0.5 0.5 0.5], ...
                         [0.2 0.2 0.2], ...    
                         0, 1, ...                          % min, max
                         0.5, ...                           % initial
                         @sliderCorCallback, ...            % callback
                         true, ...                          % In motion callback
                         0.2, ...                           % very faint track
                         0.6 ...                            % semi-opaque thumb
                         ); 

         uiSliderCorPtr('set', uiSliderCor);

         oldVal = get(uiSliderCor, 'Value');      
         newVal = round(oldVal * aImageSize(1)) + 1;         
         set(uiSliderCor, 'Min', 1, 'Max', aImageSize(1), ...
                         'SliderStep', [1/aImageSize(1) 1/aImageSize(1)], ...
                         'Value', newVal);

         %addlistener(uiSliderCor, 'Value', 'PreSet', @sliderCorCallback);
         % addlistener(uiSliderCor, 'ContinuousValueChange', @sliderCorCallback);

         uiSagWindow = ...
             uipanel(fiMainWindowPtr('get'),...
                     'Units'          , 'pixels',...
                     'HitTest', 'off', ...
                     'BorderType'     , sBorderType, ...
                     'AutoResizeChildren', 'off', ...
                     'BackgroundColor', backgroundColor('get'),...
                     'Position', [getMainWindowSize('xsize')/5 ...
                                  addOnWidth('get')+30+15 ...
                                  getMainWindowSize('xsize')/5 ...
                                  getMainWindowSize('ysize')-viewerToolbarHeight('get')-viewerTopBarHeight('get')-addOnWidth('get')-30-15 ...
                                  ]...
                     );

        uiSagWindowPtr('set', uiSagWindow);

        if isVsplash('get') == false

            aImgFullScreenIcon = getFullScreenIconImage(uiSagWindow, true);

            if ~isempty(aImgFullScreenIcon)

                aUiSagPosition = get(uiSagWindow ,'Position');
        
                btnUiSagWindowFullScreen = ...
                    uicontrol(uiSagWindow, ...
                             'Position'       , [aUiSagPosition(3)-20 10 20 20], ...
                             'Enable'         , 'on', ...
                             'String'         , '',...
                             'BackgroundColor', backgroundColor('get'), ...
                             'ForegroundColor', overlayColor('get'), ...
                             'HitTest', 'off', ...
                             'TooltipString'  , 'Full Screen (Ctrl + F)', ...
                             'HitTest', 'off', ...
                             'CData'          , aImgFullScreenIcon, ...
                             'CallBack'       , @btnUiSagWindowFullScreenCallback ...
                             );
                btnUiSagWindowFullScreenPtr('set', btnUiSagWindowFullScreen);
            else
                btnUiSagWindowFullScreenPtr('set', []);
            end

            if strcmpi(default2DPlaybackPlane('get'), 'sagittal')

                bValue = true;
            else
                bValue = false;
            end

            chkUiSagWindowSelected = ...
                uicontrol(uiSagWindow,...
                          'style'   , 'checkbox',...
                          'enable'  , 'on',...
                          'value'   , bValue,...
                          'position', [aUiSagPosition(3)-40 10 20 20],...
                          'BackgroundColor', backgroundColor('get'), ...
                          'ForegroundColor', overlayColor('get'), ...
                          'TooltipString'  , 'Sagittal Playback', ...
                          'CallBack'       , @chkUiSagWindowSelectedCallback ...
                         );
            chkUiSagWindowSelectedPtr('set', chkUiSagWindowSelected);
        end

        % uiSliderSag = ...
        %     uicontrol(fiMainWindowPtr('get'), ...
        %               'Style'   , 'Slider', ...
        %               'Position', [(getMainWindowSize('xsize')/5) ...
        %                            addOnWidth('get')+30 ...
        %                            getMainWindowSize('xsize')/5 ...
        %                            20 ...
        %                            ], ...
        %               'Value'   , 0.5, ...
        %               'Enable'  , 'on', ...
        %               'BackgroundColor', viewerBackgroundColor('get'), ...
        %               'ForegroundColor', viewerForegroundColor('get'), ...
        %               'CallBack', @sliderSagCallback ...
        %               );
        % uiSliderSagPtr('set', uiSliderSag);

        uiSliderSag = ...
            viewerSlider(fiMainWindowPtr('get'), ...
                         [(getMainWindowSize('xsize')/5) ...
                          addOnWidth('get')+30 ...
                          getMainWindowSize('xsize')/5 ...
                          20 ...
                         ], ...
                         viewerBackgroundColor('get'), ...  % color
                         [0.8 0.8 0.8], ...
                         [0.5 0.5 0.5], ...
                         [0.2 0.2 0.2], ...                         
                         0, 1, ...                          % min, max
                         0.5, ...                           % initial
                         @sliderSagCallback, ...            % callback
                         true, ...                          % In motion callback
                         0.2, ...                           % very faint track
                         0.6 ...                            % semi-opaque thumb
                         );        
        uiSliderSagPtr('set', uiSliderSag);
        
        oldVal = get(uiSliderSag, 'Value');     
        newVal = round(oldVal * aImageSize(2)) + 1;        
        set(uiSliderSag, 'Min', 1, 'Max', aImageSize(2), ...
                         'SliderStep', [1/aImageSize(2) 1/aImageSize(2)], ...
                         'Value', newVal);     

        % addlistener(uiSliderSag,'Value','PreSet',@sliderSagCallback);
        % addlistener(uiSliderSag, 'ContinuousValueChange', @sliderSagCallback);

        uiTraWindow = ...
            uipanel(fiMainWindowPtr('get'),...
                    'Units'          , 'pixels',...
                    'BorderType'     , sBorderType, ...
                    'AutoResizeChildren', 'off', ...
                    'BackgroundColor', backgroundColor('get'),...
                    'Position', [(getMainWindowSize('xsize')/2.5) ...
                                 addOnWidth('get')+30+15 ...
                                 getMainWindowSize('xsize')/2.5 ...
                                 getMainWindowSize('ysize')-viewerToolbarHeight('get')-viewerTopBarHeight('get')-addOnWidth('get')-30-15 ...
                                 ]...
                                );
        uiTraWindowPtr('set', uiTraWindow);

        if isVsplash('get') == false

            aImgFullScreenIcon = getFullScreenIconImage(uiTraWindow, true);

            if ~isempty(aImgFullScreenIcon)

                aUiTraPosition = get(uiTraWindow ,'Position');
        
                btnUiTraWindowFullScreen = ...
                    uicontrol(uiTraWindow, ...
                             'Position'       , [aUiTraPosition(3)-73 10 20 20], ...
                             'Enable'         , 'on', ...
                             'String'         , '',...
                             'BackgroundColor', backgroundColor('get'), ...
                             'ForegroundColor', overlayColor('get'), ...
                             'TooltipString'  , 'Full Screen (Ctrl + F)', ...
                             'HitTest', 'off' , ...
                             'CData'          , aImgFullScreenIcon, ...
                             'CallBack'       , @btnUiTraWindowFullScreenCallback ...
                             );
                btnUiTraWindowFullScreenPtr('set', btnUiTraWindowFullScreen);
            else
                btnUiTraWindowFullScreenPtr('set', []);
            end

            if strcmpi(default2DPlaybackPlane('get'), 'axial')

                bValue = true;
            else
                bValue = false;
            end

            chkUiTraWindowSelected = ...
                uicontrol(uiTraWindow,...
                          'style'   , 'checkbox',...
                          'enable'  , 'on',...
                          'value'   , bValue,...
                          'position', [aUiTraPosition(3)-93 10 20 20],...
                          'BackgroundColor', backgroundColor('get'), ...
                          'ForegroundColor', overlayColor('get'), ...
                          'TooltipString'  , 'Axial Playback', ...
                          'CallBack'       , @chkUiTraWindowSelectedCallback ...
                          );
            chkUiTraWindowSelectedPtr('set', chkUiTraWindowSelected);

        end

        % uiSliderTra = ...
        %     uicontrol(fiMainWindowPtr('get'), ...
        %               'Style'   , 'Slider', ...
        %               'Position', [(getMainWindowSize('xsize')/2.5) ...
        %                            addOnWidth('get')+30 ...
        %                            getMainWindowSize('xsize')/2.5 ...
        %                            20 ...
        %                            ], ...
        %               'Value'   , 0.5, ...
        %               'Enable'  , 'on', ...
        %               'BackgroundColor', viewerBackgroundColor('get'), ...
        %               'ForegroundColor', viewerForegroundColor('get'), ...
        %               'CallBack', @sliderTraCallback ...
        %               );
        uiSliderTra = ...
            viewerSlider(fiMainWindowPtr('get'), ...
                         [(getMainWindowSize('xsize')/2.5) ...
                          addOnWidth('get')+30 ...
                          getMainWindowSize('xsize')/2.5 ...
                          20 ...
                         ], ...
                         viewerBackgroundColor('get'), ...  % color
                         [0.8 0.8 0.8], ...
                         [0.5 0.5 0.5], ...
                         [0.2 0.2 0.2], ...                       
                         0, 1, ...                          % min, max
                         0.5, ...       % initial
                         @sliderTraCallback, ...            % callback
                         true, ...                          % In motion callback
                         0.2, ...                           % very faint track
                         0.6 ...                            % semi-opaque thumb
                         );        
        uiSliderTraPtr('set', uiSliderTra);       

        oldVal = get(uiSliderTra, 'Value');     
        newVal = round(oldVal * aImageSize(3)) + 1;         
        set(uiSliderTra, 'Min', 1, 'Max', aImageSize(3), ...
                         'SliderStep', [1/aImageSize(3) 1/aImageSize(3)], ...
                         'Value', newVal);

        % addlistener(uiSliderTra, 'Value', 'PreSet', @sliderTraCallback);
        % addlistener(uiSliderTra, 'ContinuousValueChange', @sliderTraCallback);

        uiMipWindow = ...
            uipanel(fiMainWindowPtr('get'),...
                    'Units'          , 'pixels',...
                    'BorderType'     , sBorderType, ...
                    'AutoResizeChildren', 'off', ...
                    'BackgroundColor', backgroundColor('get'),...
                    'Position', [(getMainWindowSize('xsize')/1.25) ...
                                 addOnWidth('get')+30+15 ...
                                 getMainWindowSize('xsize')/5 ...
                                 getMainWindowSize('ysize')-viewerToolbarHeight('get')-viewerTopBarHeight('get')-addOnWidth('get')-30-15 ...
                                 ]...
                                );
        uiMipWindowPtr('set', uiMipWindow);

        if isVsplash('get') == false
            
            aImgFullScreenIcon = getFullScreenIconImage(uiMipWindow, true);

            if ~isempty(aImgFullScreenIcon)

                aUiMipPosition = get(uiMipWindow ,'Position');
        
                btnUiMipWindowFullScreen = ...
                    uicontrol(uiMipWindow, ...
                             'Position'       , [aUiMipPosition(3)-20 10 20 20], ...
                             'Enable'         , 'on', ...
                             'String'         , '',...
                             'BackgroundColor', backgroundColor('get'), ...
                             'ForegroundColor', overlayColor('get'), ...
                             'TooltipString'  , 'Full Screen (Ctrl + F)', ...
                             'HitTest', 'off', ...
                             'CData'          , aImgFullScreenIcon, ...
                             'CallBack'       , @btnUiMipWindowFullScreenCallback ...
                             );
                btnUiMipWindowFullScreenPtr('set', btnUiMipWindowFullScreen);
            else
                btnUiMipWindowFullScreenPtr('set', []);
            end

            if strcmpi(default2DPlaybackPlane('get'), 'mip')

                bValue = true;
            else
                bValue = false;
            end

            chkUiMipWindowSelected = ...
                uicontrol(uiMipWindow,...
                          'style'   , 'checkbox',...
                          'enable'  , 'on',...
                          'value'   , bValue,...
                          'position', [aUiMipPosition(3)-40 10 20 20],...
                          'BackgroundColor', backgroundColor('get'), ...
                          'ForegroundColor', overlayColor('get'), ...
                          'TooltipString'  , 'MIP Playback', ...
                          'CallBack'       , @chkUiMipWindowSelectedCallback ...
                          );          
            chkUiMipWindowSelectedPtr('set', chkUiMipWindowSelected);
        end

        if mipAngle('get') == 1
            dMipSliderValue = 0;
        else
            dMipSliderValue = mipAngle('get')/32;
        end
        
        % uiSliderMip = ...
        %     uicontrol(fiMainWindowPtr('get'), ...
        %               'Style'   , 'Slider', ...
        %               'Position', [(getMainWindowSize('xsize')/1.25) ...
        %                            addOnWidth('get')+30 ...
        %                            getMainWindowSize('xsize')/5 ...
        %                            20 ...
        %                            ], ...
        %               'Value'   , dMipSliderValue, ...
        %               'Enable'  , 'on', ...
        %               'BackgroundColor', viewerBackgroundColor('get'), ...
        %               'ForegroundColor', viewerForegroundColor('get'), ...
        %               'CallBack', @sliderMipCallback ...
        %               );
        
        uiSliderMip = ...
            viewerSlider(fiMainWindowPtr('get'), ...
                         [(getMainWindowSize('xsize')/1.25) ...
                          addOnWidth('get')+30 ...
                          getMainWindowSize('xsize')/5 ...
                          20 ...
                         ], ...
                         viewerBackgroundColor('get'), ...  % color
                         [0.8 0.8 0.8], ...
                         [0.5 0.5 0.5], ...
                         [0.2 0.2 0.2], ...                        
                         0, 1, ...                          % min, max
                         dMipSliderValue, ...               % initial
                         @sliderMipCallback, ...            % callback
                         true, ...                          % In motion callback
                         0.2, ...                           % very faint track
                         0.6 ...                            % semi-opaque thumb
                         );  

        uiSliderMipPtr('set', uiSliderMip);

        oldVal = get(uiSliderMip, 'Value');      % e.g., 0.5 in [0, 1]
        newVal = round(oldVal * 31) + 1;         % maps 0–1 to 1–32
        set(uiSliderMip, 'Min', 1, 'Max', 32, ...
                         'SliderStep', [1/31 1/31], ...
                         'Value', newVal);
       % addlistener(uiSliderMip, 'Value', 'PreSet', @sliderMipCallback);
        % addlistener(uiSliderMip, 'ContinuousValueChange', @sliderMipCallback);

%        jScrollBar = findobj(uiSliderTraPtr('get'));
 %       jScrollBar.ButtonDownFcn =  @sliderTraCallback;
                        
        axes1f = ...
            axes(uiCorWindowPtr('get'), ...
                   'Units'   , 'normalized', ...
                   'Position', [0 0 1 1], ...
                   'Visible' , 'off', ...
                   'Ydir'    , 'reverse', ...
                   'Tag'     , 'axes1f', ...   
                   'Box'     , 'off', ...
                   'XLim'    , [0 inf], ...
                   'YLim'    , [0 inf], ...
                   'CLim'    , [0 inf] ...
                   );
        axes1f.Interactions = [zoomInteraction regionZoomInteraction rulerPanInteraction];
        % axes1f.Toolbar.Visible = 'off';           
        axes1fPtr('set', axes1f, get(uiFusedSeriesPtr('get'), 'Value'));
        disableDefaultInteractivity(axes1f);
        deleteAxesToolbar(axes1f);
      
        axes1fc = ...
            axes(uiCorWindowPtr('get'), ...
                   'Units'   , 'normalized', ...
                   'Position', [0 0 1 1], ...
                   'Visible' , 'off', ...
                   'Ydir'    , 'reverse', ...
                   'Tag'     , 'axes1fc', ...   
                   'Box'     , 'off', ...
                   'XLim'    , [0 inf], ...
                   'YLim'    , [0 inf], ...
                   'CLim'    , [0 inf] ...
                 );
        axes1fc.Interactions = [zoomInteraction regionZoomInteraction rulerPanInteraction];
        % axes1fc.Toolbar.Visible = 'off';           
        axes1fcPtr('set', axes1fc, get(uiFusedSeriesPtr('get'), 'Value'));
        disableDefaultInteractivity(axes1fc);
        deleteAxesToolbar(axes1fc);
        
%        axes1r = ...
%           axes(uiCorWindowPtr('get'), ...
%                'Units'   , 'normalized', ...
%                'Ydir'    , 'reverse', ...
%                'xlimmode', 'manual',...
%                'ylimmode', 'manual',...
%                'zlimmode', 'manual',...
%                'climmode', 'manual',...
%                'alimmode', 'manual',...
%                'Position', [0 0 1 1], ...
%                 'Tag'     , 'axes1r', ...
%                'Visible' , 'off'...
%                );
%       axis(axes1r, 'equal'); % Need equal axe for circle roi
%       axes1rPtr('set', axes1r, get(uiSeriesPtr('get'), 'Value')); 
       
        axes1 = ...
            axes(uiCorWindowPtr('get'), ...
                   'Units'   , 'normalized', ...
                   'Position', [0 0 1 1], ...
                   'Visible' , 'off', ...
                   'Ydir'    , 'reverse', ...
                   'Box'     , 'off', ...
                   'Tag'     , 'axes1', ...   
                   'XLim'    , [0 inf], ...
                   'YLim'    , [0 inf], ...
                   'CLim'    , [0 inf] ...
                );
        axes1.Interactions = [zoomInteraction regionZoomInteraction rulerPanInteraction];
        % axes1.Toolbar.Visible = 'off';           
        axes1Ptr('set', axes1, get(uiSeriesPtr('get'), 'Value'));                            
        disableDefaultInteractivity(axes1);
        deleteAxesToolbar(axes1);
      
%        linkaxes([axes1 axes1r],'xy');                                
%        uistack(axes1r, 'top');            
        
        axes2f = ...
            axes(uiSagWindowPtr('get'), ...
                   'Units'   , 'normalized', ...
                   'Position', [0 0 1 1], ...
                   'Visible' , 'off', ...
                   'Ydir'    , 'reverse', ...
                   'Tag'     , 'axes2f', ...   
                   'Box'     , 'off', ...
                   'XLim'    , [0 inf], ...
                   'YLim'    , [0 inf], ...
                   'CLim'    , [0 inf] ...
                 );
        axes2f.Interactions = [zoomInteraction regionZoomInteraction rulerPanInteraction];
        % axes2f.Toolbar.Visible = 'off';         
        axes2fPtr('set', axes2f, get(uiFusedSeriesPtr('get'), 'Value'));
        disableDefaultInteractivity(axes2f);
        deleteAxesToolbar(axes2f);
       
        axes2fc = ...
            axes(uiSagWindowPtr('get'), ...
                   'Units'   , 'normalized', ...
                   'Position', [0 0 1 1], ...
                   'Visible' , 'off', ...
                   'Ydir'    , 'reverse', ...
                   'Tag'     , 'axes2fc', ...   
                   'Box'     , 'off', ...
                   'XLim'    , [0 inf], ...
                   'YLim'    , [0 inf], ...
                   'CLim'    , [0 inf] ...
                 );
        axes2fc.Interactions = [zoomInteraction regionZoomInteraction rulerPanInteraction];
        % axes2fc.Toolbar.Visible = 'off';           
        axes2fcPtr('set', axes2fc, get(uiFusedSeriesPtr('get'), 'Value'));
        disableDefaultInteractivity(axes2fc);
        deleteAxesToolbar(axes2fc);
       
%         axes2r = ...
%           axes(uiSagWindowPtr('get'), ...
%                'Units'   , 'normalized', ...
%                'Ydir'    , 'reverse', ...
%                'xlimmode', 'manual',...
%                'ylimmode', 'manual',...
%                'zlimmode', 'manual',...
%                'climmode', 'manual',...
%                'alimmode', 'manual',...
%                'Position', [0 0 1 1], ...
%                'Tag'     , 'axes2r', ...
%                'Visible' , 'off'...
%                );
%        axis(axes2r, 'equal'); % Need equal axe for circle roi
%        axes2rPtr('set', axes2r, get(uiSeriesPtr('get'), 'Value'));  
       
        axes2 = ...
            axes(uiSagWindowPtr('get'), ...
                   'Units'   , 'normalized', ...
                   'Position', [0 0 1 1], ...
                   'Visible' , 'off', ...
                   'Ydir'    , 'reverse', ...
                   'Tag'     , 'axes2', ...   
                   'Box'     , 'off', ...
                   'XLim'    , [0 inf], ...
                   'YLim'    , [0 inf], ...
                   'CLim'    , [0 inf] ...
                 );
        axes2.Interactions = [zoomInteraction regionZoomInteraction rulerPanInteraction];
        % axes2.Toolbar.Visible = 'off';            
        axes2Ptr('set', axes2, get(uiSeriesPtr('get'), 'Value'));        
        disableDefaultInteractivity(axes2);
        deleteAxesToolbar(axes2);
        
%        linkaxes([axes2 axes2r],'xy');                                
%        uistack(axes2r, 'top');    
        
        axes3f = ...
            axes(uiTraWindowPtr('get'), ...
                   'Units'   , 'normalized', ...
                   'Position', [0 0 1 1], ...
                   'Visible' , 'off', ...
                   'Ydir'    , 'reverse', ...
                   'Tag'     , 'axes3f', ...   
                   'Box'     , 'off', ...
                   'XLim'    , [0 inf], ...
                   'YLim'    , [0 inf], ...
                   'CLim'    , [0 inf] ...
                 );
        axes3f.Interactions = [zoomInteraction regionZoomInteraction rulerPanInteraction];
        % axes3f.Toolbar.Visible = 'off';         
        axes3fPtr('set', axes3f, get(uiFusedSeriesPtr('get'), 'Value'));
        disableDefaultInteractivity(axes3f);
        deleteAxesToolbar(axes3f); 

        axes3fc = ...
            axes(uiTraWindowPtr('get'), ...
                   'Units'   , 'normalized', ...
                   'Position', [0 0 1 1], ...
                   'Visible' , 'off', ...
                   'Ydir'    , 'reverse', ...
                   'Tag'     , 'axes3fc', ...   
                   'Box'     , 'off', ...
                   'XLim'    , [0 inf], ...
                   'YLim'    , [0 inf], ...
                   'CLim'    , [0 inf] ...
                 );
        axes3fc.Interactions = [zoomInteraction regionZoomInteraction rulerPanInteraction];
        % axes3fc.Toolbar.Visible = 'off';           
        axes3fcPtr('set', axes3fc, get(uiFusedSeriesPtr('get'), 'Value'));
        disableDefaultInteractivity(axes3fc);
        deleteAxesToolbar(axes3fc);
       
%        axes3r = ...
%           axes(uiTraWindowPtr('get'), ...
%                'Units'   , 'normalized', ...
%                'Ydir'    , 'reverse', ...
%                'xlimmode', 'manual',...
%               'ylimmode', 'manual',...
%                'zlimmode', 'manual',...
%                'climmode', 'manual',...
%                'alimmode', 'manual',...
%                'Position', [0 0 1 1], ...
%                'Tag'     , 'axes3r', ...
%                'Visible' , 'off'...
%                );
%       axis(axes3r, 'equal'); % Need equal axe for circle roi
%       axes3rPtr('set', axes3r, get(uiSeriesPtr('get'), 'Value'));  


% % Create a tile within the layout
% axes3 = nexttile(tiledlayout(uiTraWindowPtr('get'), 1, 1));
% set(axes3, 'Units', 'normalized', ...
%         'Position', [0 0 1 1], ...
%         'Visible', 'off', ...
%         'YDir', 'reverse', ...
%         'Tag', 'axes3', ...
%         'XLim', [0 inf], ...
%         'YLim', [0 inf], ...
%         'CLim', [0 inf]);
        axesColorbar = ...
            uiaxes(uiTraWindowPtr('get'), ...
                   'Units'   , 'pixels', ...
                   'Position', [0 0 1 1], ...
                   'Visible' , 'on', ...
                   'Ydir'    , 'normal', ...
                   'Tag'     , 'colorbar', ...   
                   'Box'     , 'off', ...
                   'XLim'    , [0 inf], ...
                   'YLim'    , [0 inf], ...
                   'CLim'    , [0 inf] ...
                 );
        axesColorbar.Interactions = [];
        % axesColorbar.Toolbar.Visible = 'off';           
        axesColorbarPtr('set', axesColorbar, get(uiSeriesPtr('get'), 'Value'));                               
        disableDefaultInteractivity(axesColorbar);
        deleteAxesToolbar(axesColorbar);

        axesFusionColorbar = ...
            uiaxes(uiTraWindowPtr('get'), ...
                   'Units'   , 'pixels', ...
                   'Position', [0 0 1 1], ...
                   'Visible' , 'on', ...
                   'Ydir'    , 'normal', ...
                   'Tag'     , 'fusion colorbar', ...   
                   'Box'     , 'off', ...
                   'XLim'    , [0 inf], ...
                   'YLim'    , [0 inf], ...
                   'CLim'    , [0 inf] ...
                 );
        axesFusionColorbar.Interactions = [];
        % axesFusionColorbar.Toolbar.Visible = 'off';           
        axesFusionColorbarPtr('set', axesFusionColorbar, get(uiFusedSeriesPtr('get'), 'Value'));                               
        disableDefaultInteractivity(axesFusionColorbar);
        deleteAxesToolbar(axesFusionColorbar);

        axes3 = ...
            axes(uiTraWindowPtr('get'), ...
                   'Units'   , 'normalized', ...
                   'Position', [0 0 1 1], ...
                   'Visible' , 'off', ...
                   'Ydir'    , 'reverse', ...
                   'Tag'     , 'axes3', ...   
                   'Box'     , 'off', ...
                   'XLim'    , [0 inf], ...
                   'YLim'    , [0 inf], ...
                   'CLim'    , [0 inf] ...
                 );
        axes3.Interactions = [zoomInteraction regionZoomInteraction rulerPanInteraction];
        % axes3.Toolbar.Visible = 'off';           
        axes3Ptr('set', axes3, get(uiSeriesPtr('get'), 'Value'));                               
        disableDefaultInteractivity(axes3);
        deleteAxesToolbar(axes3);

        % axtoolbar(axes3, 'none');  % Removes the axes toolbar


%        linkaxes([axes3 axes3r],'xy');                                
%        uistack(axes3r, 'top');    
        
        axesMipf = ...
            axes(uiMipWindowPtr('get'), ...
                   'Units'   , 'normalized', ...
                   'Position', [0 0 1 1], ...
                   'Visible' , 'off', ...
                   'Ydir'    , 'reverse', ...
                   'Tag'     , 'axesMipf', ...   
                   'Box'     , 'off', ...
                   'XLim'    , [0 inf], ...
                   'YLim'    , [0 inf], ...
                   'CLim'    , [0 inf] ...
                 );
        axesMipf.Interactions = [zoomInteraction regionZoomInteraction rulerPanInteraction];
        % axesMipf.Toolbar.Visible = 'off';         
        axesMipfPtr('set', axesMipf, get(uiFusedSeriesPtr('get'), 'Value'));
        disableDefaultInteractivity(axesMipf);
        deleteAxesToolbar(axesMipf);
        
        axesMipfc = ...
            axes(uiMipWindowPtr('get'), ...
                   'Units'   , 'normalized', ...
                   'Position', [0 0 1 1], ...
                   'Visible' , 'off', ...
                   'Ydir'    , 'reverse', ...
                   'Tag'     , 'axesMipfc', ...   
                   'Box'     , 'off', ...
                   'XLim'    , [0 inf], ...
                   'YLim'    , [0 inf], ...
                   'CLim'    , [0 inf] ...
                 );
        axesMipfc.Interactions = [zoomInteraction regionZoomInteraction rulerPanInteraction];
        % axesMipfc.Toolbar.Visible = 'off';           
        axesMipfcPtr('set', axesMipfc, get(uiFusedSeriesPtr('get'), 'Value'));
        disableDefaultInteractivity(axesMipfc);
        deleteAxesToolbar(axesMipfc);
       
        axesMip = ...
            axes(uiMipWindowPtr('get'), ...
                   'Units'   , 'normalized', ...
                   'Position', [0 0 1 1], ...
                   'Visible' , 'off', ...
                   'Ydir'    , 'reverse', ...
                   'Tag'     , 'axesMip', ...   
                   'Box'     , 'off', ...
                   'XLim'    , [0 inf], ...
                   'YLim'    , [0 inf], ...
                   'CLim'    , [0 inf] ...
                 );
        axesMip.Interactions = [zoomInteraction regionZoomInteraction rulerPanInteraction];
        % axesMip.Toolbar.Visible = 'off';       
        axesMipPtr('set', axesMip, get(uiSeriesPtr('get'), 'Value'));
        disableDefaultInteractivity(axesMip);
        deleteAxesToolbar(axesMip);

    end

end
